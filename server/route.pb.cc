// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "route.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {
namespace route {

namespace {

const ::google::protobuf::Descriptor* RouteMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTokenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTokenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AddrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_route_2eproto() {
  protobuf_AddDesc_route_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "route.proto");
  GOOGLE_CHECK(file != NULL);
  RouteMsg_descriptor_ = file->message_type(0);
  static const int RouteMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, req_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, req_token_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, connect_rsp_),
  };
  RouteMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteMsg_descriptor_,
      RouteMsg::default_instance_,
      RouteMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteMsg));
  ReqToken_descriptor_ = file->message_type(1);
  static const int ReqToken_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToken, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToken, addr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToken, client_ip_v4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToken, fgw_ip_v4_),
  };
  ReqToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqToken_descriptor_,
      ReqToken::default_instance_,
      ReqToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqToken));
  ReqTokenRsp_descriptor_ = file->message_type(2);
  static const int ReqTokenRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenRsp, port_for_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenRsp, port_for_fgw_),
  };
  ReqTokenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTokenRsp_descriptor_,
      ReqTokenRsp::default_instance_,
      ReqTokenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTokenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTokenRsp));
  Connect_descriptor_ = file->message_type(3);
  static const int Connect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, token_),
  };
  Connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Connect_descriptor_,
      Connect::default_instance_,
      Connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Connect));
  ConnectRsp_descriptor_ = file->message_type(4);
  static const int ConnectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, code_),
  };
  ConnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRsp_descriptor_,
      ConnectRsp::default_instance_,
      ConnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRsp));
  MsgType_descriptor_ = file->enum_type(0);
  AddrType_descriptor_ = file->enum_type(1);
  ClientType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_route_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteMsg_descriptor_, &RouteMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqToken_descriptor_, &ReqToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTokenRsp_descriptor_, &ReqTokenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Connect_descriptor_, &Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRsp_descriptor_, &ConnectRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_route_2eproto() {
  delete RouteMsg::default_instance_;
  delete RouteMsg_reflection_;
  delete ReqToken::default_instance_;
  delete ReqToken_reflection_;
  delete ReqTokenRsp::default_instance_;
  delete ReqTokenRsp_reflection_;
  delete Connect::default_instance_;
  delete Connect_reflection_;
  delete ConnectRsp::default_instance_;
  delete ConnectRsp_reflection_;
}

void protobuf_AddDesc_route_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013route.proto\022\"com.letsmidi.monsys.proto"
    "col.route\"\364\002\n\010RouteMsg\022\017\n\007version\030\001 \002(\005\022"
    "9\n\004type\030\002 \002(\0162+.com.letsmidi.monsys.prot"
    "ocol.route.MsgType\022\020\n\010sequence\030\003 \002(\005\022\?\n\t"
    "req_token\030\n \001(\0132,.com.letsmidi.monsys.pr"
    "otocol.route.ReqToken\022F\n\rreq_token_rsp\030\013"
    " \001(\0132/.com.letsmidi.monsys.protocol.rout"
    "e.ReqTokenRsp\022<\n\007connect\030\014 \001(\0132+.com.let"
    "smidi.monsys.protocol.route.Connect\022C\n\013c"
    "onnect_rsp\030\r \001(\0132..com.letsmidi.monsys.p"
    "rotocol.route.ConnectRsp\"\203\001\n\010ReqToken\022\r\n"
    "\005token\030\001 \002(\t\022\?\n\taddr_type\030\002 \002(\0162,.com.le"
    "tsmidi.monsys.protocol.route.AddrType\022\024\n"
    "\014client_ip_v4\030\003 \001(\005\022\021\n\tfgw_ip_v4\030\004 \001(\005\"J"
    "\n\013ReqTokenRsp\022\014\n\004code\030\001 \002(\005\022\027\n\017port_for_"
    "client\030\002 \002(\005\022\024\n\014port_for_fgw\030\003 \002(\005\"]\n\007Co"
    "nnect\022C\n\013client_type\030\001 \002(\0162..com.letsmid"
    "i.monsys.protocol.route.ClientType\022\r\n\005to"
    "ken\030\002 \002(\t\"\032\n\nConnectRsp\022\014\n\004code\030\001 \002(\005*I\n"
    "\007MsgType\022\r\n\tREQ_TOKEN\020\001\022\021\n\rREQ_TOKEN_RSP"
    "\020\002\022\013\n\007CONNECT\020\003\022\017\n\013CONNECT_RSP\020\004* \n\010Addr"
    "Type\022\t\n\005IP_V4\020\001\022\t\n\005IP_V6\020\002*!\n\nClientType"
    "\022\n\n\006CLIENT\020\001\022\007\n\003FGW\020\002", 901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "route.proto", &protobuf_RegisterTypes);
  RouteMsg::default_instance_ = new RouteMsg();
  ReqToken::default_instance_ = new ReqToken();
  ReqTokenRsp::default_instance_ = new ReqTokenRsp();
  Connect::default_instance_ = new Connect();
  ConnectRsp::default_instance_ = new ConnectRsp();
  RouteMsg::default_instance_->InitAsDefaultInstance();
  ReqToken::default_instance_->InitAsDefaultInstance();
  ReqTokenRsp::default_instance_->InitAsDefaultInstance();
  Connect::default_instance_->InitAsDefaultInstance();
  ConnectRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_route_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_route_2eproto {
  StaticDescriptorInitializer_route_2eproto() {
    protobuf_AddDesc_route_2eproto();
  }
} static_descriptor_initializer_route_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AddrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddrType_descriptor_;
}
bool AddrType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientType_descriptor_;
}
bool ClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RouteMsg::kVersionFieldNumber;
const int RouteMsg::kTypeFieldNumber;
const int RouteMsg::kSequenceFieldNumber;
const int RouteMsg::kReqTokenFieldNumber;
const int RouteMsg::kReqTokenRspFieldNumber;
const int RouteMsg::kConnectFieldNumber;
const int RouteMsg::kConnectRspFieldNumber;
#endif  // !_MSC_VER

RouteMsg::RouteMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.route.RouteMsg)
}

void RouteMsg::InitAsDefaultInstance() {
  req_token_ = const_cast< ::com::letsmidi::monsys::protocol::route::ReqToken*>(&::com::letsmidi::monsys::protocol::route::ReqToken::default_instance());
  req_token_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::route::ReqTokenRsp*>(&::com::letsmidi::monsys::protocol::route::ReqTokenRsp::default_instance());
  connect_ = const_cast< ::com::letsmidi::monsys::protocol::route::Connect*>(&::com::letsmidi::monsys::protocol::route::Connect::default_instance());
  connect_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::route::ConnectRsp*>(&::com::letsmidi::monsys::protocol::route::ConnectRsp::default_instance());
}

RouteMsg::RouteMsg(const RouteMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.route.RouteMsg)
}

void RouteMsg::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 1;
  sequence_ = 0;
  req_token_ = NULL;
  req_token_rsp_ = NULL;
  connect_ = NULL;
  connect_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteMsg::~RouteMsg() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.route.RouteMsg)
  SharedDtor();
}

void RouteMsg::SharedDtor() {
  if (this != default_instance_) {
    delete req_token_;
    delete req_token_rsp_;
    delete connect_;
    delete connect_rsp_;
  }
}

void RouteMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteMsg_descriptor_;
}

const RouteMsg& RouteMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

RouteMsg* RouteMsg::default_instance_ = NULL;

RouteMsg* RouteMsg::New() const {
  return new RouteMsg;
}

void RouteMsg::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    version_ = 0;
    type_ = 1;
    sequence_ = 0;
    if (has_req_token()) {
      if (req_token_ != NULL) req_token_->::com::letsmidi::monsys::protocol::route::ReqToken::Clear();
    }
    if (has_req_token_rsp()) {
      if (req_token_rsp_ != NULL) req_token_rsp_->::com::letsmidi::monsys::protocol::route::ReqTokenRsp::Clear();
    }
    if (has_connect()) {
      if (connect_ != NULL) connect_->::com::letsmidi::monsys::protocol::route::Connect::Clear();
    }
    if (has_connect_rsp()) {
      if (connect_rsp_ != NULL) connect_rsp_->::com::letsmidi::monsys::protocol::route::ConnectRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.route.RouteMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .com.letsmidi.monsys.protocol.route.MsgType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::route::MsgType_IsValid(value)) {
            set_type(static_cast< ::com::letsmidi::monsys::protocol::route::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // required int32 sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_req_token;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;
      case 10: {
        if (tag == 82) {
         parse_req_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_req_token_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;
      case 11: {
        if (tag == 90) {
         parse_req_token_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_token_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_connect;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;
      case 12: {
        if (tag == 98) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_connect_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;
      case 13: {
        if (tag == 106) {
         parse_connect_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.route.RouteMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.route.RouteMsg)
  return false;
#undef DO_
}

void RouteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.route.RouteMsg)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required .com.letsmidi.monsys.protocol.route.MsgType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sequence(), output);
  }

  // optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;
  if (has_req_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->req_token(), output);
  }

  // optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;
  if (has_req_token_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->req_token_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->connect(), output);
  }

  // optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;
  if (has_connect_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->connect_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.route.RouteMsg)
}

::google::protobuf::uint8* RouteMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.route.RouteMsg)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required .com.letsmidi.monsys.protocol.route.MsgType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sequence(), target);
  }

  // optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;
  if (has_req_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->req_token(), target);
  }

  // optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;
  if (has_req_token_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->req_token_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->connect(), target);
  }

  // optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;
  if (has_connect_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->connect_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.route.RouteMsg)
  return target;
}

int RouteMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required .com.letsmidi.monsys.protocol.route.MsgType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;
    if (has_req_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req_token());
    }

    // optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;
    if (has_req_token_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req_token_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect());
    }

    // optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;
    if (has_connect_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteMsg::MergeFrom(const RouteMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_req_token()) {
      mutable_req_token()->::com::letsmidi::monsys::protocol::route::ReqToken::MergeFrom(from.req_token());
    }
    if (from.has_req_token_rsp()) {
      mutable_req_token_rsp()->::com::letsmidi::monsys::protocol::route::ReqTokenRsp::MergeFrom(from.req_token_rsp());
    }
    if (from.has_connect()) {
      mutable_connect()->::com::letsmidi::monsys::protocol::route::Connect::MergeFrom(from.connect());
    }
    if (from.has_connect_rsp()) {
      mutable_connect_rsp()->::com::letsmidi::monsys::protocol::route::ConnectRsp::MergeFrom(from.connect_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteMsg::CopyFrom(const RouteMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_req_token()) {
    if (!this->req_token().IsInitialized()) return false;
  }
  if (has_req_token_rsp()) {
    if (!this->req_token_rsp().IsInitialized()) return false;
  }
  if (has_connect()) {
    if (!this->connect().IsInitialized()) return false;
  }
  if (has_connect_rsp()) {
    if (!this->connect_rsp().IsInitialized()) return false;
  }
  return true;
}

void RouteMsg::Swap(RouteMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(sequence_, other->sequence_);
    std::swap(req_token_, other->req_token_);
    std::swap(req_token_rsp_, other->req_token_rsp_);
    std::swap(connect_, other->connect_);
    std::swap(connect_rsp_, other->connect_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteMsg_descriptor_;
  metadata.reflection = RouteMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqToken::kTokenFieldNumber;
const int ReqToken::kAddrTypeFieldNumber;
const int ReqToken::kClientIpV4FieldNumber;
const int ReqToken::kFgwIpV4FieldNumber;
#endif  // !_MSC_VER

ReqToken::ReqToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.route.ReqToken)
}

void ReqToken::InitAsDefaultInstance() {
}

ReqToken::ReqToken(const ReqToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.route.ReqToken)
}

void ReqToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_type_ = 1;
  client_ip_v4_ = 0;
  fgw_ip_v4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqToken::~ReqToken() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.route.ReqToken)
  SharedDtor();
}

void ReqToken::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqToken_descriptor_;
}

const ReqToken& ReqToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

ReqToken* ReqToken::default_instance_ = NULL;

ReqToken* ReqToken::New() const {
  return new ReqToken;
}

void ReqToken::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqToken*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(client_ip_v4_, fgw_ip_v4_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    addr_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.route.ReqToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addr_type;
        break;
      }

      // required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;
      case 2: {
        if (tag == 16) {
         parse_addr_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::route::AddrType_IsValid(value)) {
            set_addr_type(static_cast< ::com::letsmidi::monsys::protocol::route::AddrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_client_ip_v4;
        break;
      }

      // optional int32 client_ip_v4 = 3;
      case 3: {
        if (tag == 24) {
         parse_client_ip_v4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_ip_v4_)));
          set_has_client_ip_v4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fgw_ip_v4;
        break;
      }

      // optional int32 fgw_ip_v4 = 4;
      case 4: {
        if (tag == 32) {
         parse_fgw_ip_v4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fgw_ip_v4_)));
          set_has_fgw_ip_v4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.route.ReqToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.route.ReqToken)
  return false;
#undef DO_
}

void ReqToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.route.ReqToken)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;
  if (has_addr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->addr_type(), output);
  }

  // optional int32 client_ip_v4 = 3;
  if (has_client_ip_v4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_ip_v4(), output);
  }

  // optional int32 fgw_ip_v4 = 4;
  if (has_fgw_ip_v4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fgw_ip_v4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.route.ReqToken)
}

::google::protobuf::uint8* ReqToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.route.ReqToken)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;
  if (has_addr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->addr_type(), target);
  }

  // optional int32 client_ip_v4 = 3;
  if (has_client_ip_v4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_ip_v4(), target);
  }

  // optional int32 fgw_ip_v4 = 4;
  if (has_fgw_ip_v4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fgw_ip_v4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.route.ReqToken)
  return target;
}

int ReqToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;
    if (has_addr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->addr_type());
    }

    // optional int32 client_ip_v4 = 3;
    if (has_client_ip_v4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_ip_v4());
    }

    // optional int32 fgw_ip_v4 = 4;
    if (has_fgw_ip_v4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fgw_ip_v4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqToken::MergeFrom(const ReqToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_addr_type()) {
      set_addr_type(from.addr_type());
    }
    if (from.has_client_ip_v4()) {
      set_client_ip_v4(from.client_ip_v4());
    }
    if (from.has_fgw_ip_v4()) {
      set_fgw_ip_v4(from.fgw_ip_v4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqToken::CopyFrom(const ReqToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqToken::Swap(ReqToken* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(addr_type_, other->addr_type_);
    std::swap(client_ip_v4_, other->client_ip_v4_);
    std::swap(fgw_ip_v4_, other->fgw_ip_v4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqToken_descriptor_;
  metadata.reflection = ReqToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTokenRsp::kCodeFieldNumber;
const int ReqTokenRsp::kPortForClientFieldNumber;
const int ReqTokenRsp::kPortForFgwFieldNumber;
#endif  // !_MSC_VER

ReqTokenRsp::ReqTokenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
}

void ReqTokenRsp::InitAsDefaultInstance() {
}

ReqTokenRsp::ReqTokenRsp(const ReqTokenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
}

void ReqTokenRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  port_for_client_ = 0;
  port_for_fgw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTokenRsp::~ReqTokenRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  SharedDtor();
}

void ReqTokenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTokenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTokenRsp_descriptor_;
}

const ReqTokenRsp& ReqTokenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

ReqTokenRsp* ReqTokenRsp::default_instance_ = NULL;

ReqTokenRsp* ReqTokenRsp::New() const {
  return new ReqTokenRsp;
}

void ReqTokenRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqTokenRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(code_, port_for_fgw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port_for_client;
        break;
      }

      // required int32 port_for_client = 2;
      case 2: {
        if (tag == 16) {
         parse_port_for_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_for_client_)));
          set_has_port_for_client();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port_for_fgw;
        break;
      }

      // required int32 port_for_fgw = 3;
      case 3: {
        if (tag == 24) {
         parse_port_for_fgw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_for_fgw_)));
          set_has_port_for_fgw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  return false;
#undef DO_
}

void ReqTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required int32 port_for_client = 2;
  if (has_port_for_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port_for_client(), output);
  }

  // required int32 port_for_fgw = 3;
  if (has_port_for_fgw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port_for_fgw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
}

::google::protobuf::uint8* ReqTokenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required int32 port_for_client = 2;
  if (has_port_for_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port_for_client(), target);
  }

  // required int32 port_for_fgw = 3;
  if (has_port_for_fgw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port_for_fgw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  return target;
}

int ReqTokenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required int32 port_for_client = 2;
    if (has_port_for_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_for_client());
    }

    // required int32 port_for_fgw = 3;
    if (has_port_for_fgw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_for_fgw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTokenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTokenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTokenRsp::MergeFrom(const ReqTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_port_for_client()) {
      set_port_for_client(from.port_for_client());
    }
    if (from.has_port_for_fgw()) {
      set_port_for_fgw(from.port_for_fgw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTokenRsp::CopyFrom(const ReqTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqTokenRsp::Swap(ReqTokenRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(port_for_client_, other->port_for_client_);
    std::swap(port_for_fgw_, other->port_for_fgw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTokenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTokenRsp_descriptor_;
  metadata.reflection = ReqTokenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Connect::kClientTypeFieldNumber;
const int Connect::kTokenFieldNumber;
#endif  // !_MSC_VER

Connect::Connect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.route.Connect)
}

void Connect::InitAsDefaultInstance() {
}

Connect::Connect(const Connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.route.Connect)
}

void Connect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_type_ = 1;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.route.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connect_descriptor_;
}

const Connect& Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Connect* Connect::default_instance_ = NULL;

Connect* Connect::New() const {
  return new Connect;
}

void Connect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    client_type_ = 1;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.route.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::route::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::com::letsmidi::monsys::protocol::route::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.route.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.route.Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.route.Connect)
  // required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->client_type(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.route.Connect)
}

::google::protobuf::uint8* Connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.route.Connect)
  // required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->client_type(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.route.Connect)
  return target;
}

int Connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Connect::Swap(Connect* other) {
  if (other != this) {
    std::swap(client_type_, other->client_type_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connect_descriptor_;
  metadata.reflection = Connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

ConnectRsp::ConnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.route.ConnectRsp)
}

void ConnectRsp::InitAsDefaultInstance() {
}

ConnectRsp::ConnectRsp(const ConnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.route.ConnectRsp)
}

void ConnectRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRsp::~ConnectRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.route.ConnectRsp)
  SharedDtor();
}

void ConnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRsp_descriptor_;
}

const ConnectRsp& ConnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

ConnectRsp* ConnectRsp::default_instance_ = NULL;

ConnectRsp* ConnectRsp::New() const {
  return new ConnectRsp;
}

void ConnectRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.route.ConnectRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.route.ConnectRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.route.ConnectRsp)
  return false;
#undef DO_
}

void ConnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.route.ConnectRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.route.ConnectRsp)
}

::google::protobuf::uint8* ConnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.route.ConnectRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.route.ConnectRsp)
  return target;
}

int ConnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRsp::MergeFrom(const ConnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRsp::CopyFrom(const ConnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectRsp::Swap(ConnectRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRsp_descriptor_;
  metadata.reflection = ConnectRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace route
}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

// @@protoc_insertion_point(global_scope)
