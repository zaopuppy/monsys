// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "push.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {
namespace push {

namespace {

const ::google::protobuf::Descriptor* IdValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* FGatewayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FGatewayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bind_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFgwList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFgwList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFgwListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFgwListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDevList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDevList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDevListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDevListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDevInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDevInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDevInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDevInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDevInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDevInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDevInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDevInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRegisterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_push_2eproto() {
  protobuf_AddDesc_push_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "push.proto");
  GOOGLE_CHECK(file != NULL);
  IdValuePair_descriptor_ = file->message_type(0);
  static const int IdValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdValuePair, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdValuePair, value_),
  };
  IdValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdValuePair_descriptor_,
      IdValuePair::default_instance_,
      IdValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdValuePair));
  FGatewayInfo_descriptor_ = file->message_type(1);
  static const int FGatewayInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FGatewayInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FGatewayInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FGatewayInfo, desc_),
  };
  FGatewayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FGatewayInfo_descriptor_,
      FGatewayInfo::default_instance_,
      FGatewayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FGatewayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FGatewayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FGatewayInfo));
  DeviceInfo_descriptor_ = file->message_type(2);
  static const int DeviceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, name_),
  };
  DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::default_instance_,
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfo));
  PushMsg_descriptor_ = file->message_type(3);
  static const int PushMsg_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, login_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, bind_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, connect_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, get_fgw_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, get_fgw_list_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, get_dev_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, get_dev_list_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, get_dev_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, get_dev_info_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, set_dev_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, set_dev_info_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, client_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, client_login_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, user_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, user_register_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, heartbeat_),
  };
  PushMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMsg_descriptor_,
      PushMsg::default_instance_,
      PushMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMsg));
  Login_descriptor_ = file->message_type(4);
  static const int Login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, device_id_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LoginRsp_descriptor_ = file->message_type(5);
  static const int LoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, code_),
  };
  LoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRsp_descriptor_,
      LoginRsp::default_instance_,
      LoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRsp));
  ClientLogin_descriptor_ = file->message_type(6);
  static const int ClientLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogin, password_),
  };
  ClientLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLogin_descriptor_,
      ClientLogin::default_instance_,
      ClientLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLogin));
  ClientLoginRsp_descriptor_ = file->message_type(7);
  static const int ClientLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, fgw_infos_),
  };
  ClientLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginRsp_descriptor_,
      ClientLoginRsp::default_instance_,
      ClientLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginRsp));
  Bind_descriptor_ = file->message_type(8);
  static const int Bind_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bind, device_id_),
  };
  Bind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bind_descriptor_,
      Bind::default_instance_,
      Bind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bind));
  BindRsp_descriptor_ = file->message_type(9);
  static const int BindRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRsp, code_),
  };
  BindRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindRsp_descriptor_,
      BindRsp::default_instance_,
      BindRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindRsp));
  Connect_descriptor_ = file->message_type(10);
  static const int Connect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, device_id_),
  };
  Connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Connect_descriptor_,
      Connect::default_instance_,
      Connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Connect));
  ConnectRsp_descriptor_ = file->message_type(11);
  static const int ConnectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, code_),
  };
  ConnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRsp_descriptor_,
      ConnectRsp::default_instance_,
      ConnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRsp));
  GetFgwList_descriptor_ = file->message_type(12);
  static const int GetFgwList_offsets_[1] = {
  };
  GetFgwList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFgwList_descriptor_,
      GetFgwList::default_instance_,
      GetFgwList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFgwList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFgwList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFgwList));
  GetFgwListRsp_descriptor_ = file->message_type(13);
  static const int GetFgwListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFgwListRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFgwListRsp, fgw_infos_),
  };
  GetFgwListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFgwListRsp_descriptor_,
      GetFgwListRsp::default_instance_,
      GetFgwListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFgwListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFgwListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFgwListRsp));
  GetDevList_descriptor_ = file->message_type(14);
  static const int GetDevList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevList, device_id_),
  };
  GetDevList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDevList_descriptor_,
      GetDevList::default_instance_,
      GetDevList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDevList));
  GetDevListRsp_descriptor_ = file->message_type(15);
  static const int GetDevListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevListRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevListRsp, dev_infos_),
  };
  GetDevListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDevListRsp_descriptor_,
      GetDevListRsp::default_instance_,
      GetDevListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDevListRsp));
  GetDevInfo_descriptor_ = file->message_type(16);
  static const int GetDevInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfo, item_ids_),
  };
  GetDevInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDevInfo_descriptor_,
      GetDevInfo::default_instance_,
      GetDevInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDevInfo));
  GetDevInfoRsp_descriptor_ = file->message_type(17);
  static const int GetDevInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfoRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfoRsp, id_value_pairs_),
  };
  GetDevInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDevInfoRsp_descriptor_,
      GetDevInfoRsp::default_instance_,
      GetDevInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDevInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDevInfoRsp));
  SetDevInfo_descriptor_ = file->message_type(18);
  static const int SetDevInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDevInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDevInfo, id_value_pairs_),
  };
  SetDevInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDevInfo_descriptor_,
      SetDevInfo::default_instance_,
      SetDevInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDevInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDevInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDevInfo));
  SetDevInfoRsp_descriptor_ = file->message_type(19);
  static const int SetDevInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDevInfoRsp, code_),
  };
  SetDevInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDevInfoRsp_descriptor_,
      SetDevInfoRsp::default_instance_,
      SetDevInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDevInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDevInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDevInfoRsp));
  UserRegister_descriptor_ = file->message_type(20);
  static const int UserRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegister, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegister, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegister, password_),
  };
  UserRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRegister_descriptor_,
      UserRegister::default_instance_,
      UserRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRegister));
  UserRegisterRsp_descriptor_ = file->message_type(21);
  static const int UserRegisterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegisterRsp, code_),
  };
  UserRegisterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRegisterRsp_descriptor_,
      UserRegisterRsp::default_instance_,
      UserRegisterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegisterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRegisterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRegisterRsp));
  Heartbeat_descriptor_ = file->message_type(22);
  static const int Heartbeat_offsets_[1] = {
  };
  Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::default_instance_,
      Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heartbeat));
  Response_descriptor_ = file->message_type(23);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, code_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_push_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdValuePair_descriptor_, &IdValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FGatewayInfo_descriptor_, &FGatewayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfo_descriptor_, &DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMsg_descriptor_, &PushMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRsp_descriptor_, &LoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLogin_descriptor_, &ClientLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginRsp_descriptor_, &ClientLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bind_descriptor_, &Bind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindRsp_descriptor_, &BindRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Connect_descriptor_, &Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRsp_descriptor_, &ConnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFgwList_descriptor_, &GetFgwList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFgwListRsp_descriptor_, &GetFgwListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDevList_descriptor_, &GetDevList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDevListRsp_descriptor_, &GetDevListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDevInfo_descriptor_, &GetDevInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDevInfoRsp_descriptor_, &GetDevInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDevInfo_descriptor_, &SetDevInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDevInfoRsp_descriptor_, &SetDevInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRegister_descriptor_, &UserRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRegisterRsp_descriptor_, &UserRegisterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heartbeat_descriptor_, &Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_push_2eproto() {
  delete IdValuePair::default_instance_;
  delete IdValuePair_reflection_;
  delete FGatewayInfo::default_instance_;
  delete FGatewayInfo_reflection_;
  delete DeviceInfo::default_instance_;
  delete DeviceInfo_reflection_;
  delete PushMsg::default_instance_;
  delete PushMsg_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LoginRsp::default_instance_;
  delete LoginRsp_reflection_;
  delete ClientLogin::default_instance_;
  delete ClientLogin_reflection_;
  delete ClientLoginRsp::default_instance_;
  delete ClientLoginRsp_reflection_;
  delete Bind::default_instance_;
  delete Bind_reflection_;
  delete BindRsp::default_instance_;
  delete BindRsp_reflection_;
  delete Connect::default_instance_;
  delete Connect_reflection_;
  delete ConnectRsp::default_instance_;
  delete ConnectRsp_reflection_;
  delete GetFgwList::default_instance_;
  delete GetFgwList_reflection_;
  delete GetFgwListRsp::default_instance_;
  delete GetFgwListRsp_reflection_;
  delete GetDevList::default_instance_;
  delete GetDevList_reflection_;
  delete GetDevListRsp::default_instance_;
  delete GetDevListRsp_reflection_;
  delete GetDevInfo::default_instance_;
  delete GetDevInfo_reflection_;
  delete GetDevInfoRsp::default_instance_;
  delete GetDevInfoRsp_reflection_;
  delete SetDevInfo::default_instance_;
  delete SetDevInfo_reflection_;
  delete SetDevInfoRsp::default_instance_;
  delete SetDevInfoRsp_reflection_;
  delete UserRegister::default_instance_;
  delete UserRegister_reflection_;
  delete UserRegisterRsp::default_instance_;
  delete UserRegisterRsp_reflection_;
  delete Heartbeat::default_instance_;
  delete Heartbeat_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_push_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npush.proto\022!com.letsmidi.monsys.protoc"
    "ol.push\"(\n\013IdValuePair\022\n\n\002id\030\001 \002(\005\022\r\n\005va"
    "lue\030\002 \002(\005\"6\n\014FGatewayInfo\022\n\n\002id\030\001 \002(\t\022\014\n"
    "\004name\030\002 \002(\t\022\014\n\004desc\030\003 \002(\t\"6\n\nDeviceInfo\022"
    "\014\n\004addr\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004name\030\003 \002("
    "\t\"\204\013\n\007PushMsg\022\017\n\007version\030\001 \002(\005\0228\n\004type\030\002"
    " \002(\0162*.com.letsmidi.monsys.protocol.push"
    ".MsgType\022\020\n\010sequence\030\003 \002(\005\0227\n\005login\030\n \001("
    "\0132(.com.letsmidi.monsys.protocol.push.Lo"
    "gin\022>\n\tlogin_rsp\030\013 \001(\0132+.com.letsmidi.mo"
    "nsys.protocol.push.LoginRsp\0225\n\004bind\030\014 \001("
    "\0132\'.com.letsmidi.monsys.protocol.push.Bi"
    "nd\022<\n\010bind_rsp\030\r \001(\0132*.com.letsmidi.mons"
    "ys.protocol.push.BindRsp\022;\n\007connect\030\016 \001("
    "\0132*.com.letsmidi.monsys.protocol.push.Co"
    "nnect\022B\n\013connect_rsp\030\017 \001(\0132-.com.letsmid"
    "i.monsys.protocol.push.ConnectRsp\022C\n\014get"
    "_fgw_list\030\020 \001(\0132-.com.letsmidi.monsys.pr"
    "otocol.push.GetFgwList\022J\n\020get_fgw_list_r"
    "sp\030\021 \001(\01320.com.letsmidi.monsys.protocol."
    "push.GetFgwListRsp\022C\n\014get_dev_list\030\022 \001(\013"
    "2-.com.letsmidi.monsys.protocol.push.Get"
    "DevList\022J\n\020get_dev_list_rsp\030\023 \001(\01320.com."
    "letsmidi.monsys.protocol.push.GetDevList"
    "Rsp\022C\n\014get_dev_info\030\024 \001(\0132-.com.letsmidi"
    ".monsys.protocol.push.GetDevInfo\022J\n\020get_"
    "dev_info_rsp\030\025 \001(\01320.com.letsmidi.monsys"
    ".protocol.push.GetDevInfoRsp\022C\n\014set_dev_"
    "info\030\026 \001(\0132-.com.letsmidi.monsys.protoco"
    "l.push.SetDevInfo\022J\n\020set_dev_info_rsp\030\027 "
    "\001(\01320.com.letsmidi.monsys.protocol.push."
    "SetDevInfoRsp\022D\n\014client_login\030\030 \001(\0132..co"
    "m.letsmidi.monsys.protocol.push.ClientLo"
    "gin\022K\n\020client_login_rsp\030\031 \001(\01321.com.lets"
    "midi.monsys.protocol.push.ClientLoginRsp"
    "\022F\n\ruser_register\030\032 \001(\0132/.com.letsmidi.m"
    "onsys.protocol.push.UserRegister\022M\n\021user"
    "_register_rsp\030\033 \001(\01322.com.letsmidi.monsy"
    "s.protocol.push.UserRegisterRsp\022\?\n\theart"
    "beat\030\034 \001(\0132,.com.letsmidi.monsys.protoco"
    "l.push.Heartbeat\"\032\n\005Login\022\021\n\tdevice_id\030\001"
    " \002(\t\"\030\n\010LoginRsp\022\014\n\004code\030\001 \002(\005\"0\n\013Client"
    "Login\022\017\n\007account\030\001 \002(\t\022\020\n\010password\030\002 \002(\t"
    "\"b\n\016ClientLoginRsp\022\014\n\004code\030\001 \002(\005\022B\n\tfgw_"
    "infos\030\002 \003(\0132/.com.letsmidi.monsys.protoc"
    "ol.push.FGatewayInfo\"\031\n\004Bind\022\021\n\tdevice_i"
    "d\030\001 \002(\t\"\027\n\007BindRsp\022\014\n\004code\030\001 \002(\005\"\034\n\007Conn"
    "ect\022\021\n\tdevice_id\030\001 \002(\t\"\032\n\nConnectRsp\022\014\n\004"
    "code\030\001 \002(\005\"\014\n\nGetFgwList\"a\n\rGetFgwListRs"
    "p\022\014\n\004code\030\001 \002(\005\022B\n\tfgw_infos\030\002 \003(\0132/.com"
    ".letsmidi.monsys.protocol.push.FGatewayI"
    "nfo\"\037\n\nGetDevList\022\021\n\tdevice_id\030\001 \002(\t\"_\n\r"
    "GetDevListRsp\022\014\n\004code\030\001 \002(\005\022@\n\tdev_infos"
    "\030\002 \003(\0132-.com.letsmidi.monsys.protocol.pu"
    "sh.DeviceInfo\"0\n\nGetDevInfo\022\014\n\004addr\030\001 \002("
    "\005\022\024\n\010item_ids\030\002 \003(\005B\002\020\001\"e\n\rGetDevInfoRsp"
    "\022\014\n\004code\030\001 \002(\005\022F\n\016id_value_pairs\030\002 \003(\0132."
    ".com.letsmidi.monsys.protocol.push.IdVal"
    "uePair\"b\n\nSetDevInfo\022\014\n\004addr\030\001 \002(\005\022F\n\016id"
    "_value_pairs\030\002 \003(\0132..com.letsmidi.monsys"
    ".protocol.push.IdValuePair\"\035\n\rSetDevInfo"
    "Rsp\022\014\n\004code\030\001 \002(\005\"C\n\014UserRegister\022\020\n\010nic"
    "kname\030\001 \002(\t\022\017\n\007account\030\002 \002(\t\022\020\n\010password"
    "\030\003 \002(\t\"\037\n\017UserRegisterRsp\022\014\n\004code\030\001 \002(\005\""
    "\013\n\tHeartbeat\"\030\n\010Response\022\014\n\004code\030\001 \002(\005*\350"
    "\002\n\007MsgType\022\t\n\005LOGIN\020\001\022\r\n\tLOGIN_RSP\020e\022\010\n\004"
    "BIND\020\002\022\014\n\010BIND_RSP\020f\022\013\n\007CONNECT\020\003\022\017\n\013CON"
    "NECT_RSP\020g\022\020\n\014GET_FGW_LIST\020\004\022\024\n\020GET_FGW_"
    "LIST_RSP\020h\022\020\n\014GET_DEV_LIST\020\005\022\024\n\020GET_DEV_"
    "LIST_RSP\020i\022\020\n\014GET_DEV_INFO\020\006\022\024\n\020GET_DEV_"
    "INFO_RSP\020j\022\020\n\014SET_DEV_INFO\020\007\022\024\n\020SET_DEV_"
    "INFO_RSP\020k\022\020\n\014CLIENT_LOGIN\020\010\022\024\n\020CLIENT_L"
    "OGIN_RSP\020l\022\021\n\rUSER_REGISTER\020\t\022\025\n\021USER_RE"
    "GISTER_RSP\020m\022\r\n\tHEARTBEAT\020\n\022\014\n\010RESPONSE\020"
    "c", 2961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "push.proto", &protobuf_RegisterTypes);
  IdValuePair::default_instance_ = new IdValuePair();
  FGatewayInfo::default_instance_ = new FGatewayInfo();
  DeviceInfo::default_instance_ = new DeviceInfo();
  PushMsg::default_instance_ = new PushMsg();
  Login::default_instance_ = new Login();
  LoginRsp::default_instance_ = new LoginRsp();
  ClientLogin::default_instance_ = new ClientLogin();
  ClientLoginRsp::default_instance_ = new ClientLoginRsp();
  Bind::default_instance_ = new Bind();
  BindRsp::default_instance_ = new BindRsp();
  Connect::default_instance_ = new Connect();
  ConnectRsp::default_instance_ = new ConnectRsp();
  GetFgwList::default_instance_ = new GetFgwList();
  GetFgwListRsp::default_instance_ = new GetFgwListRsp();
  GetDevList::default_instance_ = new GetDevList();
  GetDevListRsp::default_instance_ = new GetDevListRsp();
  GetDevInfo::default_instance_ = new GetDevInfo();
  GetDevInfoRsp::default_instance_ = new GetDevInfoRsp();
  SetDevInfo::default_instance_ = new SetDevInfo();
  SetDevInfoRsp::default_instance_ = new SetDevInfoRsp();
  UserRegister::default_instance_ = new UserRegister();
  UserRegisterRsp::default_instance_ = new UserRegisterRsp();
  Heartbeat::default_instance_ = new Heartbeat();
  Response::default_instance_ = new Response();
  IdValuePair::default_instance_->InitAsDefaultInstance();
  FGatewayInfo::default_instance_->InitAsDefaultInstance();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  PushMsg::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  ClientLogin::default_instance_->InitAsDefaultInstance();
  ClientLoginRsp::default_instance_->InitAsDefaultInstance();
  Bind::default_instance_->InitAsDefaultInstance();
  BindRsp::default_instance_->InitAsDefaultInstance();
  Connect::default_instance_->InitAsDefaultInstance();
  ConnectRsp::default_instance_->InitAsDefaultInstance();
  GetFgwList::default_instance_->InitAsDefaultInstance();
  GetFgwListRsp::default_instance_->InitAsDefaultInstance();
  GetDevList::default_instance_->InitAsDefaultInstance();
  GetDevListRsp::default_instance_->InitAsDefaultInstance();
  GetDevInfo::default_instance_->InitAsDefaultInstance();
  GetDevInfoRsp::default_instance_->InitAsDefaultInstance();
  SetDevInfo::default_instance_->InitAsDefaultInstance();
  SetDevInfoRsp::default_instance_->InitAsDefaultInstance();
  UserRegister::default_instance_->InitAsDefaultInstance();
  UserRegisterRsp::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_push_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_push_2eproto {
  StaticDescriptorInitializer_push_2eproto() {
    protobuf_AddDesc_push_2eproto();
  }
} static_descriptor_initializer_push_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 99:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IdValuePair::kIdFieldNumber;
const int IdValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

IdValuePair::IdValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.IdValuePair)
}

void IdValuePair::InitAsDefaultInstance() {
}

IdValuePair::IdValuePair(const IdValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.IdValuePair)
}

void IdValuePair::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdValuePair::~IdValuePair() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.IdValuePair)
  SharedDtor();
}

void IdValuePair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdValuePair_descriptor_;
}

const IdValuePair& IdValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

IdValuePair* IdValuePair::default_instance_ = NULL;

IdValuePair* IdValuePair::New() const {
  return new IdValuePair;
}

void IdValuePair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IdValuePair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.IdValuePair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.IdValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.IdValuePair)
  return false;
#undef DO_
}

void IdValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.IdValuePair)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.IdValuePair)
}

::google::protobuf::uint8* IdValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.IdValuePair)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.IdValuePair)
  return target;
}

int IdValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdValuePair::MergeFrom(const IdValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdValuePair::CopyFrom(const IdValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdValuePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IdValuePair::Swap(IdValuePair* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdValuePair_descriptor_;
  metadata.reflection = IdValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FGatewayInfo::kIdFieldNumber;
const int FGatewayInfo::kNameFieldNumber;
const int FGatewayInfo::kDescFieldNumber;
#endif  // !_MSC_VER

FGatewayInfo::FGatewayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.FGatewayInfo)
}

void FGatewayInfo::InitAsDefaultInstance() {
}

FGatewayInfo::FGatewayInfo(const FGatewayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.FGatewayInfo)
}

void FGatewayInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FGatewayInfo::~FGatewayInfo() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.FGatewayInfo)
  SharedDtor();
}

void FGatewayInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void FGatewayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FGatewayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FGatewayInfo_descriptor_;
}

const FGatewayInfo& FGatewayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

FGatewayInfo* FGatewayInfo::default_instance_ = NULL;

FGatewayInfo* FGatewayInfo::New() const {
  return new FGatewayInfo;
}

void FGatewayInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FGatewayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.FGatewayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.FGatewayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.FGatewayInfo)
  return false;
#undef DO_
}

void FGatewayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.FGatewayInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.FGatewayInfo)
}

::google::protobuf::uint8* FGatewayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.FGatewayInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.FGatewayInfo)
  return target;
}

int FGatewayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FGatewayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FGatewayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FGatewayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FGatewayInfo::MergeFrom(const FGatewayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FGatewayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FGatewayInfo::CopyFrom(const FGatewayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FGatewayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FGatewayInfo::Swap(FGatewayInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FGatewayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FGatewayInfo_descriptor_;
  metadata.reflection = FGatewayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfo::kAddrFieldNumber;
const int DeviceInfo::kTypeFieldNumber;
const int DeviceInfo::kNameFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(addr_, type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.DeviceInfo)
  // required int32 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.DeviceInfo)
  // required int32 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.DeviceInfo)
  return target;
}

int DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushMsg::kVersionFieldNumber;
const int PushMsg::kTypeFieldNumber;
const int PushMsg::kSequenceFieldNumber;
const int PushMsg::kLoginFieldNumber;
const int PushMsg::kLoginRspFieldNumber;
const int PushMsg::kBindFieldNumber;
const int PushMsg::kBindRspFieldNumber;
const int PushMsg::kConnectFieldNumber;
const int PushMsg::kConnectRspFieldNumber;
const int PushMsg::kGetFgwListFieldNumber;
const int PushMsg::kGetFgwListRspFieldNumber;
const int PushMsg::kGetDevListFieldNumber;
const int PushMsg::kGetDevListRspFieldNumber;
const int PushMsg::kGetDevInfoFieldNumber;
const int PushMsg::kGetDevInfoRspFieldNumber;
const int PushMsg::kSetDevInfoFieldNumber;
const int PushMsg::kSetDevInfoRspFieldNumber;
const int PushMsg::kClientLoginFieldNumber;
const int PushMsg::kClientLoginRspFieldNumber;
const int PushMsg::kUserRegisterFieldNumber;
const int PushMsg::kUserRegisterRspFieldNumber;
const int PushMsg::kHeartbeatFieldNumber;
#endif  // !_MSC_VER

PushMsg::PushMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.PushMsg)
}

void PushMsg::InitAsDefaultInstance() {
  login_ = const_cast< ::com::letsmidi::monsys::protocol::push::Login*>(&::com::letsmidi::monsys::protocol::push::Login::default_instance());
  login_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::LoginRsp*>(&::com::letsmidi::monsys::protocol::push::LoginRsp::default_instance());
  bind_ = const_cast< ::com::letsmidi::monsys::protocol::push::Bind*>(&::com::letsmidi::monsys::protocol::push::Bind::default_instance());
  bind_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::BindRsp*>(&::com::letsmidi::monsys::protocol::push::BindRsp::default_instance());
  connect_ = const_cast< ::com::letsmidi::monsys::protocol::push::Connect*>(&::com::letsmidi::monsys::protocol::push::Connect::default_instance());
  connect_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::ConnectRsp*>(&::com::letsmidi::monsys::protocol::push::ConnectRsp::default_instance());
  get_fgw_list_ = const_cast< ::com::letsmidi::monsys::protocol::push::GetFgwList*>(&::com::letsmidi::monsys::protocol::push::GetFgwList::default_instance());
  get_fgw_list_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::GetFgwListRsp*>(&::com::letsmidi::monsys::protocol::push::GetFgwListRsp::default_instance());
  get_dev_list_ = const_cast< ::com::letsmidi::monsys::protocol::push::GetDevList*>(&::com::letsmidi::monsys::protocol::push::GetDevList::default_instance());
  get_dev_list_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::GetDevListRsp*>(&::com::letsmidi::monsys::protocol::push::GetDevListRsp::default_instance());
  get_dev_info_ = const_cast< ::com::letsmidi::monsys::protocol::push::GetDevInfo*>(&::com::letsmidi::monsys::protocol::push::GetDevInfo::default_instance());
  get_dev_info_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp*>(&::com::letsmidi::monsys::protocol::push::GetDevInfoRsp::default_instance());
  set_dev_info_ = const_cast< ::com::letsmidi::monsys::protocol::push::SetDevInfo*>(&::com::letsmidi::monsys::protocol::push::SetDevInfo::default_instance());
  set_dev_info_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp*>(&::com::letsmidi::monsys::protocol::push::SetDevInfoRsp::default_instance());
  client_login_ = const_cast< ::com::letsmidi::monsys::protocol::push::ClientLogin*>(&::com::letsmidi::monsys::protocol::push::ClientLogin::default_instance());
  client_login_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::ClientLoginRsp*>(&::com::letsmidi::monsys::protocol::push::ClientLoginRsp::default_instance());
  user_register_ = const_cast< ::com::letsmidi::monsys::protocol::push::UserRegister*>(&::com::letsmidi::monsys::protocol::push::UserRegister::default_instance());
  user_register_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::push::UserRegisterRsp*>(&::com::letsmidi::monsys::protocol::push::UserRegisterRsp::default_instance());
  heartbeat_ = const_cast< ::com::letsmidi::monsys::protocol::push::Heartbeat*>(&::com::letsmidi::monsys::protocol::push::Heartbeat::default_instance());
}

PushMsg::PushMsg(const PushMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.PushMsg)
}

void PushMsg::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 1;
  sequence_ = 0;
  login_ = NULL;
  login_rsp_ = NULL;
  bind_ = NULL;
  bind_rsp_ = NULL;
  connect_ = NULL;
  connect_rsp_ = NULL;
  get_fgw_list_ = NULL;
  get_fgw_list_rsp_ = NULL;
  get_dev_list_ = NULL;
  get_dev_list_rsp_ = NULL;
  get_dev_info_ = NULL;
  get_dev_info_rsp_ = NULL;
  set_dev_info_ = NULL;
  set_dev_info_rsp_ = NULL;
  client_login_ = NULL;
  client_login_rsp_ = NULL;
  user_register_ = NULL;
  user_register_rsp_ = NULL;
  heartbeat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMsg::~PushMsg() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.PushMsg)
  SharedDtor();
}

void PushMsg::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete login_rsp_;
    delete bind_;
    delete bind_rsp_;
    delete connect_;
    delete connect_rsp_;
    delete get_fgw_list_;
    delete get_fgw_list_rsp_;
    delete get_dev_list_;
    delete get_dev_list_rsp_;
    delete get_dev_info_;
    delete get_dev_info_rsp_;
    delete set_dev_info_;
    delete set_dev_info_rsp_;
    delete client_login_;
    delete client_login_rsp_;
    delete user_register_;
    delete user_register_rsp_;
    delete heartbeat_;
  }
}

void PushMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMsg_descriptor_;
}

const PushMsg& PushMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

PushMsg* PushMsg::default_instance_ = NULL;

PushMsg* PushMsg::New() const {
  return new PushMsg;
}

void PushMsg::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    version_ = 0;
    type_ = 1;
    sequence_ = 0;
    if (has_login()) {
      if (login_ != NULL) login_->::com::letsmidi::monsys::protocol::push::Login::Clear();
    }
    if (has_login_rsp()) {
      if (login_rsp_ != NULL) login_rsp_->::com::letsmidi::monsys::protocol::push::LoginRsp::Clear();
    }
    if (has_bind()) {
      if (bind_ != NULL) bind_->::com::letsmidi::monsys::protocol::push::Bind::Clear();
    }
    if (has_bind_rsp()) {
      if (bind_rsp_ != NULL) bind_rsp_->::com::letsmidi::monsys::protocol::push::BindRsp::Clear();
    }
    if (has_connect()) {
      if (connect_ != NULL) connect_->::com::letsmidi::monsys::protocol::push::Connect::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_connect_rsp()) {
      if (connect_rsp_ != NULL) connect_rsp_->::com::letsmidi::monsys::protocol::push::ConnectRsp::Clear();
    }
    if (has_get_fgw_list()) {
      if (get_fgw_list_ != NULL) get_fgw_list_->::com::letsmidi::monsys::protocol::push::GetFgwList::Clear();
    }
    if (has_get_fgw_list_rsp()) {
      if (get_fgw_list_rsp_ != NULL) get_fgw_list_rsp_->::com::letsmidi::monsys::protocol::push::GetFgwListRsp::Clear();
    }
    if (has_get_dev_list()) {
      if (get_dev_list_ != NULL) get_dev_list_->::com::letsmidi::monsys::protocol::push::GetDevList::Clear();
    }
    if (has_get_dev_list_rsp()) {
      if (get_dev_list_rsp_ != NULL) get_dev_list_rsp_->::com::letsmidi::monsys::protocol::push::GetDevListRsp::Clear();
    }
    if (has_get_dev_info()) {
      if (get_dev_info_ != NULL) get_dev_info_->::com::letsmidi::monsys::protocol::push::GetDevInfo::Clear();
    }
    if (has_get_dev_info_rsp()) {
      if (get_dev_info_rsp_ != NULL) get_dev_info_rsp_->::com::letsmidi::monsys::protocol::push::GetDevInfoRsp::Clear();
    }
    if (has_set_dev_info()) {
      if (set_dev_info_ != NULL) set_dev_info_->::com::letsmidi::monsys::protocol::push::SetDevInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 4128768) {
    if (has_set_dev_info_rsp()) {
      if (set_dev_info_rsp_ != NULL) set_dev_info_rsp_->::com::letsmidi::monsys::protocol::push::SetDevInfoRsp::Clear();
    }
    if (has_client_login()) {
      if (client_login_ != NULL) client_login_->::com::letsmidi::monsys::protocol::push::ClientLogin::Clear();
    }
    if (has_client_login_rsp()) {
      if (client_login_rsp_ != NULL) client_login_rsp_->::com::letsmidi::monsys::protocol::push::ClientLoginRsp::Clear();
    }
    if (has_user_register()) {
      if (user_register_ != NULL) user_register_->::com::letsmidi::monsys::protocol::push::UserRegister::Clear();
    }
    if (has_user_register_rsp()) {
      if (user_register_rsp_ != NULL) user_register_rsp_->::com::letsmidi::monsys::protocol::push::UserRegisterRsp::Clear();
    }
    if (has_heartbeat()) {
      if (heartbeat_ != NULL) heartbeat_->::com::letsmidi::monsys::protocol::push::Heartbeat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.PushMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::push::MsgType_IsValid(value)) {
            set_type(static_cast< ::com::letsmidi::monsys::protocol::push::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // required int32 sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_login;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.Login login = 10;
      case 10: {
        if (tag == 82) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_login_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.LoginRsp login_rsp = 11;
      case 11: {
        if (tag == 90) {
         parse_login_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_bind;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.Bind bind = 12;
      case 12: {
        if (tag == 98) {
         parse_bind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bind()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_bind_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.BindRsp bind_rsp = 13;
      case 13: {
        if (tag == 106) {
         parse_bind_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bind_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_connect;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.Connect connect = 14;
      case 14: {
        if (tag == 114) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_connect_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 15;
      case 15: {
        if (tag == 122) {
         parse_connect_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_get_fgw_list;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.GetFgwList get_fgw_list = 16;
      case 16: {
        if (tag == 130) {
         parse_get_fgw_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_fgw_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_get_fgw_list_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.GetFgwListRsp get_fgw_list_rsp = 17;
      case 17: {
        if (tag == 138) {
         parse_get_fgw_list_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_fgw_list_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_get_dev_list;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.GetDevList get_dev_list = 18;
      case 18: {
        if (tag == 146) {
         parse_get_dev_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_dev_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_get_dev_list_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.GetDevListRsp get_dev_list_rsp = 19;
      case 19: {
        if (tag == 154) {
         parse_get_dev_list_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_dev_list_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_get_dev_info;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.GetDevInfo get_dev_info = 20;
      case 20: {
        if (tag == 162) {
         parse_get_dev_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_dev_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_get_dev_info_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.GetDevInfoRsp get_dev_info_rsp = 21;
      case 21: {
        if (tag == 170) {
         parse_get_dev_info_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_dev_info_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_set_dev_info;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.SetDevInfo set_dev_info = 22;
      case 22: {
        if (tag == 178) {
         parse_set_dev_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_dev_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_set_dev_info_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.SetDevInfoRsp set_dev_info_rsp = 23;
      case 23: {
        if (tag == 186) {
         parse_set_dev_info_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_dev_info_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_client_login;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.ClientLogin client_login = 24;
      case 24: {
        if (tag == 194) {
         parse_client_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_client_login_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.ClientLoginRsp client_login_rsp = 25;
      case 25: {
        if (tag == 202) {
         parse_client_login_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_login_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_user_register;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.UserRegister user_register = 26;
      case 26: {
        if (tag == 210) {
         parse_user_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_register()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_user_register_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.UserRegisterRsp user_register_rsp = 27;
      case 27: {
        if (tag == 218) {
         parse_user_register_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_register_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_heartbeat;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.push.Heartbeat heartbeat = 28;
      case 28: {
        if (tag == 226) {
         parse_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.PushMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.PushMsg)
  return false;
#undef DO_
}

void PushMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.PushMsg)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sequence(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.Login login = 10;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->login(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.LoginRsp login_rsp = 11;
  if (has_login_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->login_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.Bind bind = 12;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->bind(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.BindRsp bind_rsp = 13;
  if (has_bind_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->bind_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.Connect connect = 14;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->connect(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 15;
  if (has_connect_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->connect_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetFgwList get_fgw_list = 16;
  if (has_get_fgw_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->get_fgw_list(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetFgwListRsp get_fgw_list_rsp = 17;
  if (has_get_fgw_list_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->get_fgw_list_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevList get_dev_list = 18;
  if (has_get_dev_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->get_dev_list(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevListRsp get_dev_list_rsp = 19;
  if (has_get_dev_list_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->get_dev_list_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevInfo get_dev_info = 20;
  if (has_get_dev_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->get_dev_info(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevInfoRsp get_dev_info_rsp = 21;
  if (has_get_dev_info_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->get_dev_info_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.SetDevInfo set_dev_info = 22;
  if (has_set_dev_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->set_dev_info(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.SetDevInfoRsp set_dev_info_rsp = 23;
  if (has_set_dev_info_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->set_dev_info_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.ClientLogin client_login = 24;
  if (has_client_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->client_login(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.ClientLoginRsp client_login_rsp = 25;
  if (has_client_login_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->client_login_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.UserRegister user_register = 26;
  if (has_user_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->user_register(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.UserRegisterRsp user_register_rsp = 27;
  if (has_user_register_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->user_register_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.push.Heartbeat heartbeat = 28;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->heartbeat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.PushMsg)
}

::google::protobuf::uint8* PushMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.PushMsg)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sequence(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.Login login = 10;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->login(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.LoginRsp login_rsp = 11;
  if (has_login_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->login_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.Bind bind = 12;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->bind(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.BindRsp bind_rsp = 13;
  if (has_bind_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->bind_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.Connect connect = 14;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->connect(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 15;
  if (has_connect_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->connect_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetFgwList get_fgw_list = 16;
  if (has_get_fgw_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->get_fgw_list(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetFgwListRsp get_fgw_list_rsp = 17;
  if (has_get_fgw_list_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->get_fgw_list_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevList get_dev_list = 18;
  if (has_get_dev_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->get_dev_list(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevListRsp get_dev_list_rsp = 19;
  if (has_get_dev_list_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->get_dev_list_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevInfo get_dev_info = 20;
  if (has_get_dev_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->get_dev_info(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.GetDevInfoRsp get_dev_info_rsp = 21;
  if (has_get_dev_info_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->get_dev_info_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.SetDevInfo set_dev_info = 22;
  if (has_set_dev_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->set_dev_info(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.SetDevInfoRsp set_dev_info_rsp = 23;
  if (has_set_dev_info_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->set_dev_info_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.ClientLogin client_login = 24;
  if (has_client_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->client_login(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.ClientLoginRsp client_login_rsp = 25;
  if (has_client_login_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->client_login_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.UserRegister user_register = 26;
  if (has_user_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->user_register(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.UserRegisterRsp user_register_rsp = 27;
  if (has_user_register_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->user_register_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.push.Heartbeat heartbeat = 28;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->heartbeat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.PushMsg)
  return target;
}

int PushMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional .com.letsmidi.monsys.protocol.push.Login login = 10;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .com.letsmidi.monsys.protocol.push.LoginRsp login_rsp = 11;
    if (has_login_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.Bind bind = 12;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bind());
    }

    // optional .com.letsmidi.monsys.protocol.push.BindRsp bind_rsp = 13;
    if (has_bind_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bind_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.Connect connect = 14;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 15;
    if (has_connect_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.GetFgwList get_fgw_list = 16;
    if (has_get_fgw_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_fgw_list());
    }

    // optional .com.letsmidi.monsys.protocol.push.GetFgwListRsp get_fgw_list_rsp = 17;
    if (has_get_fgw_list_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_fgw_list_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.GetDevList get_dev_list = 18;
    if (has_get_dev_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_dev_list());
    }

    // optional .com.letsmidi.monsys.protocol.push.GetDevListRsp get_dev_list_rsp = 19;
    if (has_get_dev_list_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_dev_list_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.GetDevInfo get_dev_info = 20;
    if (has_get_dev_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_dev_info());
    }

    // optional .com.letsmidi.monsys.protocol.push.GetDevInfoRsp get_dev_info_rsp = 21;
    if (has_get_dev_info_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_dev_info_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.SetDevInfo set_dev_info = 22;
    if (has_set_dev_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_dev_info());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .com.letsmidi.monsys.protocol.push.SetDevInfoRsp set_dev_info_rsp = 23;
    if (has_set_dev_info_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_dev_info_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.ClientLogin client_login = 24;
    if (has_client_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_login());
    }

    // optional .com.letsmidi.monsys.protocol.push.ClientLoginRsp client_login_rsp = 25;
    if (has_client_login_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_login_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.UserRegister user_register = 26;
    if (has_user_register()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_register());
    }

    // optional .com.letsmidi.monsys.protocol.push.UserRegisterRsp user_register_rsp = 27;
    if (has_user_register_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_register_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.push.Heartbeat heartbeat = 28;
    if (has_heartbeat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMsg::MergeFrom(const PushMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_login()) {
      mutable_login()->::com::letsmidi::monsys::protocol::push::Login::MergeFrom(from.login());
    }
    if (from.has_login_rsp()) {
      mutable_login_rsp()->::com::letsmidi::monsys::protocol::push::LoginRsp::MergeFrom(from.login_rsp());
    }
    if (from.has_bind()) {
      mutable_bind()->::com::letsmidi::monsys::protocol::push::Bind::MergeFrom(from.bind());
    }
    if (from.has_bind_rsp()) {
      mutable_bind_rsp()->::com::letsmidi::monsys::protocol::push::BindRsp::MergeFrom(from.bind_rsp());
    }
    if (from.has_connect()) {
      mutable_connect()->::com::letsmidi::monsys::protocol::push::Connect::MergeFrom(from.connect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connect_rsp()) {
      mutable_connect_rsp()->::com::letsmidi::monsys::protocol::push::ConnectRsp::MergeFrom(from.connect_rsp());
    }
    if (from.has_get_fgw_list()) {
      mutable_get_fgw_list()->::com::letsmidi::monsys::protocol::push::GetFgwList::MergeFrom(from.get_fgw_list());
    }
    if (from.has_get_fgw_list_rsp()) {
      mutable_get_fgw_list_rsp()->::com::letsmidi::monsys::protocol::push::GetFgwListRsp::MergeFrom(from.get_fgw_list_rsp());
    }
    if (from.has_get_dev_list()) {
      mutable_get_dev_list()->::com::letsmidi::monsys::protocol::push::GetDevList::MergeFrom(from.get_dev_list());
    }
    if (from.has_get_dev_list_rsp()) {
      mutable_get_dev_list_rsp()->::com::letsmidi::monsys::protocol::push::GetDevListRsp::MergeFrom(from.get_dev_list_rsp());
    }
    if (from.has_get_dev_info()) {
      mutable_get_dev_info()->::com::letsmidi::monsys::protocol::push::GetDevInfo::MergeFrom(from.get_dev_info());
    }
    if (from.has_get_dev_info_rsp()) {
      mutable_get_dev_info_rsp()->::com::letsmidi::monsys::protocol::push::GetDevInfoRsp::MergeFrom(from.get_dev_info_rsp());
    }
    if (from.has_set_dev_info()) {
      mutable_set_dev_info()->::com::letsmidi::monsys::protocol::push::SetDevInfo::MergeFrom(from.set_dev_info());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_set_dev_info_rsp()) {
      mutable_set_dev_info_rsp()->::com::letsmidi::monsys::protocol::push::SetDevInfoRsp::MergeFrom(from.set_dev_info_rsp());
    }
    if (from.has_client_login()) {
      mutable_client_login()->::com::letsmidi::monsys::protocol::push::ClientLogin::MergeFrom(from.client_login());
    }
    if (from.has_client_login_rsp()) {
      mutable_client_login_rsp()->::com::letsmidi::monsys::protocol::push::ClientLoginRsp::MergeFrom(from.client_login_rsp());
    }
    if (from.has_user_register()) {
      mutable_user_register()->::com::letsmidi::monsys::protocol::push::UserRegister::MergeFrom(from.user_register());
    }
    if (from.has_user_register_rsp()) {
      mutable_user_register_rsp()->::com::letsmidi::monsys::protocol::push::UserRegisterRsp::MergeFrom(from.user_register_rsp());
    }
    if (from.has_heartbeat()) {
      mutable_heartbeat()->::com::letsmidi::monsys::protocol::push::Heartbeat::MergeFrom(from.heartbeat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMsg::CopyFrom(const PushMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_login_rsp()) {
    if (!this->login_rsp().IsInitialized()) return false;
  }
  if (has_bind()) {
    if (!this->bind().IsInitialized()) return false;
  }
  if (has_bind_rsp()) {
    if (!this->bind_rsp().IsInitialized()) return false;
  }
  if (has_connect()) {
    if (!this->connect().IsInitialized()) return false;
  }
  if (has_connect_rsp()) {
    if (!this->connect_rsp().IsInitialized()) return false;
  }
  if (has_get_fgw_list_rsp()) {
    if (!this->get_fgw_list_rsp().IsInitialized()) return false;
  }
  if (has_get_dev_list()) {
    if (!this->get_dev_list().IsInitialized()) return false;
  }
  if (has_get_dev_list_rsp()) {
    if (!this->get_dev_list_rsp().IsInitialized()) return false;
  }
  if (has_get_dev_info()) {
    if (!this->get_dev_info().IsInitialized()) return false;
  }
  if (has_get_dev_info_rsp()) {
    if (!this->get_dev_info_rsp().IsInitialized()) return false;
  }
  if (has_set_dev_info()) {
    if (!this->set_dev_info().IsInitialized()) return false;
  }
  if (has_set_dev_info_rsp()) {
    if (!this->set_dev_info_rsp().IsInitialized()) return false;
  }
  if (has_client_login()) {
    if (!this->client_login().IsInitialized()) return false;
  }
  if (has_client_login_rsp()) {
    if (!this->client_login_rsp().IsInitialized()) return false;
  }
  if (has_user_register()) {
    if (!this->user_register().IsInitialized()) return false;
  }
  if (has_user_register_rsp()) {
    if (!this->user_register_rsp().IsInitialized()) return false;
  }
  return true;
}

void PushMsg::Swap(PushMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(sequence_, other->sequence_);
    std::swap(login_, other->login_);
    std::swap(login_rsp_, other->login_rsp_);
    std::swap(bind_, other->bind_);
    std::swap(bind_rsp_, other->bind_rsp_);
    std::swap(connect_, other->connect_);
    std::swap(connect_rsp_, other->connect_rsp_);
    std::swap(get_fgw_list_, other->get_fgw_list_);
    std::swap(get_fgw_list_rsp_, other->get_fgw_list_rsp_);
    std::swap(get_dev_list_, other->get_dev_list_);
    std::swap(get_dev_list_rsp_, other->get_dev_list_rsp_);
    std::swap(get_dev_info_, other->get_dev_info_);
    std::swap(get_dev_info_rsp_, other->get_dev_info_rsp_);
    std::swap(set_dev_info_, other->set_dev_info_);
    std::swap(set_dev_info_rsp_, other->set_dev_info_rsp_);
    std::swap(client_login_, other->client_login_);
    std::swap(client_login_rsp_, other->client_login_rsp_);
    std::swap(user_register_, other->user_register_);
    std::swap(user_register_rsp_, other->user_register_rsp_);
    std::swap(heartbeat_, other->heartbeat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMsg_descriptor_;
  metadata.reflection = PushMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.Login)
}

void Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (has_device_id()) {
    if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      device_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.Login)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.Login)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.LoginRsp)
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.LoginRsp)
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRsp_descriptor_;
}

const LoginRsp& LoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.LoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.LoginRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.LoginRsp)
}

::google::protobuf::uint8* LoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.LoginRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.LoginRsp)
  return target;
}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRsp_descriptor_;
  metadata.reflection = LoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLogin::kAccountFieldNumber;
const int ClientLogin::kPasswordFieldNumber;
#endif  // !_MSC_VER

ClientLogin::ClientLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.ClientLogin)
}

void ClientLogin::InitAsDefaultInstance() {
}

ClientLogin::ClientLogin(const ClientLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.ClientLogin)
}

void ClientLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLogin::~ClientLogin() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.ClientLogin)
  SharedDtor();
}

void ClientLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ClientLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLogin_descriptor_;
}

const ClientLogin& ClientLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

ClientLogin* ClientLogin::default_instance_ = NULL;

ClientLogin* ClientLogin::New() const {
  return new ClientLogin;
}

void ClientLogin::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.ClientLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.ClientLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.ClientLogin)
  return false;
#undef DO_
}

void ClientLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.ClientLogin)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.ClientLogin)
}

::google::protobuf::uint8* ClientLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.ClientLogin)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.ClientLogin)
  return target;
}

int ClientLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLogin::MergeFrom(const ClientLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLogin::CopyFrom(const ClientLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientLogin::Swap(ClientLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLogin_descriptor_;
  metadata.reflection = ClientLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginRsp::kCodeFieldNumber;
const int ClientLoginRsp::kFgwInfosFieldNumber;
#endif  // !_MSC_VER

ClientLoginRsp::ClientLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
}

void ClientLoginRsp::InitAsDefaultInstance() {
}

ClientLoginRsp::ClientLoginRsp(const ClientLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
}

void ClientLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginRsp::~ClientLoginRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
  SharedDtor();
}

void ClientLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginRsp_descriptor_;
}

const ClientLoginRsp& ClientLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

ClientLoginRsp* ClientLoginRsp::default_instance_ = NULL;

ClientLoginRsp* ClientLoginRsp::New() const {
  return new ClientLoginRsp;
}

void ClientLoginRsp::Clear() {
  code_ = 0;
  fgw_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fgw_infos;
        break;
      }

      // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
      case 2: {
        if (tag == 18) {
         parse_fgw_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fgw_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fgw_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
  return false;
#undef DO_
}

void ClientLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  for (int i = 0; i < this->fgw_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fgw_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
}

::google::protobuf::uint8* ClientLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  for (int i = 0; i < this->fgw_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fgw_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
  return target;
}

int ClientLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  total_size += 1 * this->fgw_infos_size();
  for (int i = 0; i < this->fgw_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fgw_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginRsp::MergeFrom(const ClientLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fgw_infos_.MergeFrom(from.fgw_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginRsp::CopyFrom(const ClientLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fgw_infos())) return false;
  return true;
}

void ClientLoginRsp::Swap(ClientLoginRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    fgw_infos_.Swap(&other->fgw_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginRsp_descriptor_;
  metadata.reflection = ClientLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bind::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

Bind::Bind()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.Bind)
}

void Bind::InitAsDefaultInstance() {
}

Bind::Bind(const Bind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.Bind)
}

void Bind::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bind::~Bind() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.Bind)
  SharedDtor();
}

void Bind::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void Bind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bind_descriptor_;
}

const Bind& Bind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

Bind* Bind::default_instance_ = NULL;

Bind* Bind::New() const {
  return new Bind;
}

void Bind::Clear() {
  if (has_device_id()) {
    if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      device_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.Bind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.Bind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.Bind)
  return false;
#undef DO_
}

void Bind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.Bind)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.Bind)
}

::google::protobuf::uint8* Bind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.Bind)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.Bind)
  return target;
}

int Bind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bind::MergeFrom(const Bind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bind::CopyFrom(const Bind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bind::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Bind::Swap(Bind* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bind_descriptor_;
  metadata.reflection = Bind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

BindRsp::BindRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.BindRsp)
}

void BindRsp::InitAsDefaultInstance() {
}

BindRsp::BindRsp(const BindRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.BindRsp)
}

void BindRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindRsp::~BindRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.BindRsp)
  SharedDtor();
}

void BindRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindRsp_descriptor_;
}

const BindRsp& BindRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

BindRsp* BindRsp::default_instance_ = NULL;

BindRsp* BindRsp::New() const {
  return new BindRsp;
}

void BindRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.BindRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.BindRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.BindRsp)
  return false;
#undef DO_
}

void BindRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.BindRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.BindRsp)
}

::google::protobuf::uint8* BindRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.BindRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.BindRsp)
  return target;
}

int BindRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindRsp::MergeFrom(const BindRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindRsp::CopyFrom(const BindRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BindRsp::Swap(BindRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindRsp_descriptor_;
  metadata.reflection = BindRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Connect::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

Connect::Connect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.Connect)
}

void Connect::InitAsDefaultInstance() {
}

Connect::Connect(const Connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.Connect)
}

void Connect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connect_descriptor_;
}

const Connect& Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

Connect* Connect::default_instance_ = NULL;

Connect* Connect::New() const {
  return new Connect;
}

void Connect::Clear() {
  if (has_device_id()) {
    if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      device_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.Connect)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.Connect)
}

::google::protobuf::uint8* Connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.Connect)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.Connect)
  return target;
}

int Connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Connect::Swap(Connect* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connect_descriptor_;
  metadata.reflection = Connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

ConnectRsp::ConnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.ConnectRsp)
}

void ConnectRsp::InitAsDefaultInstance() {
}

ConnectRsp::ConnectRsp(const ConnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.ConnectRsp)
}

void ConnectRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRsp::~ConnectRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.ConnectRsp)
  SharedDtor();
}

void ConnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRsp_descriptor_;
}

const ConnectRsp& ConnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

ConnectRsp* ConnectRsp::default_instance_ = NULL;

ConnectRsp* ConnectRsp::New() const {
  return new ConnectRsp;
}

void ConnectRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.ConnectRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.ConnectRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.ConnectRsp)
  return false;
#undef DO_
}

void ConnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.ConnectRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.ConnectRsp)
}

::google::protobuf::uint8* ConnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.ConnectRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.ConnectRsp)
  return target;
}

int ConnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRsp::MergeFrom(const ConnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRsp::CopyFrom(const ConnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectRsp::Swap(ConnectRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRsp_descriptor_;
  metadata.reflection = ConnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFgwList::GetFgwList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.GetFgwList)
}

void GetFgwList::InitAsDefaultInstance() {
}

GetFgwList::GetFgwList(const GetFgwList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.GetFgwList)
}

void GetFgwList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFgwList::~GetFgwList() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.GetFgwList)
  SharedDtor();
}

void GetFgwList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFgwList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFgwList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFgwList_descriptor_;
}

const GetFgwList& GetFgwList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

GetFgwList* GetFgwList::default_instance_ = NULL;

GetFgwList* GetFgwList::New() const {
  return new GetFgwList;
}

void GetFgwList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFgwList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.GetFgwList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.GetFgwList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.GetFgwList)
  return false;
#undef DO_
}

void GetFgwList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.GetFgwList)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.GetFgwList)
}

::google::protobuf::uint8* GetFgwList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.GetFgwList)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.GetFgwList)
  return target;
}

int GetFgwList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFgwList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFgwList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFgwList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFgwList::MergeFrom(const GetFgwList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFgwList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFgwList::CopyFrom(const GetFgwList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFgwList::IsInitialized() const {

  return true;
}

void GetFgwList::Swap(GetFgwList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFgwList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFgwList_descriptor_;
  metadata.reflection = GetFgwList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFgwListRsp::kCodeFieldNumber;
const int GetFgwListRsp::kFgwInfosFieldNumber;
#endif  // !_MSC_VER

GetFgwListRsp::GetFgwListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
}

void GetFgwListRsp::InitAsDefaultInstance() {
}

GetFgwListRsp::GetFgwListRsp(const GetFgwListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
}

void GetFgwListRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFgwListRsp::~GetFgwListRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
  SharedDtor();
}

void GetFgwListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFgwListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFgwListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFgwListRsp_descriptor_;
}

const GetFgwListRsp& GetFgwListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

GetFgwListRsp* GetFgwListRsp::default_instance_ = NULL;

GetFgwListRsp* GetFgwListRsp::New() const {
  return new GetFgwListRsp;
}

void GetFgwListRsp::Clear() {
  code_ = 0;
  fgw_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFgwListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fgw_infos;
        break;
      }

      // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
      case 2: {
        if (tag == 18) {
         parse_fgw_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fgw_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fgw_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
  return false;
#undef DO_
}

void GetFgwListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  for (int i = 0; i < this->fgw_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fgw_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
}

::google::protobuf::uint8* GetFgwListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  for (int i = 0; i < this->fgw_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fgw_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
  return target;
}

int GetFgwListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  total_size += 1 * this->fgw_infos_size();
  for (int i = 0; i < this->fgw_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fgw_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFgwListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFgwListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFgwListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFgwListRsp::MergeFrom(const GetFgwListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fgw_infos_.MergeFrom(from.fgw_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFgwListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFgwListRsp::CopyFrom(const GetFgwListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFgwListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fgw_infos())) return false;
  return true;
}

void GetFgwListRsp::Swap(GetFgwListRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    fgw_infos_.Swap(&other->fgw_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFgwListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFgwListRsp_descriptor_;
  metadata.reflection = GetFgwListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDevList::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

GetDevList::GetDevList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.GetDevList)
}

void GetDevList::InitAsDefaultInstance() {
}

GetDevList::GetDevList(const GetDevList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.GetDevList)
}

void GetDevList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDevList::~GetDevList() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.GetDevList)
  SharedDtor();
}

void GetDevList::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void GetDevList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDevList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDevList_descriptor_;
}

const GetDevList& GetDevList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

GetDevList* GetDevList::default_instance_ = NULL;

GetDevList* GetDevList::New() const {
  return new GetDevList;
}

void GetDevList::Clear() {
  if (has_device_id()) {
    if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      device_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDevList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.GetDevList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.GetDevList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.GetDevList)
  return false;
#undef DO_
}

void GetDevList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.GetDevList)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.GetDevList)
}

::google::protobuf::uint8* GetDevList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.GetDevList)
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.GetDevList)
  return target;
}

int GetDevList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDevList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDevList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDevList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDevList::MergeFrom(const GetDevList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDevList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDevList::CopyFrom(const GetDevList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDevList::Swap(GetDevList* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDevList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDevList_descriptor_;
  metadata.reflection = GetDevList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDevListRsp::kCodeFieldNumber;
const int GetDevListRsp::kDevInfosFieldNumber;
#endif  // !_MSC_VER

GetDevListRsp::GetDevListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.GetDevListRsp)
}

void GetDevListRsp::InitAsDefaultInstance() {
}

GetDevListRsp::GetDevListRsp(const GetDevListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.GetDevListRsp)
}

void GetDevListRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDevListRsp::~GetDevListRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.GetDevListRsp)
  SharedDtor();
}

void GetDevListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDevListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDevListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDevListRsp_descriptor_;
}

const GetDevListRsp& GetDevListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

GetDevListRsp* GetDevListRsp::default_instance_ = NULL;

GetDevListRsp* GetDevListRsp::New() const {
  return new GetDevListRsp;
}

void GetDevListRsp::Clear() {
  code_ = 0;
  dev_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDevListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.GetDevListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dev_infos;
        break;
      }

      // repeated .com.letsmidi.monsys.protocol.push.DeviceInfo dev_infos = 2;
      case 2: {
        if (tag == 18) {
         parse_dev_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dev_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dev_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.GetDevListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.GetDevListRsp)
  return false;
#undef DO_
}

void GetDevListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.GetDevListRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .com.letsmidi.monsys.protocol.push.DeviceInfo dev_infos = 2;
  for (int i = 0; i < this->dev_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dev_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.GetDevListRsp)
}

::google::protobuf::uint8* GetDevListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.GetDevListRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .com.letsmidi.monsys.protocol.push.DeviceInfo dev_infos = 2;
  for (int i = 0; i < this->dev_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dev_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.GetDevListRsp)
  return target;
}

int GetDevListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated .com.letsmidi.monsys.protocol.push.DeviceInfo dev_infos = 2;
  total_size += 1 * this->dev_infos_size();
  for (int i = 0; i < this->dev_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dev_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDevListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDevListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDevListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDevListRsp::MergeFrom(const GetDevListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dev_infos_.MergeFrom(from.dev_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDevListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDevListRsp::CopyFrom(const GetDevListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dev_infos())) return false;
  return true;
}

void GetDevListRsp::Swap(GetDevListRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    dev_infos_.Swap(&other->dev_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDevListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDevListRsp_descriptor_;
  metadata.reflection = GetDevListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDevInfo::kAddrFieldNumber;
const int GetDevInfo::kItemIdsFieldNumber;
#endif  // !_MSC_VER

GetDevInfo::GetDevInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.GetDevInfo)
}

void GetDevInfo::InitAsDefaultInstance() {
}

GetDevInfo::GetDevInfo(const GetDevInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.GetDevInfo)
}

void GetDevInfo::SharedCtor() {
  _cached_size_ = 0;
  addr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDevInfo::~GetDevInfo() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.GetDevInfo)
  SharedDtor();
}

void GetDevInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDevInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDevInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDevInfo_descriptor_;
}

const GetDevInfo& GetDevInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

GetDevInfo* GetDevInfo::default_instance_ = NULL;

GetDevInfo* GetDevInfo::New() const {
  return new GetDevInfo;
}

void GetDevInfo::Clear() {
  addr_ = 0;
  item_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.GetDevInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_ids;
        break;
      }

      // repeated int32 item_ids = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_ids())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.GetDevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.GetDevInfo)
  return false;
#undef DO_
}

void GetDevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.GetDevInfo)
  // required int32 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // repeated int32 item_ids = 2 [packed = true];
  if (this->item_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_item_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->item_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.GetDevInfo)
}

::google::protobuf::uint8* GetDevInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.GetDevInfo)
  // required int32 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // repeated int32 item_ids = 2 [packed = true];
  if (this->item_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _item_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->item_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.GetDevInfo)
  return target;
}

int GetDevInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

  }
  // repeated int32 item_ids = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _item_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDevInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDevInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDevInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDevInfo::MergeFrom(const GetDevInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDevInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDevInfo::CopyFrom(const GetDevInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDevInfo::Swap(GetDevInfo* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    item_ids_.Swap(&other->item_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDevInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDevInfo_descriptor_;
  metadata.reflection = GetDevInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDevInfoRsp::kCodeFieldNumber;
const int GetDevInfoRsp::kIdValuePairsFieldNumber;
#endif  // !_MSC_VER

GetDevInfoRsp::GetDevInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
}

void GetDevInfoRsp::InitAsDefaultInstance() {
}

GetDevInfoRsp::GetDevInfoRsp(const GetDevInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
}

void GetDevInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDevInfoRsp::~GetDevInfoRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
  SharedDtor();
}

void GetDevInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDevInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDevInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDevInfoRsp_descriptor_;
}

const GetDevInfoRsp& GetDevInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

GetDevInfoRsp* GetDevInfoRsp::default_instance_ = NULL;

GetDevInfoRsp* GetDevInfoRsp::New() const {
  return new GetDevInfoRsp;
}

void GetDevInfoRsp::Clear() {
  code_ = 0;
  id_value_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDevInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_value_pairs;
        break;
      }

      // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
      case 2: {
        if (tag == 18) {
         parse_id_value_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id_value_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_value_pairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
  return false;
#undef DO_
}

void GetDevInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  for (int i = 0; i < this->id_value_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id_value_pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
}

::google::protobuf::uint8* GetDevInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  for (int i = 0; i < this->id_value_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id_value_pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
  return target;
}

int GetDevInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  total_size += 1 * this->id_value_pairs_size();
  for (int i = 0; i < this->id_value_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_value_pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDevInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDevInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDevInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDevInfoRsp::MergeFrom(const GetDevInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_value_pairs_.MergeFrom(from.id_value_pairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDevInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDevInfoRsp::CopyFrom(const GetDevInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->id_value_pairs())) return false;
  return true;
}

void GetDevInfoRsp::Swap(GetDevInfoRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    id_value_pairs_.Swap(&other->id_value_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDevInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDevInfoRsp_descriptor_;
  metadata.reflection = GetDevInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDevInfo::kAddrFieldNumber;
const int SetDevInfo::kIdValuePairsFieldNumber;
#endif  // !_MSC_VER

SetDevInfo::SetDevInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.SetDevInfo)
}

void SetDevInfo::InitAsDefaultInstance() {
}

SetDevInfo::SetDevInfo(const SetDevInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.SetDevInfo)
}

void SetDevInfo::SharedCtor() {
  _cached_size_ = 0;
  addr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDevInfo::~SetDevInfo() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.SetDevInfo)
  SharedDtor();
}

void SetDevInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetDevInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDevInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDevInfo_descriptor_;
}

const SetDevInfo& SetDevInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

SetDevInfo* SetDevInfo::default_instance_ = NULL;

SetDevInfo* SetDevInfo::New() const {
  return new SetDevInfo;
}

void SetDevInfo::Clear() {
  addr_ = 0;
  id_value_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.SetDevInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_value_pairs;
        break;
      }

      // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
      case 2: {
        if (tag == 18) {
         parse_id_value_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id_value_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_value_pairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.SetDevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.SetDevInfo)
  return false;
#undef DO_
}

void SetDevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.SetDevInfo)
  // required int32 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  for (int i = 0; i < this->id_value_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id_value_pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.SetDevInfo)
}

::google::protobuf::uint8* SetDevInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.SetDevInfo)
  // required int32 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  for (int i = 0; i < this->id_value_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id_value_pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.SetDevInfo)
  return target;
}

int SetDevInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

  }
  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  total_size += 1 * this->id_value_pairs_size();
  for (int i = 0; i < this->id_value_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_value_pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDevInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDevInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDevInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDevInfo::MergeFrom(const SetDevInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_value_pairs_.MergeFrom(from.id_value_pairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDevInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDevInfo::CopyFrom(const SetDevInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDevInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->id_value_pairs())) return false;
  return true;
}

void SetDevInfo::Swap(SetDevInfo* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    id_value_pairs_.Swap(&other->id_value_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDevInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDevInfo_descriptor_;
  metadata.reflection = SetDevInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDevInfoRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

SetDevInfoRsp::SetDevInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
}

void SetDevInfoRsp::InitAsDefaultInstance() {
}

SetDevInfoRsp::SetDevInfoRsp(const SetDevInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
}

void SetDevInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDevInfoRsp::~SetDevInfoRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
  SharedDtor();
}

void SetDevInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetDevInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDevInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDevInfoRsp_descriptor_;
}

const SetDevInfoRsp& SetDevInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

SetDevInfoRsp* SetDevInfoRsp::default_instance_ = NULL;

SetDevInfoRsp* SetDevInfoRsp::New() const {
  return new SetDevInfoRsp;
}

void SetDevInfoRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDevInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
  return false;
#undef DO_
}

void SetDevInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
}

::google::protobuf::uint8* SetDevInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
  return target;
}

int SetDevInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDevInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDevInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDevInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDevInfoRsp::MergeFrom(const SetDevInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDevInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDevInfoRsp::CopyFrom(const SetDevInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDevInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetDevInfoRsp::Swap(SetDevInfoRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDevInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDevInfoRsp_descriptor_;
  metadata.reflection = SetDevInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRegister::kNicknameFieldNumber;
const int UserRegister::kAccountFieldNumber;
const int UserRegister::kPasswordFieldNumber;
#endif  // !_MSC_VER

UserRegister::UserRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.UserRegister)
}

void UserRegister::InitAsDefaultInstance() {
}

UserRegister::UserRegister(const UserRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.UserRegister)
}

void UserRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRegister::~UserRegister() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.UserRegister)
  SharedDtor();
}

void UserRegister::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void UserRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRegister_descriptor_;
}

const UserRegister& UserRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

UserRegister* UserRegister::default_instance_ = NULL;

UserRegister* UserRegister::New() const {
  return new UserRegister;
}

void UserRegister::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.UserRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.UserRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.UserRegister)
  return false;
#undef DO_
}

void UserRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.UserRegister)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.UserRegister)
}

::google::protobuf::uint8* UserRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.UserRegister)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.UserRegister)
  return target;
}

int UserRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRegister::MergeFrom(const UserRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRegister::CopyFrom(const UserRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserRegister::Swap(UserRegister* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRegister_descriptor_;
  metadata.reflection = UserRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRegisterRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

UserRegisterRsp::UserRegisterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
}

void UserRegisterRsp::InitAsDefaultInstance() {
}

UserRegisterRsp::UserRegisterRsp(const UserRegisterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
}

void UserRegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRegisterRsp::~UserRegisterRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
  SharedDtor();
}

void UserRegisterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRegisterRsp_descriptor_;
}

const UserRegisterRsp& UserRegisterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

UserRegisterRsp* UserRegisterRsp::default_instance_ = NULL;

UserRegisterRsp* UserRegisterRsp::New() const {
  return new UserRegisterRsp;
}

void UserRegisterRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
  return false;
#undef DO_
}

void UserRegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
}

::google::protobuf::uint8* UserRegisterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
  return target;
}

int UserRegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRegisterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRegisterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRegisterRsp::MergeFrom(const UserRegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRegisterRsp::CopyFrom(const UserRegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegisterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserRegisterRsp::Swap(UserRegisterRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRegisterRsp_descriptor_;
  metadata.reflection = UserRegisterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Heartbeat::Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.Heartbeat)
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New() const {
  return new Heartbeat;
}

void Heartbeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.Heartbeat)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.Heartbeat)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.Heartbeat)
  return target;
}

int Heartbeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kCodeFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.push.Response)
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.push.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.push.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_push_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.push.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.push.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.push.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.push.Response)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.push.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.push.Response)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.push.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace push
}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

// @@protoc_insertion_point(global_scope)
