// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {
namespace exchange {

namespace {

const ::google::protobuf::Descriptor* ExchangeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_exchange_2eproto() {
  protobuf_AddDesc_exchange_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "exchange.proto");
  GOOGLE_CHECK(file != NULL);
  ExchangeMsg_descriptor_ = file->message_type(0);
  static const int ExchangeMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, request_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, request_exchange_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, connect_rsp_),
  };
  ExchangeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeMsg_descriptor_,
      ExchangeMsg::default_instance_,
      ExchangeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeMsg));
  RequestExchange_descriptor_ = file->message_type(1);
  static const int RequestExchange_offsets_[1] = {
  };
  RequestExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestExchange_descriptor_,
      RequestExchange::default_instance_,
      RequestExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestExchange));
  RequestExchangeRsp_descriptor_ = file->message_type(2);
  static const int RequestExchangeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchangeRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchangeRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchangeRsp, peer_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchangeRsp, peer_id2_),
  };
  RequestExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestExchangeRsp_descriptor_,
      RequestExchangeRsp::default_instance_,
      RequestExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestExchangeRsp));
  Connect_descriptor_ = file->message_type(3);
  static const int Connect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, peer_id_),
  };
  Connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Connect_descriptor_,
      Connect::default_instance_,
      Connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Connect));
  ConnectRsp_descriptor_ = file->message_type(4);
  static const int ConnectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, code_),
  };
  ConnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRsp_descriptor_,
      ConnectRsp::default_instance_,
      ConnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRsp));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_exchange_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeMsg_descriptor_, &ExchangeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestExchange_descriptor_, &RequestExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestExchangeRsp_descriptor_, &RequestExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Connect_descriptor_, &Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRsp_descriptor_, &ConnectRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_exchange_2eproto() {
  delete ExchangeMsg::default_instance_;
  delete ExchangeMsg_reflection_;
  delete RequestExchange::default_instance_;
  delete RequestExchange_reflection_;
  delete RequestExchangeRsp::default_instance_;
  delete RequestExchangeRsp_reflection_;
  delete Connect::default_instance_;
  delete Connect_reflection_;
  delete ConnectRsp::default_instance_;
  delete ConnectRsp_reflection_;
}

void protobuf_AddDesc_exchange_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016exchange.proto\022%com.letsmidi.monsys.pr"
    "otocol.exchange\"\242\003\n\013ExchangeMsg\022\017\n\007versi"
    "on\030\001 \002(\r\022<\n\004type\030\002 \002(\0162..com.letsmidi.mo"
    "nsys.protocol.exchange.MsgType\022\020\n\010sequen"
    "ce\030\003 \002(\r\022P\n\020request_exchange\030\005 \001(\01326.com"
    ".letsmidi.monsys.protocol.exchange.Reque"
    "stExchange\022W\n\024request_exchange_rsp\030\006 \001(\013"
    "29.com.letsmidi.monsys.protocol.exchange"
    ".RequestExchangeRsp\022\?\n\007connect\030\007 \001(\0132..c"
    "om.letsmidi.monsys.protocol.exchange.Con"
    "nect\022F\n\013connect_rsp\030\010 \001(\01321.com.letsmidi"
    ".monsys.protocol.exchange.ConnectRsp\"\021\n\017"
    "RequestExchange\"R\n\022RequestExchangeRsp\022\014\n"
    "\004code\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\022\020\n\010peer_id1\030\003 \002("
    "\t\022\020\n\010peer_id2\030\004 \002(\t\"&\n\007Connect\022\n\n\002id\030\001 \002"
    "(\t\022\017\n\007peer_id\030\002 \002(\t\"\032\n\nConnectRsp\022\014\n\004cod"
    "e\030\001 \002(\005*W\n\007MsgType\022\024\n\020REQUEST_EXCHANGE\020\001"
    "\022\030\n\024REQUEST_EXCHANGE_RSP\020\002\022\013\n\007CONNECT\020\003\022"
    "\017\n\013CONNECT_RSP\020\004", 736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "exchange.proto", &protobuf_RegisterTypes);
  ExchangeMsg::default_instance_ = new ExchangeMsg();
  RequestExchange::default_instance_ = new RequestExchange();
  RequestExchangeRsp::default_instance_ = new RequestExchangeRsp();
  Connect::default_instance_ = new Connect();
  ConnectRsp::default_instance_ = new ConnectRsp();
  ExchangeMsg::default_instance_->InitAsDefaultInstance();
  RequestExchange::default_instance_->InitAsDefaultInstance();
  RequestExchangeRsp::default_instance_->InitAsDefaultInstance();
  Connect::default_instance_->InitAsDefaultInstance();
  ConnectRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_exchange_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_exchange_2eproto {
  StaticDescriptorInitializer_exchange_2eproto() {
    protobuf_AddDesc_exchange_2eproto();
  }
} static_descriptor_initializer_exchange_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeMsg::kVersionFieldNumber;
const int ExchangeMsg::kTypeFieldNumber;
const int ExchangeMsg::kSequenceFieldNumber;
const int ExchangeMsg::kRequestExchangeFieldNumber;
const int ExchangeMsg::kRequestExchangeRspFieldNumber;
const int ExchangeMsg::kConnectFieldNumber;
const int ExchangeMsg::kConnectRspFieldNumber;
#endif  // !_MSC_VER

ExchangeMsg::ExchangeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
}

void ExchangeMsg::InitAsDefaultInstance() {
  request_exchange_ = const_cast< ::com::letsmidi::monsys::protocol::exchange::RequestExchange*>(&::com::letsmidi::monsys::protocol::exchange::RequestExchange::default_instance());
  request_exchange_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::exchange::RequestExchangeRsp*>(&::com::letsmidi::monsys::protocol::exchange::RequestExchangeRsp::default_instance());
  connect_ = const_cast< ::com::letsmidi::monsys::protocol::exchange::Connect*>(&::com::letsmidi::monsys::protocol::exchange::Connect::default_instance());
  connect_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::exchange::ConnectRsp*>(&::com::letsmidi::monsys::protocol::exchange::ConnectRsp::default_instance());
}

ExchangeMsg::ExchangeMsg(const ExchangeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
}

void ExchangeMsg::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  type_ = 1;
  sequence_ = 0u;
  request_exchange_ = NULL;
  request_exchange_rsp_ = NULL;
  connect_ = NULL;
  connect_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeMsg::~ExchangeMsg() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
  SharedDtor();
}

void ExchangeMsg::SharedDtor() {
  if (this != default_instance_) {
    delete request_exchange_;
    delete request_exchange_rsp_;
    delete connect_;
    delete connect_rsp_;
  }
}

void ExchangeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeMsg_descriptor_;
}

const ExchangeMsg& ExchangeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

ExchangeMsg* ExchangeMsg::default_instance_ = NULL;

ExchangeMsg* ExchangeMsg::New() const {
  return new ExchangeMsg;
}

void ExchangeMsg::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    version_ = 0u;
    type_ = 1;
    sequence_ = 0u;
    if (has_request_exchange()) {
      if (request_exchange_ != NULL) request_exchange_->::com::letsmidi::monsys::protocol::exchange::RequestExchange::Clear();
    }
    if (has_request_exchange_rsp()) {
      if (request_exchange_rsp_ != NULL) request_exchange_rsp_->::com::letsmidi::monsys::protocol::exchange::RequestExchangeRsp::Clear();
    }
    if (has_connect()) {
      if (connect_ != NULL) connect_->::com::letsmidi::monsys::protocol::exchange::Connect::Clear();
    }
    if (has_connect_rsp()) {
      if (connect_rsp_ != NULL) connect_rsp_->::com::letsmidi::monsys::protocol::exchange::ConnectRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .com.letsmidi.monsys.protocol.exchange.MsgType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::exchange::MsgType_IsValid(value)) {
            set_type(static_cast< ::com::letsmidi::monsys::protocol::exchange::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // required uint32 sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_request_exchange;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.exchange.RequestExchange request_exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_request_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_exchange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_request_exchange_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp request_exchange_rsp = 6;
      case 6: {
        if (tag == 50) {
         parse_request_exchange_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_exchange_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_connect;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.exchange.Connect connect = 7;
      case 7: {
        if (tag == 58) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_connect_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.exchange.ConnectRsp connect_rsp = 8;
      case 8: {
        if (tag == 66) {
         parse_connect_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
  return false;
#undef DO_
}

void ExchangeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required .com.letsmidi.monsys.protocol.exchange.MsgType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence(), output);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.RequestExchange request_exchange = 5;
  if (has_request_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->request_exchange(), output);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp request_exchange_rsp = 6;
  if (has_request_exchange_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->request_exchange_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.Connect connect = 7;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->connect(), output);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.ConnectRsp connect_rsp = 8;
  if (has_connect_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->connect_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
}

::google::protobuf::uint8* ExchangeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required .com.letsmidi.monsys.protocol.exchange.MsgType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence(), target);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.RequestExchange request_exchange = 5;
  if (has_request_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->request_exchange(), target);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp request_exchange_rsp = 6;
  if (has_request_exchange_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->request_exchange_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.Connect connect = 7;
  if (has_connect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->connect(), target);
  }

  // optional .com.letsmidi.monsys.protocol.exchange.ConnectRsp connect_rsp = 8;
  if (has_connect_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->connect_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.exchange.ExchangeMsg)
  return target;
}

int ExchangeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required .com.letsmidi.monsys.protocol.exchange.MsgType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional .com.letsmidi.monsys.protocol.exchange.RequestExchange request_exchange = 5;
    if (has_request_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_exchange());
    }

    // optional .com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp request_exchange_rsp = 6;
    if (has_request_exchange_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_exchange_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.exchange.Connect connect = 7;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect());
    }

    // optional .com.letsmidi.monsys.protocol.exchange.ConnectRsp connect_rsp = 8;
    if (has_connect_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeMsg::MergeFrom(const ExchangeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_request_exchange()) {
      mutable_request_exchange()->::com::letsmidi::monsys::protocol::exchange::RequestExchange::MergeFrom(from.request_exchange());
    }
    if (from.has_request_exchange_rsp()) {
      mutable_request_exchange_rsp()->::com::letsmidi::monsys::protocol::exchange::RequestExchangeRsp::MergeFrom(from.request_exchange_rsp());
    }
    if (from.has_connect()) {
      mutable_connect()->::com::letsmidi::monsys::protocol::exchange::Connect::MergeFrom(from.connect());
    }
    if (from.has_connect_rsp()) {
      mutable_connect_rsp()->::com::letsmidi::monsys::protocol::exchange::ConnectRsp::MergeFrom(from.connect_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeMsg::CopyFrom(const ExchangeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_request_exchange_rsp()) {
    if (!this->request_exchange_rsp().IsInitialized()) return false;
  }
  if (has_connect()) {
    if (!this->connect().IsInitialized()) return false;
  }
  if (has_connect_rsp()) {
    if (!this->connect_rsp().IsInitialized()) return false;
  }
  return true;
}

void ExchangeMsg::Swap(ExchangeMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(sequence_, other->sequence_);
    std::swap(request_exchange_, other->request_exchange_);
    std::swap(request_exchange_rsp_, other->request_exchange_rsp_);
    std::swap(connect_, other->connect_);
    std::swap(connect_rsp_, other->connect_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeMsg_descriptor_;
  metadata.reflection = ExchangeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestExchange::RequestExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.exchange.RequestExchange)
}

void RequestExchange::InitAsDefaultInstance() {
}

RequestExchange::RequestExchange(const RequestExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.exchange.RequestExchange)
}

void RequestExchange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestExchange::~RequestExchange() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.exchange.RequestExchange)
  SharedDtor();
}

void RequestExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestExchange_descriptor_;
}

const RequestExchange& RequestExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

RequestExchange* RequestExchange::default_instance_ = NULL;

RequestExchange* RequestExchange::New() const {
  return new RequestExchange;
}

void RequestExchange::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.exchange.RequestExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.exchange.RequestExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.exchange.RequestExchange)
  return false;
#undef DO_
}

void RequestExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.exchange.RequestExchange)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.exchange.RequestExchange)
}

::google::protobuf::uint8* RequestExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.exchange.RequestExchange)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.exchange.RequestExchange)
  return target;
}

int RequestExchange::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestExchange::MergeFrom(const RequestExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestExchange::CopyFrom(const RequestExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestExchange::IsInitialized() const {

  return true;
}

void RequestExchange::Swap(RequestExchange* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestExchange_descriptor_;
  metadata.reflection = RequestExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestExchangeRsp::kCodeFieldNumber;
const int RequestExchangeRsp::kIdFieldNumber;
const int RequestExchangeRsp::kPeerId1FieldNumber;
const int RequestExchangeRsp::kPeerId2FieldNumber;
#endif  // !_MSC_VER

RequestExchangeRsp::RequestExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
}

void RequestExchangeRsp::InitAsDefaultInstance() {
}

RequestExchangeRsp::RequestExchangeRsp(const RequestExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
}

void RequestExchangeRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestExchangeRsp::~RequestExchangeRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
  SharedDtor();
}

void RequestExchangeRsp::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (peer_id1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_id1_;
  }
  if (peer_id2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_id2_;
  }
  if (this != default_instance_) {
  }
}

void RequestExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestExchangeRsp_descriptor_;
}

const RequestExchangeRsp& RequestExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

RequestExchangeRsp* RequestExchangeRsp::default_instance_ = NULL;

RequestExchangeRsp* RequestExchangeRsp::New() const {
  return new RequestExchangeRsp;
}

void RequestExchangeRsp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    code_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_peer_id1()) {
      if (peer_id1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_id1_->clear();
      }
    }
    if (has_peer_id2()) {
      if (peer_id2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_id2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_id1;
        break;
      }

      // required string peer_id1 = 3;
      case 3: {
        if (tag == 26) {
         parse_peer_id1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id1().data(), this->peer_id1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_id1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_peer_id2;
        break;
      }

      // required string peer_id2 = 4;
      case 4: {
        if (tag == 34) {
         parse_peer_id2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id2().data(), this->peer_id2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_id2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
  return false;
#undef DO_
}

void RequestExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // required string peer_id1 = 3;
  if (has_peer_id1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id1().data(), this->peer_id1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id1(), output);
  }

  // required string peer_id2 = 4;
  if (has_peer_id2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id2().data(), this->peer_id2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->peer_id2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
}

::google::protobuf::uint8* RequestExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required string peer_id1 = 3;
  if (has_peer_id1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id1().data(), this->peer_id1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id1(), target);
  }

  // required string peer_id2 = 4;
  if (has_peer_id2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id2().data(), this->peer_id2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->peer_id2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.exchange.RequestExchangeRsp)
  return target;
}

int RequestExchangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string peer_id1 = 3;
    if (has_peer_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id1());
    }

    // required string peer_id2 = 4;
    if (has_peer_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestExchangeRsp::MergeFrom(const RequestExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_peer_id1()) {
      set_peer_id1(from.peer_id1());
    }
    if (from.has_peer_id2()) {
      set_peer_id2(from.peer_id2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestExchangeRsp::CopyFrom(const RequestExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestExchangeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestExchangeRsp::Swap(RequestExchangeRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(id_, other->id_);
    std::swap(peer_id1_, other->peer_id1_);
    std::swap(peer_id2_, other->peer_id2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestExchangeRsp_descriptor_;
  metadata.reflection = RequestExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Connect::kIdFieldNumber;
const int Connect::kPeerIdFieldNumber;
#endif  // !_MSC_VER

Connect::Connect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.exchange.Connect)
}

void Connect::InitAsDefaultInstance() {
}

Connect::Connect(const Connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.exchange.Connect)
}

void Connect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.exchange.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_id_;
  }
  if (this != default_instance_) {
  }
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connect_descriptor_;
}

const Connect& Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

Connect* Connect::default_instance_ = NULL;

Connect* Connect::New() const {
  return new Connect;
}

void Connect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_peer_id()) {
      if (peer_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.exchange.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer_id;
        break;
      }

      // required string peer_id = 2;
      case 2: {
        if (tag == 18) {
         parse_peer_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), this->peer_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.exchange.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.exchange.Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.exchange.Connect)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->peer_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.exchange.Connect)
}

::google::protobuf::uint8* Connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.exchange.Connect)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string peer_id = 2;
  if (has_peer_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), this->peer_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.exchange.Connect)
  return target;
}

int Connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string peer_id = 2;
    if (has_peer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_peer_id()) {
      set_peer_id(from.peer_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Connect::Swap(Connect* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(peer_id_, other->peer_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connect_descriptor_;
  metadata.reflection = Connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

ConnectRsp::ConnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
}

void ConnectRsp::InitAsDefaultInstance() {
}

ConnectRsp::ConnectRsp(const ConnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
}

void ConnectRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRsp::~ConnectRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
  SharedDtor();
}

void ConnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRsp_descriptor_;
}

const ConnectRsp& ConnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_exchange_2eproto();
  return *default_instance_;
}

ConnectRsp* ConnectRsp::default_instance_ = NULL;

ConnectRsp* ConnectRsp::New() const {
  return new ConnectRsp;
}

void ConnectRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
  return false;
#undef DO_
}

void ConnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
}

::google::protobuf::uint8* ConnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.exchange.ConnectRsp)
  return target;
}

int ConnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectRsp::MergeFrom(const ConnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRsp::CopyFrom(const ConnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectRsp::Swap(ConnectRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRsp_descriptor_;
  metadata.reflection = ConnectRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace exchange
}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

// @@protoc_insertion_point(global_scope)
