// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto

#ifndef PROTOBUF_push_2eproto__INCLUDED
#define PROTOBUF_push_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {
namespace push {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_push_2eproto();
void protobuf_AssignDesc_push_2eproto();
void protobuf_ShutdownFile_push_2eproto();

class IdValuePair;
class FGatewayInfo;
class DeviceInfo;
class PushMsg;
class Login;
class LoginRsp;
class ClientLogin;
class ClientLoginRsp;
class Bind;
class BindRsp;
class Connect;
class ConnectRsp;
class GetFgwList;
class GetFgwListRsp;
class GetDevList;
class GetDevListRsp;
class GetDevInfo;
class GetDevInfoRsp;
class SetDevInfo;
class SetDevInfoRsp;
class UserRegister;
class UserRegisterRsp;
class Heartbeat;
class Response;

enum MsgType {
  LOGIN = 1,
  LOGIN_RSP = 101,
  BIND = 2,
  BIND_RSP = 102,
  CONNECT = 3,
  CONNECT_RSP = 103,
  GET_FGW_LIST = 4,
  GET_FGW_LIST_RSP = 104,
  GET_DEV_LIST = 5,
  GET_DEV_LIST_RSP = 105,
  GET_DEV_INFO = 6,
  GET_DEV_INFO_RSP = 106,
  SET_DEV_INFO = 7,
  SET_DEV_INFO_RSP = 107,
  CLIENT_LOGIN = 8,
  CLIENT_LOGIN_RSP = 108,
  USER_REGISTER = 9,
  USER_REGISTER_RSP = 109,
  HEARTBEAT = 10,
  RESPONSE = 99
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = LOGIN;
const MsgType MsgType_MAX = USER_REGISTER_RSP;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class IdValuePair : public ::google::protobuf::Message {
 public:
  IdValuePair();
  virtual ~IdValuePair();

  IdValuePair(const IdValuePair& from);

  inline IdValuePair& operator=(const IdValuePair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdValuePair& default_instance();

  void Swap(IdValuePair* other);

  // implements Message ----------------------------------------------

  IdValuePair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdValuePair& from);
  void MergeFrom(const IdValuePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.IdValuePair)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static IdValuePair* default_instance_;
};
// -------------------------------------------------------------------

class FGatewayInfo : public ::google::protobuf::Message {
 public:
  FGatewayInfo();
  virtual ~FGatewayInfo();

  FGatewayInfo(const FGatewayInfo& from);

  inline FGatewayInfo& operator=(const FGatewayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FGatewayInfo& default_instance();

  void Swap(FGatewayInfo* other);

  // implements Message ----------------------------------------------

  FGatewayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FGatewayInfo& from);
  void MergeFrom(const FGatewayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.FGatewayInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* desc_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static FGatewayInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  void Swap(DeviceInfo* other);

  // implements Message ----------------------------------------------

  DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.DeviceInfo)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 addr_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class PushMsg : public ::google::protobuf::Message {
 public:
  PushMsg();
  virtual ~PushMsg();

  PushMsg(const PushMsg& from);

  inline PushMsg& operator=(const PushMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushMsg& default_instance();

  void Swap(PushMsg* other);

  // implements Message ----------------------------------------------

  PushMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushMsg& from);
  void MergeFrom(const PushMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::com::letsmidi::monsys::protocol::push::MsgType type() const;
  inline void set_type(::com::letsmidi::monsys::protocol::push::MsgType value);

  // required int32 sequence = 3;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 3;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);

  // optional .com.letsmidi.monsys.protocol.push.Login login = 10;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 10;
  inline const ::com::letsmidi::monsys::protocol::push::Login& login() const;
  inline ::com::letsmidi::monsys::protocol::push::Login* mutable_login();
  inline ::com::letsmidi::monsys::protocol::push::Login* release_login();
  inline void set_allocated_login(::com::letsmidi::monsys::protocol::push::Login* login);

  // optional .com.letsmidi.monsys.protocol.push.LoginRsp login_rsp = 11;
  inline bool has_login_rsp() const;
  inline void clear_login_rsp();
  static const int kLoginRspFieldNumber = 11;
  inline const ::com::letsmidi::monsys::protocol::push::LoginRsp& login_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::LoginRsp* mutable_login_rsp();
  inline ::com::letsmidi::monsys::protocol::push::LoginRsp* release_login_rsp();
  inline void set_allocated_login_rsp(::com::letsmidi::monsys::protocol::push::LoginRsp* login_rsp);

  // optional .com.letsmidi.monsys.protocol.push.Bind bind = 12;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 12;
  inline const ::com::letsmidi::monsys::protocol::push::Bind& bind() const;
  inline ::com::letsmidi::monsys::protocol::push::Bind* mutable_bind();
  inline ::com::letsmidi::monsys::protocol::push::Bind* release_bind();
  inline void set_allocated_bind(::com::letsmidi::monsys::protocol::push::Bind* bind);

  // optional .com.letsmidi.monsys.protocol.push.BindRsp bind_rsp = 13;
  inline bool has_bind_rsp() const;
  inline void clear_bind_rsp();
  static const int kBindRspFieldNumber = 13;
  inline const ::com::letsmidi::monsys::protocol::push::BindRsp& bind_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::BindRsp* mutable_bind_rsp();
  inline ::com::letsmidi::monsys::protocol::push::BindRsp* release_bind_rsp();
  inline void set_allocated_bind_rsp(::com::letsmidi::monsys::protocol::push::BindRsp* bind_rsp);

  // optional .com.letsmidi.monsys.protocol.push.Connect connect = 14;
  inline bool has_connect() const;
  inline void clear_connect();
  static const int kConnectFieldNumber = 14;
  inline const ::com::letsmidi::monsys::protocol::push::Connect& connect() const;
  inline ::com::letsmidi::monsys::protocol::push::Connect* mutable_connect();
  inline ::com::letsmidi::monsys::protocol::push::Connect* release_connect();
  inline void set_allocated_connect(::com::letsmidi::monsys::protocol::push::Connect* connect);

  // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 15;
  inline bool has_connect_rsp() const;
  inline void clear_connect_rsp();
  static const int kConnectRspFieldNumber = 15;
  inline const ::com::letsmidi::monsys::protocol::push::ConnectRsp& connect_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::ConnectRsp* mutable_connect_rsp();
  inline ::com::letsmidi::monsys::protocol::push::ConnectRsp* release_connect_rsp();
  inline void set_allocated_connect_rsp(::com::letsmidi::monsys::protocol::push::ConnectRsp* connect_rsp);

  // optional .com.letsmidi.monsys.protocol.push.GetFgwList get_fgw_list = 16;
  inline bool has_get_fgw_list() const;
  inline void clear_get_fgw_list();
  static const int kGetFgwListFieldNumber = 16;
  inline const ::com::letsmidi::monsys::protocol::push::GetFgwList& get_fgw_list() const;
  inline ::com::letsmidi::monsys::protocol::push::GetFgwList* mutable_get_fgw_list();
  inline ::com::letsmidi::monsys::protocol::push::GetFgwList* release_get_fgw_list();
  inline void set_allocated_get_fgw_list(::com::letsmidi::monsys::protocol::push::GetFgwList* get_fgw_list);

  // optional .com.letsmidi.monsys.protocol.push.GetFgwListRsp get_fgw_list_rsp = 17;
  inline bool has_get_fgw_list_rsp() const;
  inline void clear_get_fgw_list_rsp();
  static const int kGetFgwListRspFieldNumber = 17;
  inline const ::com::letsmidi::monsys::protocol::push::GetFgwListRsp& get_fgw_list_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::GetFgwListRsp* mutable_get_fgw_list_rsp();
  inline ::com::letsmidi::monsys::protocol::push::GetFgwListRsp* release_get_fgw_list_rsp();
  inline void set_allocated_get_fgw_list_rsp(::com::letsmidi::monsys::protocol::push::GetFgwListRsp* get_fgw_list_rsp);

  // optional .com.letsmidi.monsys.protocol.push.GetDevList get_dev_list = 18;
  inline bool has_get_dev_list() const;
  inline void clear_get_dev_list();
  static const int kGetDevListFieldNumber = 18;
  inline const ::com::letsmidi::monsys::protocol::push::GetDevList& get_dev_list() const;
  inline ::com::letsmidi::monsys::protocol::push::GetDevList* mutable_get_dev_list();
  inline ::com::letsmidi::monsys::protocol::push::GetDevList* release_get_dev_list();
  inline void set_allocated_get_dev_list(::com::letsmidi::monsys::protocol::push::GetDevList* get_dev_list);

  // optional .com.letsmidi.monsys.protocol.push.GetDevListRsp get_dev_list_rsp = 19;
  inline bool has_get_dev_list_rsp() const;
  inline void clear_get_dev_list_rsp();
  static const int kGetDevListRspFieldNumber = 19;
  inline const ::com::letsmidi::monsys::protocol::push::GetDevListRsp& get_dev_list_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::GetDevListRsp* mutable_get_dev_list_rsp();
  inline ::com::letsmidi::monsys::protocol::push::GetDevListRsp* release_get_dev_list_rsp();
  inline void set_allocated_get_dev_list_rsp(::com::letsmidi::monsys::protocol::push::GetDevListRsp* get_dev_list_rsp);

  // optional .com.letsmidi.monsys.protocol.push.GetDevInfo get_dev_info = 20;
  inline bool has_get_dev_info() const;
  inline void clear_get_dev_info();
  static const int kGetDevInfoFieldNumber = 20;
  inline const ::com::letsmidi::monsys::protocol::push::GetDevInfo& get_dev_info() const;
  inline ::com::letsmidi::monsys::protocol::push::GetDevInfo* mutable_get_dev_info();
  inline ::com::letsmidi::monsys::protocol::push::GetDevInfo* release_get_dev_info();
  inline void set_allocated_get_dev_info(::com::letsmidi::monsys::protocol::push::GetDevInfo* get_dev_info);

  // optional .com.letsmidi.monsys.protocol.push.GetDevInfoRsp get_dev_info_rsp = 21;
  inline bool has_get_dev_info_rsp() const;
  inline void clear_get_dev_info_rsp();
  static const int kGetDevInfoRspFieldNumber = 21;
  inline const ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp& get_dev_info_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* mutable_get_dev_info_rsp();
  inline ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* release_get_dev_info_rsp();
  inline void set_allocated_get_dev_info_rsp(::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* get_dev_info_rsp);

  // optional .com.letsmidi.monsys.protocol.push.SetDevInfo set_dev_info = 22;
  inline bool has_set_dev_info() const;
  inline void clear_set_dev_info();
  static const int kSetDevInfoFieldNumber = 22;
  inline const ::com::letsmidi::monsys::protocol::push::SetDevInfo& set_dev_info() const;
  inline ::com::letsmidi::monsys::protocol::push::SetDevInfo* mutable_set_dev_info();
  inline ::com::letsmidi::monsys::protocol::push::SetDevInfo* release_set_dev_info();
  inline void set_allocated_set_dev_info(::com::letsmidi::monsys::protocol::push::SetDevInfo* set_dev_info);

  // optional .com.letsmidi.monsys.protocol.push.SetDevInfoRsp set_dev_info_rsp = 23;
  inline bool has_set_dev_info_rsp() const;
  inline void clear_set_dev_info_rsp();
  static const int kSetDevInfoRspFieldNumber = 23;
  inline const ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp& set_dev_info_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* mutable_set_dev_info_rsp();
  inline ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* release_set_dev_info_rsp();
  inline void set_allocated_set_dev_info_rsp(::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* set_dev_info_rsp);

  // optional .com.letsmidi.monsys.protocol.push.ClientLogin client_login = 24;
  inline bool has_client_login() const;
  inline void clear_client_login();
  static const int kClientLoginFieldNumber = 24;
  inline const ::com::letsmidi::monsys::protocol::push::ClientLogin& client_login() const;
  inline ::com::letsmidi::monsys::protocol::push::ClientLogin* mutable_client_login();
  inline ::com::letsmidi::monsys::protocol::push::ClientLogin* release_client_login();
  inline void set_allocated_client_login(::com::letsmidi::monsys::protocol::push::ClientLogin* client_login);

  // optional .com.letsmidi.monsys.protocol.push.ClientLoginRsp client_login_rsp = 25;
  inline bool has_client_login_rsp() const;
  inline void clear_client_login_rsp();
  static const int kClientLoginRspFieldNumber = 25;
  inline const ::com::letsmidi::monsys::protocol::push::ClientLoginRsp& client_login_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::ClientLoginRsp* mutable_client_login_rsp();
  inline ::com::letsmidi::monsys::protocol::push::ClientLoginRsp* release_client_login_rsp();
  inline void set_allocated_client_login_rsp(::com::letsmidi::monsys::protocol::push::ClientLoginRsp* client_login_rsp);

  // optional .com.letsmidi.monsys.protocol.push.UserRegister user_register = 26;
  inline bool has_user_register() const;
  inline void clear_user_register();
  static const int kUserRegisterFieldNumber = 26;
  inline const ::com::letsmidi::monsys::protocol::push::UserRegister& user_register() const;
  inline ::com::letsmidi::monsys::protocol::push::UserRegister* mutable_user_register();
  inline ::com::letsmidi::monsys::protocol::push::UserRegister* release_user_register();
  inline void set_allocated_user_register(::com::letsmidi::monsys::protocol::push::UserRegister* user_register);

  // optional .com.letsmidi.monsys.protocol.push.UserRegisterRsp user_register_rsp = 27;
  inline bool has_user_register_rsp() const;
  inline void clear_user_register_rsp();
  static const int kUserRegisterRspFieldNumber = 27;
  inline const ::com::letsmidi::monsys::protocol::push::UserRegisterRsp& user_register_rsp() const;
  inline ::com::letsmidi::monsys::protocol::push::UserRegisterRsp* mutable_user_register_rsp();
  inline ::com::letsmidi::monsys::protocol::push::UserRegisterRsp* release_user_register_rsp();
  inline void set_allocated_user_register_rsp(::com::letsmidi::monsys::protocol::push::UserRegisterRsp* user_register_rsp);

  // optional .com.letsmidi.monsys.protocol.push.Heartbeat heartbeat = 28;
  inline bool has_heartbeat() const;
  inline void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 28;
  inline const ::com::letsmidi::monsys::protocol::push::Heartbeat& heartbeat() const;
  inline ::com::letsmidi::monsys::protocol::push::Heartbeat* mutable_heartbeat();
  inline ::com::letsmidi::monsys::protocol::push::Heartbeat* release_heartbeat();
  inline void set_allocated_heartbeat(::com::letsmidi::monsys::protocol::push::Heartbeat* heartbeat);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.PushMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_login_rsp();
  inline void clear_has_login_rsp();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_bind_rsp();
  inline void clear_has_bind_rsp();
  inline void set_has_connect();
  inline void clear_has_connect();
  inline void set_has_connect_rsp();
  inline void clear_has_connect_rsp();
  inline void set_has_get_fgw_list();
  inline void clear_has_get_fgw_list();
  inline void set_has_get_fgw_list_rsp();
  inline void clear_has_get_fgw_list_rsp();
  inline void set_has_get_dev_list();
  inline void clear_has_get_dev_list();
  inline void set_has_get_dev_list_rsp();
  inline void clear_has_get_dev_list_rsp();
  inline void set_has_get_dev_info();
  inline void clear_has_get_dev_info();
  inline void set_has_get_dev_info_rsp();
  inline void clear_has_get_dev_info_rsp();
  inline void set_has_set_dev_info();
  inline void clear_has_set_dev_info();
  inline void set_has_set_dev_info_rsp();
  inline void clear_has_set_dev_info_rsp();
  inline void set_has_client_login();
  inline void clear_has_client_login();
  inline void set_has_client_login_rsp();
  inline void clear_has_client_login_rsp();
  inline void set_has_user_register();
  inline void clear_has_user_register();
  inline void set_has_user_register_rsp();
  inline void clear_has_user_register_rsp();
  inline void set_has_heartbeat();
  inline void clear_has_heartbeat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  int type_;
  ::com::letsmidi::monsys::protocol::push::Login* login_;
  ::com::letsmidi::monsys::protocol::push::LoginRsp* login_rsp_;
  ::com::letsmidi::monsys::protocol::push::Bind* bind_;
  ::com::letsmidi::monsys::protocol::push::BindRsp* bind_rsp_;
  ::com::letsmidi::monsys::protocol::push::Connect* connect_;
  ::com::letsmidi::monsys::protocol::push::ConnectRsp* connect_rsp_;
  ::com::letsmidi::monsys::protocol::push::GetFgwList* get_fgw_list_;
  ::com::letsmidi::monsys::protocol::push::GetFgwListRsp* get_fgw_list_rsp_;
  ::com::letsmidi::monsys::protocol::push::GetDevList* get_dev_list_;
  ::com::letsmidi::monsys::protocol::push::GetDevListRsp* get_dev_list_rsp_;
  ::com::letsmidi::monsys::protocol::push::GetDevInfo* get_dev_info_;
  ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* get_dev_info_rsp_;
  ::com::letsmidi::monsys::protocol::push::SetDevInfo* set_dev_info_;
  ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* set_dev_info_rsp_;
  ::com::letsmidi::monsys::protocol::push::ClientLogin* client_login_;
  ::com::letsmidi::monsys::protocol::push::ClientLoginRsp* client_login_rsp_;
  ::com::letsmidi::monsys::protocol::push::UserRegister* user_register_;
  ::com::letsmidi::monsys::protocol::push::UserRegisterRsp* user_register_rsp_;
  ::com::letsmidi::monsys::protocol::push::Heartbeat* heartbeat_;
  ::google::protobuf::int32 sequence_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static PushMsg* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.Login)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* device_id_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.LoginRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class ClientLogin : public ::google::protobuf::Message {
 public:
  ClientLogin();
  virtual ~ClientLogin();

  ClientLogin(const ClientLogin& from);

  inline ClientLogin& operator=(const ClientLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientLogin& default_instance();

  void Swap(ClientLogin* other);

  // implements Message ----------------------------------------------

  ClientLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientLogin& from);
  void MergeFrom(const ClientLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.ClientLogin)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static ClientLogin* default_instance_;
};
// -------------------------------------------------------------------

class ClientLoginRsp : public ::google::protobuf::Message {
 public:
  ClientLoginRsp();
  virtual ~ClientLoginRsp();

  ClientLoginRsp(const ClientLoginRsp& from);

  inline ClientLoginRsp& operator=(const ClientLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientLoginRsp& default_instance();

  void Swap(ClientLoginRsp* other);

  // implements Message ----------------------------------------------

  ClientLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientLoginRsp& from);
  void MergeFrom(const ClientLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  inline int fgw_infos_size() const;
  inline void clear_fgw_infos();
  static const int kFgwInfosFieldNumber = 2;
  inline const ::com::letsmidi::monsys::protocol::push::FGatewayInfo& fgw_infos(int index) const;
  inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* mutable_fgw_infos(int index);
  inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* add_fgw_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >&
      fgw_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >*
      mutable_fgw_infos();

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.ClientLoginRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo > fgw_infos_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static ClientLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class Bind : public ::google::protobuf::Message {
 public:
  Bind();
  virtual ~Bind();

  Bind(const Bind& from);

  inline Bind& operator=(const Bind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bind& default_instance();

  void Swap(Bind* other);

  // implements Message ----------------------------------------------

  Bind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bind& from);
  void MergeFrom(const Bind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.Bind)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* device_id_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Bind* default_instance_;
};
// -------------------------------------------------------------------

class BindRsp : public ::google::protobuf::Message {
 public:
  BindRsp();
  virtual ~BindRsp();

  BindRsp(const BindRsp& from);

  inline BindRsp& operator=(const BindRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindRsp& default_instance();

  void Swap(BindRsp* other);

  // implements Message ----------------------------------------------

  BindRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindRsp& from);
  void MergeFrom(const BindRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.BindRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static BindRsp* default_instance_;
};
// -------------------------------------------------------------------

class Connect : public ::google::protobuf::Message {
 public:
  Connect();
  virtual ~Connect();

  Connect(const Connect& from);

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();

  void Swap(Connect* other);

  // implements Message ----------------------------------------------

  Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.Connect)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* device_id_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Connect* default_instance_;
};
// -------------------------------------------------------------------

class ConnectRsp : public ::google::protobuf::Message {
 public:
  ConnectRsp();
  virtual ~ConnectRsp();

  ConnectRsp(const ConnectRsp& from);

  inline ConnectRsp& operator=(const ConnectRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRsp& default_instance();

  void Swap(ConnectRsp* other);

  // implements Message ----------------------------------------------

  ConnectRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectRsp& from);
  void MergeFrom(const ConnectRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.ConnectRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static ConnectRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetFgwList : public ::google::protobuf::Message {
 public:
  GetFgwList();
  virtual ~GetFgwList();

  GetFgwList(const GetFgwList& from);

  inline GetFgwList& operator=(const GetFgwList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFgwList& default_instance();

  void Swap(GetFgwList* other);

  // implements Message ----------------------------------------------

  GetFgwList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFgwList& from);
  void MergeFrom(const GetFgwList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.GetFgwList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetFgwList* default_instance_;
};
// -------------------------------------------------------------------

class GetFgwListRsp : public ::google::protobuf::Message {
 public:
  GetFgwListRsp();
  virtual ~GetFgwListRsp();

  GetFgwListRsp(const GetFgwListRsp& from);

  inline GetFgwListRsp& operator=(const GetFgwListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFgwListRsp& default_instance();

  void Swap(GetFgwListRsp* other);

  // implements Message ----------------------------------------------

  GetFgwListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFgwListRsp& from);
  void MergeFrom(const GetFgwListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
  inline int fgw_infos_size() const;
  inline void clear_fgw_infos();
  static const int kFgwInfosFieldNumber = 2;
  inline const ::com::letsmidi::monsys::protocol::push::FGatewayInfo& fgw_infos(int index) const;
  inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* mutable_fgw_infos(int index);
  inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* add_fgw_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >&
      fgw_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >*
      mutable_fgw_infos();

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.GetFgwListRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo > fgw_infos_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetFgwListRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetDevList : public ::google::protobuf::Message {
 public:
  GetDevList();
  virtual ~GetDevList();

  GetDevList(const GetDevList& from);

  inline GetDevList& operator=(const GetDevList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDevList& default_instance();

  void Swap(GetDevList* other);

  // implements Message ----------------------------------------------

  GetDevList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDevList& from);
  void MergeFrom(const GetDevList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.GetDevList)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* device_id_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetDevList* default_instance_;
};
// -------------------------------------------------------------------

class GetDevListRsp : public ::google::protobuf::Message {
 public:
  GetDevListRsp();
  virtual ~GetDevListRsp();

  GetDevListRsp(const GetDevListRsp& from);

  inline GetDevListRsp& operator=(const GetDevListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDevListRsp& default_instance();

  void Swap(GetDevListRsp* other);

  // implements Message ----------------------------------------------

  GetDevListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDevListRsp& from);
  void MergeFrom(const GetDevListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // repeated .com.letsmidi.monsys.protocol.push.DeviceInfo dev_infos = 2;
  inline int dev_infos_size() const;
  inline void clear_dev_infos();
  static const int kDevInfosFieldNumber = 2;
  inline const ::com::letsmidi::monsys::protocol::push::DeviceInfo& dev_infos(int index) const;
  inline ::com::letsmidi::monsys::protocol::push::DeviceInfo* mutable_dev_infos(int index);
  inline ::com::letsmidi::monsys::protocol::push::DeviceInfo* add_dev_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::DeviceInfo >&
      dev_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::DeviceInfo >*
      mutable_dev_infos();

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.GetDevListRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::DeviceInfo > dev_infos_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetDevListRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetDevInfo : public ::google::protobuf::Message {
 public:
  GetDevInfo();
  virtual ~GetDevInfo();

  GetDevInfo(const GetDevInfo& from);

  inline GetDevInfo& operator=(const GetDevInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDevInfo& default_instance();

  void Swap(GetDevInfo* other);

  // implements Message ----------------------------------------------

  GetDevInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDevInfo& from);
  void MergeFrom(const GetDevInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // repeated int32 item_ids = 2 [packed = true];
  inline int item_ids_size() const;
  inline void clear_item_ids();
  static const int kItemIdsFieldNumber = 2;
  inline ::google::protobuf::int32 item_ids(int index) const;
  inline void set_item_ids(int index, ::google::protobuf::int32 value);
  inline void add_item_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_ids();

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.GetDevInfo)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_ids_;
  mutable int _item_ids_cached_byte_size_;
  ::google::protobuf::int32 addr_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetDevInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetDevInfoRsp : public ::google::protobuf::Message {
 public:
  GetDevInfoRsp();
  virtual ~GetDevInfoRsp();

  GetDevInfoRsp(const GetDevInfoRsp& from);

  inline GetDevInfoRsp& operator=(const GetDevInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDevInfoRsp& default_instance();

  void Swap(GetDevInfoRsp* other);

  // implements Message ----------------------------------------------

  GetDevInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDevInfoRsp& from);
  void MergeFrom(const GetDevInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  inline int id_value_pairs_size() const;
  inline void clear_id_value_pairs();
  static const int kIdValuePairsFieldNumber = 2;
  inline const ::com::letsmidi::monsys::protocol::push::IdValuePair& id_value_pairs(int index) const;
  inline ::com::letsmidi::monsys::protocol::push::IdValuePair* mutable_id_value_pairs(int index);
  inline ::com::letsmidi::monsys::protocol::push::IdValuePair* add_id_value_pairs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >&
      id_value_pairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >*
      mutable_id_value_pairs();

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.GetDevInfoRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair > id_value_pairs_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetDevInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class SetDevInfo : public ::google::protobuf::Message {
 public:
  SetDevInfo();
  virtual ~SetDevInfo();

  SetDevInfo(const SetDevInfo& from);

  inline SetDevInfo& operator=(const SetDevInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDevInfo& default_instance();

  void Swap(SetDevInfo* other);

  // implements Message ----------------------------------------------

  SetDevInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetDevInfo& from);
  void MergeFrom(const SetDevInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
  inline int id_value_pairs_size() const;
  inline void clear_id_value_pairs();
  static const int kIdValuePairsFieldNumber = 2;
  inline const ::com::letsmidi::monsys::protocol::push::IdValuePair& id_value_pairs(int index) const;
  inline ::com::letsmidi::monsys::protocol::push::IdValuePair* mutable_id_value_pairs(int index);
  inline ::com::letsmidi::monsys::protocol::push::IdValuePair* add_id_value_pairs();
  inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >&
      id_value_pairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >*
      mutable_id_value_pairs();

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.SetDevInfo)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair > id_value_pairs_;
  ::google::protobuf::int32 addr_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static SetDevInfo* default_instance_;
};
// -------------------------------------------------------------------

class SetDevInfoRsp : public ::google::protobuf::Message {
 public:
  SetDevInfoRsp();
  virtual ~SetDevInfoRsp();

  SetDevInfoRsp(const SetDevInfoRsp& from);

  inline SetDevInfoRsp& operator=(const SetDevInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDevInfoRsp& default_instance();

  void Swap(SetDevInfoRsp* other);

  // implements Message ----------------------------------------------

  SetDevInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetDevInfoRsp& from);
  void MergeFrom(const SetDevInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.SetDevInfoRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static SetDevInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class UserRegister : public ::google::protobuf::Message {
 public:
  UserRegister();
  virtual ~UserRegister();

  UserRegister(const UserRegister& from);

  inline UserRegister& operator=(const UserRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegister& default_instance();

  void Swap(UserRegister* other);

  // implements Message ----------------------------------------------

  UserRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRegister& from);
  void MergeFrom(const UserRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.UserRegister)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::std::string* account_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static UserRegister* default_instance_;
};
// -------------------------------------------------------------------

class UserRegisterRsp : public ::google::protobuf::Message {
 public:
  UserRegisterRsp();
  virtual ~UserRegisterRsp();

  UserRegisterRsp(const UserRegisterRsp& from);

  inline UserRegisterRsp& operator=(const UserRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterRsp& default_instance();

  void Swap(UserRegisterRsp* other);

  // implements Message ----------------------------------------------

  UserRegisterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRegisterRsp& from);
  void MergeFrom(const UserRegisterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.UserRegisterRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static UserRegisterRsp* default_instance_;
};
// -------------------------------------------------------------------

class Heartbeat : public ::google::protobuf::Message {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Heartbeat& default_instance();

  void Swap(Heartbeat* other);

  // implements Message ----------------------------------------------

  Heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.Heartbeat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.Response)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// IdValuePair

// required int32 id = 1;
inline bool IdValuePair::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdValuePair::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IdValuePair::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IdValuePair::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 IdValuePair::id() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.IdValuePair.id)
  return id_;
}
inline void IdValuePair::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.IdValuePair.id)
}

// required int32 value = 2;
inline bool IdValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IdValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IdValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IdValuePair::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 IdValuePair::value() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.IdValuePair.value)
  return value_;
}
inline void IdValuePair::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.IdValuePair.value)
}

// -------------------------------------------------------------------

// FGatewayInfo

// required string id = 1;
inline bool FGatewayInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FGatewayInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FGatewayInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FGatewayInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& FGatewayInfo::id() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.FGatewayInfo.id)
  return *id_;
}
inline void FGatewayInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.FGatewayInfo.id)
}
inline void FGatewayInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.FGatewayInfo.id)
}
inline void FGatewayInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.FGatewayInfo.id)
}
inline ::std::string* FGatewayInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.FGatewayInfo.id)
  return id_;
}
inline ::std::string* FGatewayInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FGatewayInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.FGatewayInfo.id)
}

// required string name = 2;
inline bool FGatewayInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FGatewayInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FGatewayInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FGatewayInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FGatewayInfo::name() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.FGatewayInfo.name)
  return *name_;
}
inline void FGatewayInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.FGatewayInfo.name)
}
inline void FGatewayInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.FGatewayInfo.name)
}
inline void FGatewayInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.FGatewayInfo.name)
}
inline ::std::string* FGatewayInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.FGatewayInfo.name)
  return name_;
}
inline ::std::string* FGatewayInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FGatewayInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.FGatewayInfo.name)
}

// required string desc = 3;
inline bool FGatewayInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FGatewayInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FGatewayInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FGatewayInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& FGatewayInfo::desc() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.FGatewayInfo.desc)
  return *desc_;
}
inline void FGatewayInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.FGatewayInfo.desc)
}
inline void FGatewayInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.FGatewayInfo.desc)
}
inline void FGatewayInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.FGatewayInfo.desc)
}
inline ::std::string* FGatewayInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.FGatewayInfo.desc)
  return desc_;
}
inline ::std::string* FGatewayInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FGatewayInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.FGatewayInfo.desc)
}

// -------------------------------------------------------------------

// DeviceInfo

// required int32 addr = 1;
inline bool DeviceInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfo::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 DeviceInfo::addr() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.DeviceInfo.addr)
  return addr_;
}
inline void DeviceInfo::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.DeviceInfo.addr)
}

// required int32 type = 2;
inline bool DeviceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 DeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.DeviceInfo.type)
  return type_;
}
inline void DeviceInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.DeviceInfo.type)
}

// required string name = 3;
inline bool DeviceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.DeviceInfo.name)
  return *name_;
}
inline void DeviceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.DeviceInfo.name)
}
inline void DeviceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.DeviceInfo.name)
}
inline void DeviceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.DeviceInfo.name)
}
inline ::std::string* DeviceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.DeviceInfo.name)
  return name_;
}
inline ::std::string* DeviceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.DeviceInfo.name)
}

// -------------------------------------------------------------------

// PushMsg

// required int32 version = 1;
inline bool PushMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushMsg::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 PushMsg::version() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.version)
  return version_;
}
inline void PushMsg::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.PushMsg.version)
}

// required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
inline bool PushMsg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushMsg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::letsmidi::monsys::protocol::push::MsgType PushMsg::type() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.type)
  return static_cast< ::com::letsmidi::monsys::protocol::push::MsgType >(type_);
}
inline void PushMsg::set_type(::com::letsmidi::monsys::protocol::push::MsgType value) {
  assert(::com::letsmidi::monsys::protocol::push::MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.PushMsg.type)
}

// required int32 sequence = 3;
inline bool PushMsg::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushMsg::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushMsg::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushMsg::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 PushMsg::sequence() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.sequence)
  return sequence_;
}
inline void PushMsg::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.PushMsg.sequence)
}

// optional .com.letsmidi.monsys.protocol.push.Login login = 10;
inline bool PushMsg::has_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushMsg::set_has_login() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushMsg::clear_has_login() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushMsg::clear_login() {
  if (login_ != NULL) login_->::com::letsmidi::monsys::protocol::push::Login::Clear();
  clear_has_login();
}
inline const ::com::letsmidi::monsys::protocol::push::Login& PushMsg::login() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::com::letsmidi::monsys::protocol::push::Login* PushMsg::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::com::letsmidi::monsys::protocol::push::Login;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.login)
  return login_;
}
inline ::com::letsmidi::monsys::protocol::push::Login* PushMsg::release_login() {
  clear_has_login();
  ::com::letsmidi::monsys::protocol::push::Login* temp = login_;
  login_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_login(::com::letsmidi::monsys::protocol::push::Login* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.login)
}

// optional .com.letsmidi.monsys.protocol.push.LoginRsp login_rsp = 11;
inline bool PushMsg::has_login_rsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PushMsg::set_has_login_rsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PushMsg::clear_has_login_rsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PushMsg::clear_login_rsp() {
  if (login_rsp_ != NULL) login_rsp_->::com::letsmidi::monsys::protocol::push::LoginRsp::Clear();
  clear_has_login_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::LoginRsp& PushMsg::login_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.login_rsp)
  return login_rsp_ != NULL ? *login_rsp_ : *default_instance_->login_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::LoginRsp* PushMsg::mutable_login_rsp() {
  set_has_login_rsp();
  if (login_rsp_ == NULL) login_rsp_ = new ::com::letsmidi::monsys::protocol::push::LoginRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.login_rsp)
  return login_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::LoginRsp* PushMsg::release_login_rsp() {
  clear_has_login_rsp();
  ::com::letsmidi::monsys::protocol::push::LoginRsp* temp = login_rsp_;
  login_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_login_rsp(::com::letsmidi::monsys::protocol::push::LoginRsp* login_rsp) {
  delete login_rsp_;
  login_rsp_ = login_rsp;
  if (login_rsp) {
    set_has_login_rsp();
  } else {
    clear_has_login_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.login_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.Bind bind = 12;
inline bool PushMsg::has_bind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PushMsg::set_has_bind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PushMsg::clear_has_bind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PushMsg::clear_bind() {
  if (bind_ != NULL) bind_->::com::letsmidi::monsys::protocol::push::Bind::Clear();
  clear_has_bind();
}
inline const ::com::letsmidi::monsys::protocol::push::Bind& PushMsg::bind() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.bind)
  return bind_ != NULL ? *bind_ : *default_instance_->bind_;
}
inline ::com::letsmidi::monsys::protocol::push::Bind* PushMsg::mutable_bind() {
  set_has_bind();
  if (bind_ == NULL) bind_ = new ::com::letsmidi::monsys::protocol::push::Bind;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.bind)
  return bind_;
}
inline ::com::letsmidi::monsys::protocol::push::Bind* PushMsg::release_bind() {
  clear_has_bind();
  ::com::letsmidi::monsys::protocol::push::Bind* temp = bind_;
  bind_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_bind(::com::letsmidi::monsys::protocol::push::Bind* bind) {
  delete bind_;
  bind_ = bind;
  if (bind) {
    set_has_bind();
  } else {
    clear_has_bind();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.bind)
}

// optional .com.letsmidi.monsys.protocol.push.BindRsp bind_rsp = 13;
inline bool PushMsg::has_bind_rsp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PushMsg::set_has_bind_rsp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PushMsg::clear_has_bind_rsp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PushMsg::clear_bind_rsp() {
  if (bind_rsp_ != NULL) bind_rsp_->::com::letsmidi::monsys::protocol::push::BindRsp::Clear();
  clear_has_bind_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::BindRsp& PushMsg::bind_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.bind_rsp)
  return bind_rsp_ != NULL ? *bind_rsp_ : *default_instance_->bind_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::BindRsp* PushMsg::mutable_bind_rsp() {
  set_has_bind_rsp();
  if (bind_rsp_ == NULL) bind_rsp_ = new ::com::letsmidi::monsys::protocol::push::BindRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.bind_rsp)
  return bind_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::BindRsp* PushMsg::release_bind_rsp() {
  clear_has_bind_rsp();
  ::com::letsmidi::monsys::protocol::push::BindRsp* temp = bind_rsp_;
  bind_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_bind_rsp(::com::letsmidi::monsys::protocol::push::BindRsp* bind_rsp) {
  delete bind_rsp_;
  bind_rsp_ = bind_rsp;
  if (bind_rsp) {
    set_has_bind_rsp();
  } else {
    clear_has_bind_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.bind_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.Connect connect = 14;
inline bool PushMsg::has_connect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PushMsg::set_has_connect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PushMsg::clear_has_connect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PushMsg::clear_connect() {
  if (connect_ != NULL) connect_->::com::letsmidi::monsys::protocol::push::Connect::Clear();
  clear_has_connect();
}
inline const ::com::letsmidi::monsys::protocol::push::Connect& PushMsg::connect() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.connect)
  return connect_ != NULL ? *connect_ : *default_instance_->connect_;
}
inline ::com::letsmidi::monsys::protocol::push::Connect* PushMsg::mutable_connect() {
  set_has_connect();
  if (connect_ == NULL) connect_ = new ::com::letsmidi::monsys::protocol::push::Connect;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.connect)
  return connect_;
}
inline ::com::letsmidi::monsys::protocol::push::Connect* PushMsg::release_connect() {
  clear_has_connect();
  ::com::letsmidi::monsys::protocol::push::Connect* temp = connect_;
  connect_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_connect(::com::letsmidi::monsys::protocol::push::Connect* connect) {
  delete connect_;
  connect_ = connect;
  if (connect) {
    set_has_connect();
  } else {
    clear_has_connect();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.connect)
}

// optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 15;
inline bool PushMsg::has_connect_rsp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PushMsg::set_has_connect_rsp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PushMsg::clear_has_connect_rsp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PushMsg::clear_connect_rsp() {
  if (connect_rsp_ != NULL) connect_rsp_->::com::letsmidi::monsys::protocol::push::ConnectRsp::Clear();
  clear_has_connect_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::ConnectRsp& PushMsg::connect_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.connect_rsp)
  return connect_rsp_ != NULL ? *connect_rsp_ : *default_instance_->connect_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::ConnectRsp* PushMsg::mutable_connect_rsp() {
  set_has_connect_rsp();
  if (connect_rsp_ == NULL) connect_rsp_ = new ::com::letsmidi::monsys::protocol::push::ConnectRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.connect_rsp)
  return connect_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::ConnectRsp* PushMsg::release_connect_rsp() {
  clear_has_connect_rsp();
  ::com::letsmidi::monsys::protocol::push::ConnectRsp* temp = connect_rsp_;
  connect_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_connect_rsp(::com::letsmidi::monsys::protocol::push::ConnectRsp* connect_rsp) {
  delete connect_rsp_;
  connect_rsp_ = connect_rsp;
  if (connect_rsp) {
    set_has_connect_rsp();
  } else {
    clear_has_connect_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.connect_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.GetFgwList get_fgw_list = 16;
inline bool PushMsg::has_get_fgw_list() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PushMsg::set_has_get_fgw_list() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PushMsg::clear_has_get_fgw_list() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PushMsg::clear_get_fgw_list() {
  if (get_fgw_list_ != NULL) get_fgw_list_->::com::letsmidi::monsys::protocol::push::GetFgwList::Clear();
  clear_has_get_fgw_list();
}
inline const ::com::letsmidi::monsys::protocol::push::GetFgwList& PushMsg::get_fgw_list() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.get_fgw_list)
  return get_fgw_list_ != NULL ? *get_fgw_list_ : *default_instance_->get_fgw_list_;
}
inline ::com::letsmidi::monsys::protocol::push::GetFgwList* PushMsg::mutable_get_fgw_list() {
  set_has_get_fgw_list();
  if (get_fgw_list_ == NULL) get_fgw_list_ = new ::com::letsmidi::monsys::protocol::push::GetFgwList;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.get_fgw_list)
  return get_fgw_list_;
}
inline ::com::letsmidi::monsys::protocol::push::GetFgwList* PushMsg::release_get_fgw_list() {
  clear_has_get_fgw_list();
  ::com::letsmidi::monsys::protocol::push::GetFgwList* temp = get_fgw_list_;
  get_fgw_list_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_get_fgw_list(::com::letsmidi::monsys::protocol::push::GetFgwList* get_fgw_list) {
  delete get_fgw_list_;
  get_fgw_list_ = get_fgw_list;
  if (get_fgw_list) {
    set_has_get_fgw_list();
  } else {
    clear_has_get_fgw_list();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.get_fgw_list)
}

// optional .com.letsmidi.monsys.protocol.push.GetFgwListRsp get_fgw_list_rsp = 17;
inline bool PushMsg::has_get_fgw_list_rsp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PushMsg::set_has_get_fgw_list_rsp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PushMsg::clear_has_get_fgw_list_rsp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PushMsg::clear_get_fgw_list_rsp() {
  if (get_fgw_list_rsp_ != NULL) get_fgw_list_rsp_->::com::letsmidi::monsys::protocol::push::GetFgwListRsp::Clear();
  clear_has_get_fgw_list_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::GetFgwListRsp& PushMsg::get_fgw_list_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.get_fgw_list_rsp)
  return get_fgw_list_rsp_ != NULL ? *get_fgw_list_rsp_ : *default_instance_->get_fgw_list_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::GetFgwListRsp* PushMsg::mutable_get_fgw_list_rsp() {
  set_has_get_fgw_list_rsp();
  if (get_fgw_list_rsp_ == NULL) get_fgw_list_rsp_ = new ::com::letsmidi::monsys::protocol::push::GetFgwListRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.get_fgw_list_rsp)
  return get_fgw_list_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::GetFgwListRsp* PushMsg::release_get_fgw_list_rsp() {
  clear_has_get_fgw_list_rsp();
  ::com::letsmidi::monsys::protocol::push::GetFgwListRsp* temp = get_fgw_list_rsp_;
  get_fgw_list_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_get_fgw_list_rsp(::com::letsmidi::monsys::protocol::push::GetFgwListRsp* get_fgw_list_rsp) {
  delete get_fgw_list_rsp_;
  get_fgw_list_rsp_ = get_fgw_list_rsp;
  if (get_fgw_list_rsp) {
    set_has_get_fgw_list_rsp();
  } else {
    clear_has_get_fgw_list_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.get_fgw_list_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.GetDevList get_dev_list = 18;
inline bool PushMsg::has_get_dev_list() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PushMsg::set_has_get_dev_list() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PushMsg::clear_has_get_dev_list() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PushMsg::clear_get_dev_list() {
  if (get_dev_list_ != NULL) get_dev_list_->::com::letsmidi::monsys::protocol::push::GetDevList::Clear();
  clear_has_get_dev_list();
}
inline const ::com::letsmidi::monsys::protocol::push::GetDevList& PushMsg::get_dev_list() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_list)
  return get_dev_list_ != NULL ? *get_dev_list_ : *default_instance_->get_dev_list_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevList* PushMsg::mutable_get_dev_list() {
  set_has_get_dev_list();
  if (get_dev_list_ == NULL) get_dev_list_ = new ::com::letsmidi::monsys::protocol::push::GetDevList;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_list)
  return get_dev_list_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevList* PushMsg::release_get_dev_list() {
  clear_has_get_dev_list();
  ::com::letsmidi::monsys::protocol::push::GetDevList* temp = get_dev_list_;
  get_dev_list_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_get_dev_list(::com::letsmidi::monsys::protocol::push::GetDevList* get_dev_list) {
  delete get_dev_list_;
  get_dev_list_ = get_dev_list;
  if (get_dev_list) {
    set_has_get_dev_list();
  } else {
    clear_has_get_dev_list();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_list)
}

// optional .com.letsmidi.monsys.protocol.push.GetDevListRsp get_dev_list_rsp = 19;
inline bool PushMsg::has_get_dev_list_rsp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PushMsg::set_has_get_dev_list_rsp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PushMsg::clear_has_get_dev_list_rsp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PushMsg::clear_get_dev_list_rsp() {
  if (get_dev_list_rsp_ != NULL) get_dev_list_rsp_->::com::letsmidi::monsys::protocol::push::GetDevListRsp::Clear();
  clear_has_get_dev_list_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::GetDevListRsp& PushMsg::get_dev_list_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_list_rsp)
  return get_dev_list_rsp_ != NULL ? *get_dev_list_rsp_ : *default_instance_->get_dev_list_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevListRsp* PushMsg::mutable_get_dev_list_rsp() {
  set_has_get_dev_list_rsp();
  if (get_dev_list_rsp_ == NULL) get_dev_list_rsp_ = new ::com::letsmidi::monsys::protocol::push::GetDevListRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_list_rsp)
  return get_dev_list_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevListRsp* PushMsg::release_get_dev_list_rsp() {
  clear_has_get_dev_list_rsp();
  ::com::letsmidi::monsys::protocol::push::GetDevListRsp* temp = get_dev_list_rsp_;
  get_dev_list_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_get_dev_list_rsp(::com::letsmidi::monsys::protocol::push::GetDevListRsp* get_dev_list_rsp) {
  delete get_dev_list_rsp_;
  get_dev_list_rsp_ = get_dev_list_rsp;
  if (get_dev_list_rsp) {
    set_has_get_dev_list_rsp();
  } else {
    clear_has_get_dev_list_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_list_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.GetDevInfo get_dev_info = 20;
inline bool PushMsg::has_get_dev_info() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PushMsg::set_has_get_dev_info() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PushMsg::clear_has_get_dev_info() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PushMsg::clear_get_dev_info() {
  if (get_dev_info_ != NULL) get_dev_info_->::com::letsmidi::monsys::protocol::push::GetDevInfo::Clear();
  clear_has_get_dev_info();
}
inline const ::com::letsmidi::monsys::protocol::push::GetDevInfo& PushMsg::get_dev_info() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_info)
  return get_dev_info_ != NULL ? *get_dev_info_ : *default_instance_->get_dev_info_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevInfo* PushMsg::mutable_get_dev_info() {
  set_has_get_dev_info();
  if (get_dev_info_ == NULL) get_dev_info_ = new ::com::letsmidi::monsys::protocol::push::GetDevInfo;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_info)
  return get_dev_info_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevInfo* PushMsg::release_get_dev_info() {
  clear_has_get_dev_info();
  ::com::letsmidi::monsys::protocol::push::GetDevInfo* temp = get_dev_info_;
  get_dev_info_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_get_dev_info(::com::letsmidi::monsys::protocol::push::GetDevInfo* get_dev_info) {
  delete get_dev_info_;
  get_dev_info_ = get_dev_info;
  if (get_dev_info) {
    set_has_get_dev_info();
  } else {
    clear_has_get_dev_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_info)
}

// optional .com.letsmidi.monsys.protocol.push.GetDevInfoRsp get_dev_info_rsp = 21;
inline bool PushMsg::has_get_dev_info_rsp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PushMsg::set_has_get_dev_info_rsp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PushMsg::clear_has_get_dev_info_rsp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PushMsg::clear_get_dev_info_rsp() {
  if (get_dev_info_rsp_ != NULL) get_dev_info_rsp_->::com::letsmidi::monsys::protocol::push::GetDevInfoRsp::Clear();
  clear_has_get_dev_info_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp& PushMsg::get_dev_info_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_info_rsp)
  return get_dev_info_rsp_ != NULL ? *get_dev_info_rsp_ : *default_instance_->get_dev_info_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* PushMsg::mutable_get_dev_info_rsp() {
  set_has_get_dev_info_rsp();
  if (get_dev_info_rsp_ == NULL) get_dev_info_rsp_ = new ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_info_rsp)
  return get_dev_info_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* PushMsg::release_get_dev_info_rsp() {
  clear_has_get_dev_info_rsp();
  ::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* temp = get_dev_info_rsp_;
  get_dev_info_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_get_dev_info_rsp(::com::letsmidi::monsys::protocol::push::GetDevInfoRsp* get_dev_info_rsp) {
  delete get_dev_info_rsp_;
  get_dev_info_rsp_ = get_dev_info_rsp;
  if (get_dev_info_rsp) {
    set_has_get_dev_info_rsp();
  } else {
    clear_has_get_dev_info_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.get_dev_info_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.SetDevInfo set_dev_info = 22;
inline bool PushMsg::has_set_dev_info() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PushMsg::set_has_set_dev_info() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PushMsg::clear_has_set_dev_info() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PushMsg::clear_set_dev_info() {
  if (set_dev_info_ != NULL) set_dev_info_->::com::letsmidi::monsys::protocol::push::SetDevInfo::Clear();
  clear_has_set_dev_info();
}
inline const ::com::letsmidi::monsys::protocol::push::SetDevInfo& PushMsg::set_dev_info() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.set_dev_info)
  return set_dev_info_ != NULL ? *set_dev_info_ : *default_instance_->set_dev_info_;
}
inline ::com::letsmidi::monsys::protocol::push::SetDevInfo* PushMsg::mutable_set_dev_info() {
  set_has_set_dev_info();
  if (set_dev_info_ == NULL) set_dev_info_ = new ::com::letsmidi::monsys::protocol::push::SetDevInfo;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.set_dev_info)
  return set_dev_info_;
}
inline ::com::letsmidi::monsys::protocol::push::SetDevInfo* PushMsg::release_set_dev_info() {
  clear_has_set_dev_info();
  ::com::letsmidi::monsys::protocol::push::SetDevInfo* temp = set_dev_info_;
  set_dev_info_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_set_dev_info(::com::letsmidi::monsys::protocol::push::SetDevInfo* set_dev_info) {
  delete set_dev_info_;
  set_dev_info_ = set_dev_info;
  if (set_dev_info) {
    set_has_set_dev_info();
  } else {
    clear_has_set_dev_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.set_dev_info)
}

// optional .com.letsmidi.monsys.protocol.push.SetDevInfoRsp set_dev_info_rsp = 23;
inline bool PushMsg::has_set_dev_info_rsp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PushMsg::set_has_set_dev_info_rsp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PushMsg::clear_has_set_dev_info_rsp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PushMsg::clear_set_dev_info_rsp() {
  if (set_dev_info_rsp_ != NULL) set_dev_info_rsp_->::com::letsmidi::monsys::protocol::push::SetDevInfoRsp::Clear();
  clear_has_set_dev_info_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp& PushMsg::set_dev_info_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.set_dev_info_rsp)
  return set_dev_info_rsp_ != NULL ? *set_dev_info_rsp_ : *default_instance_->set_dev_info_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* PushMsg::mutable_set_dev_info_rsp() {
  set_has_set_dev_info_rsp();
  if (set_dev_info_rsp_ == NULL) set_dev_info_rsp_ = new ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.set_dev_info_rsp)
  return set_dev_info_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* PushMsg::release_set_dev_info_rsp() {
  clear_has_set_dev_info_rsp();
  ::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* temp = set_dev_info_rsp_;
  set_dev_info_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_set_dev_info_rsp(::com::letsmidi::monsys::protocol::push::SetDevInfoRsp* set_dev_info_rsp) {
  delete set_dev_info_rsp_;
  set_dev_info_rsp_ = set_dev_info_rsp;
  if (set_dev_info_rsp) {
    set_has_set_dev_info_rsp();
  } else {
    clear_has_set_dev_info_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.set_dev_info_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.ClientLogin client_login = 24;
inline bool PushMsg::has_client_login() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PushMsg::set_has_client_login() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PushMsg::clear_has_client_login() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PushMsg::clear_client_login() {
  if (client_login_ != NULL) client_login_->::com::letsmidi::monsys::protocol::push::ClientLogin::Clear();
  clear_has_client_login();
}
inline const ::com::letsmidi::monsys::protocol::push::ClientLogin& PushMsg::client_login() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.client_login)
  return client_login_ != NULL ? *client_login_ : *default_instance_->client_login_;
}
inline ::com::letsmidi::monsys::protocol::push::ClientLogin* PushMsg::mutable_client_login() {
  set_has_client_login();
  if (client_login_ == NULL) client_login_ = new ::com::letsmidi::monsys::protocol::push::ClientLogin;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.client_login)
  return client_login_;
}
inline ::com::letsmidi::monsys::protocol::push::ClientLogin* PushMsg::release_client_login() {
  clear_has_client_login();
  ::com::letsmidi::monsys::protocol::push::ClientLogin* temp = client_login_;
  client_login_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_client_login(::com::letsmidi::monsys::protocol::push::ClientLogin* client_login) {
  delete client_login_;
  client_login_ = client_login;
  if (client_login) {
    set_has_client_login();
  } else {
    clear_has_client_login();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.client_login)
}

// optional .com.letsmidi.monsys.protocol.push.ClientLoginRsp client_login_rsp = 25;
inline bool PushMsg::has_client_login_rsp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PushMsg::set_has_client_login_rsp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PushMsg::clear_has_client_login_rsp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PushMsg::clear_client_login_rsp() {
  if (client_login_rsp_ != NULL) client_login_rsp_->::com::letsmidi::monsys::protocol::push::ClientLoginRsp::Clear();
  clear_has_client_login_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::ClientLoginRsp& PushMsg::client_login_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.client_login_rsp)
  return client_login_rsp_ != NULL ? *client_login_rsp_ : *default_instance_->client_login_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::ClientLoginRsp* PushMsg::mutable_client_login_rsp() {
  set_has_client_login_rsp();
  if (client_login_rsp_ == NULL) client_login_rsp_ = new ::com::letsmidi::monsys::protocol::push::ClientLoginRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.client_login_rsp)
  return client_login_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::ClientLoginRsp* PushMsg::release_client_login_rsp() {
  clear_has_client_login_rsp();
  ::com::letsmidi::monsys::protocol::push::ClientLoginRsp* temp = client_login_rsp_;
  client_login_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_client_login_rsp(::com::letsmidi::monsys::protocol::push::ClientLoginRsp* client_login_rsp) {
  delete client_login_rsp_;
  client_login_rsp_ = client_login_rsp;
  if (client_login_rsp) {
    set_has_client_login_rsp();
  } else {
    clear_has_client_login_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.client_login_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.UserRegister user_register = 26;
inline bool PushMsg::has_user_register() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PushMsg::set_has_user_register() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PushMsg::clear_has_user_register() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PushMsg::clear_user_register() {
  if (user_register_ != NULL) user_register_->::com::letsmidi::monsys::protocol::push::UserRegister::Clear();
  clear_has_user_register();
}
inline const ::com::letsmidi::monsys::protocol::push::UserRegister& PushMsg::user_register() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.user_register)
  return user_register_ != NULL ? *user_register_ : *default_instance_->user_register_;
}
inline ::com::letsmidi::monsys::protocol::push::UserRegister* PushMsg::mutable_user_register() {
  set_has_user_register();
  if (user_register_ == NULL) user_register_ = new ::com::letsmidi::monsys::protocol::push::UserRegister;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.user_register)
  return user_register_;
}
inline ::com::letsmidi::monsys::protocol::push::UserRegister* PushMsg::release_user_register() {
  clear_has_user_register();
  ::com::letsmidi::monsys::protocol::push::UserRegister* temp = user_register_;
  user_register_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_user_register(::com::letsmidi::monsys::protocol::push::UserRegister* user_register) {
  delete user_register_;
  user_register_ = user_register;
  if (user_register) {
    set_has_user_register();
  } else {
    clear_has_user_register();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.user_register)
}

// optional .com.letsmidi.monsys.protocol.push.UserRegisterRsp user_register_rsp = 27;
inline bool PushMsg::has_user_register_rsp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PushMsg::set_has_user_register_rsp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PushMsg::clear_has_user_register_rsp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PushMsg::clear_user_register_rsp() {
  if (user_register_rsp_ != NULL) user_register_rsp_->::com::letsmidi::monsys::protocol::push::UserRegisterRsp::Clear();
  clear_has_user_register_rsp();
}
inline const ::com::letsmidi::monsys::protocol::push::UserRegisterRsp& PushMsg::user_register_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.user_register_rsp)
  return user_register_rsp_ != NULL ? *user_register_rsp_ : *default_instance_->user_register_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::UserRegisterRsp* PushMsg::mutable_user_register_rsp() {
  set_has_user_register_rsp();
  if (user_register_rsp_ == NULL) user_register_rsp_ = new ::com::letsmidi::monsys::protocol::push::UserRegisterRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.user_register_rsp)
  return user_register_rsp_;
}
inline ::com::letsmidi::monsys::protocol::push::UserRegisterRsp* PushMsg::release_user_register_rsp() {
  clear_has_user_register_rsp();
  ::com::letsmidi::monsys::protocol::push::UserRegisterRsp* temp = user_register_rsp_;
  user_register_rsp_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_user_register_rsp(::com::letsmidi::monsys::protocol::push::UserRegisterRsp* user_register_rsp) {
  delete user_register_rsp_;
  user_register_rsp_ = user_register_rsp;
  if (user_register_rsp) {
    set_has_user_register_rsp();
  } else {
    clear_has_user_register_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.user_register_rsp)
}

// optional .com.letsmidi.monsys.protocol.push.Heartbeat heartbeat = 28;
inline bool PushMsg::has_heartbeat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PushMsg::set_has_heartbeat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PushMsg::clear_has_heartbeat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PushMsg::clear_heartbeat() {
  if (heartbeat_ != NULL) heartbeat_->::com::letsmidi::monsys::protocol::push::Heartbeat::Clear();
  clear_has_heartbeat();
}
inline const ::com::letsmidi::monsys::protocol::push::Heartbeat& PushMsg::heartbeat() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.PushMsg.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_ : *default_instance_->heartbeat_;
}
inline ::com::letsmidi::monsys::protocol::push::Heartbeat* PushMsg::mutable_heartbeat() {
  set_has_heartbeat();
  if (heartbeat_ == NULL) heartbeat_ = new ::com::letsmidi::monsys::protocol::push::Heartbeat;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.PushMsg.heartbeat)
  return heartbeat_;
}
inline ::com::letsmidi::monsys::protocol::push::Heartbeat* PushMsg::release_heartbeat() {
  clear_has_heartbeat();
  ::com::letsmidi::monsys::protocol::push::Heartbeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_heartbeat(::com::letsmidi::monsys::protocol::push::Heartbeat* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    set_has_heartbeat();
  } else {
    clear_has_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.PushMsg.heartbeat)
}

// -------------------------------------------------------------------

// Login

// required string device_id = 1;
inline bool Login::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& Login::device_id() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.Login.device_id)
  return *device_id_;
}
inline void Login::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.Login.device_id)
}
inline void Login::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.Login.device_id)
}
inline void Login::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.Login.device_id)
}
inline ::std::string* Login::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.Login.device_id)
  return device_id_;
}
inline ::std::string* Login::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.Login.device_id)
}

// -------------------------------------------------------------------

// LoginRsp

// required int32 code = 1;
inline bool LoginRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 LoginRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.LoginRsp.code)
  return code_;
}
inline void LoginRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.LoginRsp.code)
}

// -------------------------------------------------------------------

// ClientLogin

// required string account = 1;
inline bool ClientLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ClientLogin::account() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.ClientLogin.account)
  return *account_;
}
inline void ClientLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.ClientLogin.account)
}
inline void ClientLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.ClientLogin.account)
}
inline void ClientLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.ClientLogin.account)
}
inline ::std::string* ClientLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.ClientLogin.account)
  return account_;
}
inline ::std::string* ClientLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.ClientLogin.account)
}

// required string password = 2;
inline bool ClientLogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientLogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientLogin::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& ClientLogin::password() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.ClientLogin.password)
  return *password_;
}
inline void ClientLogin::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.ClientLogin.password)
}
inline void ClientLogin::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.ClientLogin.password)
}
inline void ClientLogin::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.ClientLogin.password)
}
inline ::std::string* ClientLogin::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.ClientLogin.password)
  return password_;
}
inline ::std::string* ClientLogin::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientLogin::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.ClientLogin.password)
}

// -------------------------------------------------------------------

// ClientLoginRsp

// required int32 code = 1;
inline bool ClientLoginRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientLoginRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientLoginRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientLoginRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ClientLoginRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.ClientLoginRsp.code)
  return code_;
}
inline void ClientLoginRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.ClientLoginRsp.code)
}

// repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
inline int ClientLoginRsp::fgw_infos_size() const {
  return fgw_infos_.size();
}
inline void ClientLoginRsp::clear_fgw_infos() {
  fgw_infos_.Clear();
}
inline const ::com::letsmidi::monsys::protocol::push::FGatewayInfo& ClientLoginRsp::fgw_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.ClientLoginRsp.fgw_infos)
  return fgw_infos_.Get(index);
}
inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* ClientLoginRsp::mutable_fgw_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.ClientLoginRsp.fgw_infos)
  return fgw_infos_.Mutable(index);
}
inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* ClientLoginRsp::add_fgw_infos() {
  // @@protoc_insertion_point(field_add:com.letsmidi.monsys.protocol.push.ClientLoginRsp.fgw_infos)
  return fgw_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >&
ClientLoginRsp::fgw_infos() const {
  // @@protoc_insertion_point(field_list:com.letsmidi.monsys.protocol.push.ClientLoginRsp.fgw_infos)
  return fgw_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >*
ClientLoginRsp::mutable_fgw_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.letsmidi.monsys.protocol.push.ClientLoginRsp.fgw_infos)
  return &fgw_infos_;
}

// -------------------------------------------------------------------

// Bind

// required string device_id = 1;
inline bool Bind::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bind::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bind::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bind::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& Bind::device_id() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.Bind.device_id)
  return *device_id_;
}
inline void Bind::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.Bind.device_id)
}
inline void Bind::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.Bind.device_id)
}
inline void Bind::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.Bind.device_id)
}
inline ::std::string* Bind::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.Bind.device_id)
  return device_id_;
}
inline ::std::string* Bind::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Bind::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.Bind.device_id)
}

// -------------------------------------------------------------------

// BindRsp

// required int32 code = 1;
inline bool BindRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 BindRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.BindRsp.code)
  return code_;
}
inline void BindRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.BindRsp.code)
}

// -------------------------------------------------------------------

// Connect

// required string device_id = 1;
inline bool Connect::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connect::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connect::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connect::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& Connect::device_id() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.Connect.device_id)
  return *device_id_;
}
inline void Connect::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.Connect.device_id)
}
inline void Connect::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.Connect.device_id)
}
inline void Connect::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.Connect.device_id)
}
inline ::std::string* Connect::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.Connect.device_id)
  return device_id_;
}
inline ::std::string* Connect::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Connect::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.Connect.device_id)
}

// -------------------------------------------------------------------

// ConnectRsp

// required int32 code = 1;
inline bool ConnectRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ConnectRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.ConnectRsp.code)
  return code_;
}
inline void ConnectRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.ConnectRsp.code)
}

// -------------------------------------------------------------------

// GetFgwList

// -------------------------------------------------------------------

// GetFgwListRsp

// required int32 code = 1;
inline bool GetFgwListRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFgwListRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFgwListRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFgwListRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetFgwListRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetFgwListRsp.code)
  return code_;
}
inline void GetFgwListRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.GetFgwListRsp.code)
}

// repeated .com.letsmidi.monsys.protocol.push.FGatewayInfo fgw_infos = 2;
inline int GetFgwListRsp::fgw_infos_size() const {
  return fgw_infos_.size();
}
inline void GetFgwListRsp::clear_fgw_infos() {
  fgw_infos_.Clear();
}
inline const ::com::letsmidi::monsys::protocol::push::FGatewayInfo& GetFgwListRsp::fgw_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetFgwListRsp.fgw_infos)
  return fgw_infos_.Get(index);
}
inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* GetFgwListRsp::mutable_fgw_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.GetFgwListRsp.fgw_infos)
  return fgw_infos_.Mutable(index);
}
inline ::com::letsmidi::monsys::protocol::push::FGatewayInfo* GetFgwListRsp::add_fgw_infos() {
  // @@protoc_insertion_point(field_add:com.letsmidi.monsys.protocol.push.GetFgwListRsp.fgw_infos)
  return fgw_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >&
GetFgwListRsp::fgw_infos() const {
  // @@protoc_insertion_point(field_list:com.letsmidi.monsys.protocol.push.GetFgwListRsp.fgw_infos)
  return fgw_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::FGatewayInfo >*
GetFgwListRsp::mutable_fgw_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.letsmidi.monsys.protocol.push.GetFgwListRsp.fgw_infos)
  return &fgw_infos_;
}

// -------------------------------------------------------------------

// GetDevList

// required string device_id = 1;
inline bool GetDevList::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDevList::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDevList::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDevList::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& GetDevList::device_id() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetDevList.device_id)
  return *device_id_;
}
inline void GetDevList::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.GetDevList.device_id)
}
inline void GetDevList::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.GetDevList.device_id)
}
inline void GetDevList::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.GetDevList.device_id)
}
inline ::std::string* GetDevList::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.GetDevList.device_id)
  return device_id_;
}
inline ::std::string* GetDevList::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetDevList::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.GetDevList.device_id)
}

// -------------------------------------------------------------------

// GetDevListRsp

// required int32 code = 1;
inline bool GetDevListRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDevListRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDevListRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDevListRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetDevListRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetDevListRsp.code)
  return code_;
}
inline void GetDevListRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.GetDevListRsp.code)
}

// repeated .com.letsmidi.monsys.protocol.push.DeviceInfo dev_infos = 2;
inline int GetDevListRsp::dev_infos_size() const {
  return dev_infos_.size();
}
inline void GetDevListRsp::clear_dev_infos() {
  dev_infos_.Clear();
}
inline const ::com::letsmidi::monsys::protocol::push::DeviceInfo& GetDevListRsp::dev_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetDevListRsp.dev_infos)
  return dev_infos_.Get(index);
}
inline ::com::letsmidi::monsys::protocol::push::DeviceInfo* GetDevListRsp::mutable_dev_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.GetDevListRsp.dev_infos)
  return dev_infos_.Mutable(index);
}
inline ::com::letsmidi::monsys::protocol::push::DeviceInfo* GetDevListRsp::add_dev_infos() {
  // @@protoc_insertion_point(field_add:com.letsmidi.monsys.protocol.push.GetDevListRsp.dev_infos)
  return dev_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::DeviceInfo >&
GetDevListRsp::dev_infos() const {
  // @@protoc_insertion_point(field_list:com.letsmidi.monsys.protocol.push.GetDevListRsp.dev_infos)
  return dev_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::DeviceInfo >*
GetDevListRsp::mutable_dev_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.letsmidi.monsys.protocol.push.GetDevListRsp.dev_infos)
  return &dev_infos_;
}

// -------------------------------------------------------------------

// GetDevInfo

// required int32 addr = 1;
inline bool GetDevInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDevInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDevInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDevInfo::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 GetDevInfo::addr() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetDevInfo.addr)
  return addr_;
}
inline void GetDevInfo::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.GetDevInfo.addr)
}

// repeated int32 item_ids = 2 [packed = true];
inline int GetDevInfo::item_ids_size() const {
  return item_ids_.size();
}
inline void GetDevInfo::clear_item_ids() {
  item_ids_.Clear();
}
inline ::google::protobuf::int32 GetDevInfo::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetDevInfo.item_ids)
  return item_ids_.Get(index);
}
inline void GetDevInfo::set_item_ids(int index, ::google::protobuf::int32 value) {
  item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.GetDevInfo.item_ids)
}
inline void GetDevInfo::add_item_ids(::google::protobuf::int32 value) {
  item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:com.letsmidi.monsys.protocol.push.GetDevInfo.item_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetDevInfo::item_ids() const {
  // @@protoc_insertion_point(field_list:com.letsmidi.monsys.protocol.push.GetDevInfo.item_ids)
  return item_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetDevInfo::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.letsmidi.monsys.protocol.push.GetDevInfo.item_ids)
  return &item_ids_;
}

// -------------------------------------------------------------------

// GetDevInfoRsp

// required int32 code = 1;
inline bool GetDevInfoRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDevInfoRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDevInfoRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDevInfoRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetDevInfoRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetDevInfoRsp.code)
  return code_;
}
inline void GetDevInfoRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.GetDevInfoRsp.code)
}

// repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
inline int GetDevInfoRsp::id_value_pairs_size() const {
  return id_value_pairs_.size();
}
inline void GetDevInfoRsp::clear_id_value_pairs() {
  id_value_pairs_.Clear();
}
inline const ::com::letsmidi::monsys::protocol::push::IdValuePair& GetDevInfoRsp::id_value_pairs(int index) const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.GetDevInfoRsp.id_value_pairs)
  return id_value_pairs_.Get(index);
}
inline ::com::letsmidi::monsys::protocol::push::IdValuePair* GetDevInfoRsp::mutable_id_value_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.GetDevInfoRsp.id_value_pairs)
  return id_value_pairs_.Mutable(index);
}
inline ::com::letsmidi::monsys::protocol::push::IdValuePair* GetDevInfoRsp::add_id_value_pairs() {
  // @@protoc_insertion_point(field_add:com.letsmidi.monsys.protocol.push.GetDevInfoRsp.id_value_pairs)
  return id_value_pairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >&
GetDevInfoRsp::id_value_pairs() const {
  // @@protoc_insertion_point(field_list:com.letsmidi.monsys.protocol.push.GetDevInfoRsp.id_value_pairs)
  return id_value_pairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >*
GetDevInfoRsp::mutable_id_value_pairs() {
  // @@protoc_insertion_point(field_mutable_list:com.letsmidi.monsys.protocol.push.GetDevInfoRsp.id_value_pairs)
  return &id_value_pairs_;
}

// -------------------------------------------------------------------

// SetDevInfo

// required int32 addr = 1;
inline bool SetDevInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetDevInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetDevInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetDevInfo::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 SetDevInfo::addr() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.SetDevInfo.addr)
  return addr_;
}
inline void SetDevInfo::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.SetDevInfo.addr)
}

// repeated .com.letsmidi.monsys.protocol.push.IdValuePair id_value_pairs = 2;
inline int SetDevInfo::id_value_pairs_size() const {
  return id_value_pairs_.size();
}
inline void SetDevInfo::clear_id_value_pairs() {
  id_value_pairs_.Clear();
}
inline const ::com::letsmidi::monsys::protocol::push::IdValuePair& SetDevInfo::id_value_pairs(int index) const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.SetDevInfo.id_value_pairs)
  return id_value_pairs_.Get(index);
}
inline ::com::letsmidi::monsys::protocol::push::IdValuePair* SetDevInfo::mutable_id_value_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.SetDevInfo.id_value_pairs)
  return id_value_pairs_.Mutable(index);
}
inline ::com::letsmidi::monsys::protocol::push::IdValuePair* SetDevInfo::add_id_value_pairs() {
  // @@protoc_insertion_point(field_add:com.letsmidi.monsys.protocol.push.SetDevInfo.id_value_pairs)
  return id_value_pairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >&
SetDevInfo::id_value_pairs() const {
  // @@protoc_insertion_point(field_list:com.letsmidi.monsys.protocol.push.SetDevInfo.id_value_pairs)
  return id_value_pairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::letsmidi::monsys::protocol::push::IdValuePair >*
SetDevInfo::mutable_id_value_pairs() {
  // @@protoc_insertion_point(field_mutable_list:com.letsmidi.monsys.protocol.push.SetDevInfo.id_value_pairs)
  return &id_value_pairs_;
}

// -------------------------------------------------------------------

// SetDevInfoRsp

// required int32 code = 1;
inline bool SetDevInfoRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetDevInfoRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetDevInfoRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetDevInfoRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 SetDevInfoRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.SetDevInfoRsp.code)
  return code_;
}
inline void SetDevInfoRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.SetDevInfoRsp.code)
}

// -------------------------------------------------------------------

// UserRegister

// required string nickname = 1;
inline bool UserRegister::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRegister::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRegister::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRegister::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& UserRegister::nickname() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.UserRegister.nickname)
  return *nickname_;
}
inline void UserRegister::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.UserRegister.nickname)
}
inline void UserRegister::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.UserRegister.nickname)
}
inline void UserRegister::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.UserRegister.nickname)
}
inline ::std::string* UserRegister::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.UserRegister.nickname)
  return nickname_;
}
inline ::std::string* UserRegister::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRegister::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.UserRegister.nickname)
}

// required string account = 2;
inline bool UserRegister::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRegister::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRegister::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRegister::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& UserRegister::account() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.UserRegister.account)
  return *account_;
}
inline void UserRegister::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.UserRegister.account)
}
inline void UserRegister::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.UserRegister.account)
}
inline void UserRegister::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.UserRegister.account)
}
inline ::std::string* UserRegister::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.UserRegister.account)
  return account_;
}
inline ::std::string* UserRegister::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRegister::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.UserRegister.account)
}

// required string password = 3;
inline bool UserRegister::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRegister::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRegister::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRegister::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& UserRegister::password() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.UserRegister.password)
  return *password_;
}
inline void UserRegister::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.UserRegister.password)
}
inline void UserRegister::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.push.UserRegister.password)
}
inline void UserRegister::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.push.UserRegister.password)
}
inline ::std::string* UserRegister::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.push.UserRegister.password)
  return password_;
}
inline ::std::string* UserRegister::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRegister::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.push.UserRegister.password)
}

// -------------------------------------------------------------------

// UserRegisterRsp

// required int32 code = 1;
inline bool UserRegisterRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRegisterRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRegisterRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRegisterRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 UserRegisterRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.UserRegisterRsp.code)
  return code_;
}
inline void UserRegisterRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.UserRegisterRsp.code)
}

// -------------------------------------------------------------------

// Heartbeat

// -------------------------------------------------------------------

// Response

// required int32 code = 1;
inline bool Response::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Response::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.push.Response.code)
  return code_;
}
inline void Response::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.push.Response.code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace push
}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::letsmidi::monsys::protocol::push::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::letsmidi::monsys::protocol::push::MsgType>() {
  return ::com::letsmidi::monsys::protocol::push::MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_push_2eproto__INCLUDED
