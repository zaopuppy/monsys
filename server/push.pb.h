// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto

#ifndef PROTOBUF_push_2eproto__INCLUDED
#define PROTOBUF_push_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_push_2eproto();
void protobuf_AssignDesc_push_2eproto();
void protobuf_ShutdownFile_push_2eproto();

class PushMsg;
class Login;
class Bind;
class Connect;
class GetDevList;
class GetDevInfo;
class SetDevInfo;
class Response;

enum PushMsg_MsgType {
  PushMsg_MsgType_LOGIN = 1,
  PushMsg_MsgType_BIND = 2,
  PushMsg_MsgType_CONNECT = 3,
  PushMsg_MsgType_GET_DEV_LIST = 4,
  PushMsg_MsgType_GET_DEV_INFO = 5,
  PushMsg_MsgType_SET_DEV_INFO = 6,
  PushMsg_MsgType_RESPONSE = 99
};
bool PushMsg_MsgType_IsValid(int value);
const PushMsg_MsgType PushMsg_MsgType_MsgType_MIN = PushMsg_MsgType_LOGIN;
const PushMsg_MsgType PushMsg_MsgType_MsgType_MAX = PushMsg_MsgType_RESPONSE;
const int PushMsg_MsgType_MsgType_ARRAYSIZE = PushMsg_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PushMsg_MsgType_descriptor();
inline const ::std::string& PushMsg_MsgType_Name(PushMsg_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PushMsg_MsgType_descriptor(), value);
}
inline bool PushMsg_MsgType_Parse(
    const ::std::string& name, PushMsg_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PushMsg_MsgType>(
    PushMsg_MsgType_descriptor(), name, value);
}
// ===================================================================

class PushMsg : public ::google::protobuf::Message {
 public:
  PushMsg();
  virtual ~PushMsg();

  PushMsg(const PushMsg& from);

  inline PushMsg& operator=(const PushMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushMsg& default_instance();

  void Swap(PushMsg* other);

  // implements Message ----------------------------------------------

  PushMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushMsg& from);
  void MergeFrom(const PushMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PushMsg_MsgType MsgType;
  static const MsgType LOGIN = PushMsg_MsgType_LOGIN;
  static const MsgType BIND = PushMsg_MsgType_BIND;
  static const MsgType CONNECT = PushMsg_MsgType_CONNECT;
  static const MsgType GET_DEV_LIST = PushMsg_MsgType_GET_DEV_LIST;
  static const MsgType GET_DEV_INFO = PushMsg_MsgType_GET_DEV_INFO;
  static const MsgType SET_DEV_INFO = PushMsg_MsgType_SET_DEV_INFO;
  static const MsgType RESPONSE = PushMsg_MsgType_RESPONSE;
  static inline bool MsgType_IsValid(int value) {
    return PushMsg_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    PushMsg_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    PushMsg_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    PushMsg_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return PushMsg_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return PushMsg_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return PushMsg_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.letsmidi.monsys.protocol.PushMsg.MsgType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::letsmidi::monsys::protocol::PushMsg_MsgType type() const;
  inline void set_type(::com::letsmidi::monsys::protocol::PushMsg_MsgType value);

  // optional .com.letsmidi.monsys.protocol.Login login = 2;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 2;
  inline const ::com::letsmidi::monsys::protocol::Login& login() const;
  inline ::com::letsmidi::monsys::protocol::Login* mutable_login();
  inline ::com::letsmidi::monsys::protocol::Login* release_login();
  inline void set_allocated_login(::com::letsmidi::monsys::protocol::Login* login);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.PushMsg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_login();
  inline void clear_has_login();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::com::letsmidi::monsys::protocol::Login* login_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static PushMsg* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.Login)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* device_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Bind : public ::google::protobuf::Message {
 public:
  Bind();
  virtual ~Bind();

  Bind(const Bind& from);

  inline Bind& operator=(const Bind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bind& default_instance();

  void Swap(Bind* other);

  // implements Message ----------------------------------------------

  Bind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bind& from);
  void MergeFrom(const Bind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.Bind)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* device_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Bind* default_instance_;
};
// -------------------------------------------------------------------

class Connect : public ::google::protobuf::Message {
 public:
  Connect();
  virtual ~Connect();

  Connect(const Connect& from);

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();

  void Swap(Connect* other);

  // implements Message ----------------------------------------------

  Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.Connect)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* device_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Connect* default_instance_;
};
// -------------------------------------------------------------------

class GetDevList : public ::google::protobuf::Message {
 public:
  GetDevList();
  virtual ~GetDevList();

  GetDevList(const GetDevList& from);

  inline GetDevList& operator=(const GetDevList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDevList& default_instance();

  void Swap(GetDevList* other);

  // implements Message ----------------------------------------------

  GetDevList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDevList& from);
  void MergeFrom(const GetDevList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.GetDevList)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* device_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetDevList* default_instance_;
};
// -------------------------------------------------------------------

class GetDevInfo : public ::google::protobuf::Message {
 public:
  GetDevInfo();
  virtual ~GetDevInfo();

  GetDevInfo(const GetDevInfo& from);

  inline GetDevInfo& operator=(const GetDevInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDevInfo& default_instance();

  void Swap(GetDevInfo* other);

  // implements Message ----------------------------------------------

  GetDevInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDevInfo& from);
  void MergeFrom(const GetDevInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.GetDevInfo)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static GetDevInfo* default_instance_;
};
// -------------------------------------------------------------------

class SetDevInfo : public ::google::protobuf::Message {
 public:
  SetDevInfo();
  virtual ~SetDevInfo();

  SetDevInfo(const SetDevInfo& from);

  inline SetDevInfo& operator=(const SetDevInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDevInfo& default_instance();

  void Swap(SetDevInfo* other);

  // implements Message ----------------------------------------------

  SetDevInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetDevInfo& from);
  void MergeFrom(const SetDevInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.SetDevInfo)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static SetDevInfo* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.Response)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* desc_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_push_2eproto();
  friend void protobuf_AssignDesc_push_2eproto();
  friend void protobuf_ShutdownFile_push_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// PushMsg

// required .com.letsmidi.monsys.protocol.PushMsg.MsgType type = 1;
inline bool PushMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::letsmidi::monsys::protocol::PushMsg_MsgType PushMsg::type() const {
  return static_cast< ::com::letsmidi::monsys::protocol::PushMsg_MsgType >(type_);
}
inline void PushMsg::set_type(::com::letsmidi::monsys::protocol::PushMsg_MsgType value) {
  assert(::com::letsmidi::monsys::protocol::PushMsg_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .com.letsmidi.monsys.protocol.Login login = 2;
inline bool PushMsg::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushMsg::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushMsg::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushMsg::clear_login() {
  if (login_ != NULL) login_->::com::letsmidi::monsys::protocol::Login::Clear();
  clear_has_login();
}
inline const ::com::letsmidi::monsys::protocol::Login& PushMsg::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::com::letsmidi::monsys::protocol::Login* PushMsg::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::com::letsmidi::monsys::protocol::Login;
  return login_;
}
inline ::com::letsmidi::monsys::protocol::Login* PushMsg::release_login() {
  clear_has_login();
  ::com::letsmidi::monsys::protocol::Login* temp = login_;
  login_ = NULL;
  return temp;
}
inline void PushMsg::set_allocated_login(::com::letsmidi::monsys::protocol::Login* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
}

// -------------------------------------------------------------------

// Login

// required string device_id = 1;
inline bool Login::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& Login::device_id() const {
  return *device_id_;
}
inline void Login::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void Login::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void Login::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* Login::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Bind

// required string device_id = 1;
inline bool Bind::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bind::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bind::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bind::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& Bind::device_id() const {
  return *device_id_;
}
inline void Bind::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void Bind::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void Bind::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bind::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* Bind::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bind::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Connect

// required string device_id = 1;
inline bool Connect::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connect::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connect::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connect::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& Connect::device_id() const {
  return *device_id_;
}
inline void Connect::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void Connect::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void Connect::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connect::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* Connect::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Connect::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetDevList

// required string device_id = 1;
inline bool GetDevList::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDevList::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDevList::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDevList::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& GetDevList::device_id() const {
  return *device_id_;
}
inline void GetDevList::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void GetDevList::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void GetDevList::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetDevList::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* GetDevList::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetDevList::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetDevInfo

// required int32 addr = 1;
inline bool GetDevInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDevInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDevInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDevInfo::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 GetDevInfo::addr() const {
  return addr_;
}
inline void GetDevInfo::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
}

// -------------------------------------------------------------------

// SetDevInfo

// required int32 addr = 1;
inline bool SetDevInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetDevInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetDevInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetDevInfo::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 SetDevInfo::addr() const {
  return addr_;
}
inline void SetDevInfo::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
}

// -------------------------------------------------------------------

// Response

// required int32 code = 1;
inline bool Response::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Response::code() const {
  return code_;
}
inline void Response::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// required string desc = 2;
inline bool Response::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& Response::desc() const {
  return *desc_;
}
inline void Response::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Response::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Response::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* Response::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::letsmidi::monsys::protocol::PushMsg_MsgType>() {
  return ::com::letsmidi::monsys::protocol::PushMsg_MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_push_2eproto__INCLUDED
