// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

package com.letsmidi.monsys.protocol.route;

public final class Route {
  private Route() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.letsmidi.monsys.protocol.route.MsgType}
   */
  public enum MsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>REQ_TOKEN = 1;</code>
     */
    REQ_TOKEN(0, 1),
    /**
     * <code>REQ_TOKEN_RSP = 2;</code>
     */
    REQ_TOKEN_RSP(1, 2),
    /**
     * <code>CONNECT = 3;</code>
     */
    CONNECT(2, 3),
    /**
     * <code>CONNECT_RSP = 4;</code>
     */
    CONNECT_RSP(3, 4),
    ;

    /**
     * <code>REQ_TOKEN = 1;</code>
     */
    public static final int REQ_TOKEN_VALUE = 1;
    /**
     * <code>REQ_TOKEN_RSP = 2;</code>
     */
    public static final int REQ_TOKEN_RSP_VALUE = 2;
    /**
     * <code>CONNECT = 3;</code>
     */
    public static final int CONNECT_VALUE = 3;
    /**
     * <code>CONNECT_RSP = 4;</code>
     */
    public static final int CONNECT_RSP_VALUE = 4;


    public final int getNumber() { return value; }

    public static MsgType valueOf(int value) {
      switch (value) {
        case 1: return REQ_TOKEN;
        case 2: return REQ_TOKEN_RSP;
        case 3: return CONNECT;
        case 4: return CONNECT_RSP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.letsmidi.monsys.protocol.route.MsgType)
  }

  /**
   * Protobuf enum {@code com.letsmidi.monsys.protocol.route.AddrType}
   */
  public enum AddrType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>IP_V4 = 1;</code>
     */
    IP_V4(0, 1),
    /**
     * <code>IP_V6 = 2;</code>
     */
    IP_V6(1, 2),
    ;

    /**
     * <code>IP_V4 = 1;</code>
     */
    public static final int IP_V4_VALUE = 1;
    /**
     * <code>IP_V6 = 2;</code>
     */
    public static final int IP_V6_VALUE = 2;


    public final int getNumber() { return value; }

    public static AddrType valueOf(int value) {
      switch (value) {
        case 1: return IP_V4;
        case 2: return IP_V6;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddrType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AddrType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddrType>() {
            public AddrType findValueByNumber(int number) {
              return AddrType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.getDescriptor().getEnumTypes().get(1);
    }

    private static final AddrType[] VALUES = values();

    public static AddrType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AddrType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.letsmidi.monsys.protocol.route.AddrType)
  }

  /**
   * Protobuf enum {@code com.letsmidi.monsys.protocol.route.ClientType}
   */
  public enum ClientType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CLIENT = 1;</code>
     */
    CLIENT(0, 1),
    /**
     * <code>FGW = 2;</code>
     */
    FGW(1, 2),
    ;

    /**
     * <code>CLIENT = 1;</code>
     */
    public static final int CLIENT_VALUE = 1;
    /**
     * <code>FGW = 2;</code>
     */
    public static final int FGW_VALUE = 2;


    public final int getNumber() { return value; }

    public static ClientType valueOf(int value) {
      switch (value) {
        case 1: return CLIENT;
        case 2: return FGW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ClientType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ClientType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ClientType>() {
            public ClientType findValueByNumber(int number) {
              return ClientType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.getDescriptor().getEnumTypes().get(2);
    }

    private static final ClientType[] VALUES = values();

    public static ClientType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ClientType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.letsmidi.monsys.protocol.route.ClientType)
  }

  public interface RouteMsgOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 version = 1;
    /**
     * <code>required int32 version = 1;</code>
     */
    boolean hasVersion();
    /**
     * <code>required int32 version = 1;</code>
     */
    int getVersion();

    // required .com.letsmidi.monsys.protocol.route.MsgType type = 2;
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.MsgType getType();

    // required int32 sequence = 3;
    /**
     * <code>required int32 sequence = 3;</code>
     */
    boolean hasSequence();
    /**
     * <code>required int32 sequence = 3;</code>
     */
    int getSequence();

    // optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
     */
    boolean hasReqToken();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ReqToken getReqToken();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ReqTokenOrBuilder getReqTokenOrBuilder();

    // optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
     */
    boolean hasReqTokenRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp getReqTokenRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ReqTokenRspOrBuilder getReqTokenRspOrBuilder();

    // optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
     */
    boolean hasConnect();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.Connect getConnect();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ConnectOrBuilder getConnectOrBuilder();

    // optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
     */
    boolean hasConnectRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ConnectRsp getConnectRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ConnectRspOrBuilder getConnectRspOrBuilder();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.route.RouteMsg}
   */
  public static final class RouteMsg extends
      com.google.protobuf.GeneratedMessage
      implements RouteMsgOrBuilder {
    // Use RouteMsg.newBuilder() to construct.
    private RouteMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RouteMsg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RouteMsg defaultInstance;
    public static RouteMsg getDefaultInstance() {
      return defaultInstance;
    }

    public RouteMsg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RouteMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              version_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.letsmidi.monsys.protocol.route.Route.MsgType value = com.letsmidi.monsys.protocol.route.Route.MsgType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sequence_ = input.readInt32();
              break;
            }
            case 82: {
              com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = reqToken_.toBuilder();
              }
              reqToken_ = input.readMessage(com.letsmidi.monsys.protocol.route.Route.ReqToken.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reqToken_);
                reqToken_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 90: {
              com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = reqTokenRsp_.toBuilder();
              }
              reqTokenRsp_ = input.readMessage(com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reqTokenRsp_);
                reqTokenRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 98: {
              com.letsmidi.monsys.protocol.route.Route.Connect.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = connect_.toBuilder();
              }
              connect_ = input.readMessage(com.letsmidi.monsys.protocol.route.Route.Connect.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(connect_);
                connect_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 106: {
              com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = connectRsp_.toBuilder();
              }
              connectRsp_ = input.readMessage(com.letsmidi.monsys.protocol.route.Route.ConnectRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(connectRsp_);
                connectRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.route.Route.RouteMsg.class, com.letsmidi.monsys.protocol.route.Route.RouteMsg.Builder.class);
    }

    public static com.google.protobuf.Parser<RouteMsg> PARSER =
        new com.google.protobuf.AbstractParser<RouteMsg>() {
      public RouteMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RouteMsg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RouteMsg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>required int32 version = 1;</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 version = 1;</code>
     */
    public int getVersion() {
      return version_;
    }

    // required .com.letsmidi.monsys.protocol.route.MsgType type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private com.letsmidi.monsys.protocol.route.Route.MsgType type_;
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.MsgType getType() {
      return type_;
    }

    // required int32 sequence = 3;
    public static final int SEQUENCE_FIELD_NUMBER = 3;
    private int sequence_;
    /**
     * <code>required int32 sequence = 3;</code>
     */
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 sequence = 3;</code>
     */
    public int getSequence() {
      return sequence_;
    }

    // optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;
    public static final int REQ_TOKEN_FIELD_NUMBER = 10;
    private com.letsmidi.monsys.protocol.route.Route.ReqToken reqToken_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
     */
    public boolean hasReqToken() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ReqToken getReqToken() {
      return reqToken_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ReqTokenOrBuilder getReqTokenOrBuilder() {
      return reqToken_;
    }

    // optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;
    public static final int REQ_TOKEN_RSP_FIELD_NUMBER = 11;
    private com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp reqTokenRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
     */
    public boolean hasReqTokenRsp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp getReqTokenRsp() {
      return reqTokenRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ReqTokenRspOrBuilder getReqTokenRspOrBuilder() {
      return reqTokenRsp_;
    }

    // optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;
    public static final int CONNECT_FIELD_NUMBER = 12;
    private com.letsmidi.monsys.protocol.route.Route.Connect connect_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
     */
    public boolean hasConnect() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.Connect getConnect() {
      return connect_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ConnectOrBuilder getConnectOrBuilder() {
      return connect_;
    }

    // optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;
    public static final int CONNECT_RSP_FIELD_NUMBER = 13;
    private com.letsmidi.monsys.protocol.route.Route.ConnectRsp connectRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
     */
    public boolean hasConnectRsp() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ConnectRsp getConnectRsp() {
      return connectRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ConnectRspOrBuilder getConnectRspOrBuilder() {
      return connectRsp_;
    }

    private void initFields() {
      version_ = 0;
      type_ = com.letsmidi.monsys.protocol.route.Route.MsgType.REQ_TOKEN;
      sequence_ = 0;
      reqToken_ = com.letsmidi.monsys.protocol.route.Route.ReqToken.getDefaultInstance();
      reqTokenRsp_ = com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.getDefaultInstance();
      connect_ = com.letsmidi.monsys.protocol.route.Route.Connect.getDefaultInstance();
      connectRsp_ = com.letsmidi.monsys.protocol.route.Route.ConnectRsp.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSequence()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasReqToken()) {
        if (!getReqToken().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasReqTokenRsp()) {
        if (!getReqTokenRsp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasConnect()) {
        if (!getConnect().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasConnectRsp()) {
        if (!getConnectRsp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, sequence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(10, reqToken_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(11, reqTokenRsp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(12, connect_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(13, connectRsp_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, sequence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, reqToken_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, reqTokenRsp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, connect_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, connectRsp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.RouteMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.route.Route.RouteMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.route.RouteMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.route.Route.RouteMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.route.Route.RouteMsg.class, com.letsmidi.monsys.protocol.route.Route.RouteMsg.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.route.Route.RouteMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getReqTokenFieldBuilder();
          getReqTokenRspFieldBuilder();
          getConnectFieldBuilder();
          getConnectRspFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.letsmidi.monsys.protocol.route.Route.MsgType.REQ_TOKEN;
        bitField0_ = (bitField0_ & ~0x00000002);
        sequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (reqTokenBuilder_ == null) {
          reqToken_ = com.letsmidi.monsys.protocol.route.Route.ReqToken.getDefaultInstance();
        } else {
          reqTokenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (reqTokenRspBuilder_ == null) {
          reqTokenRsp_ = com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.getDefaultInstance();
        } else {
          reqTokenRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (connectBuilder_ == null) {
          connect_ = com.letsmidi.monsys.protocol.route.Route.Connect.getDefaultInstance();
        } else {
          connectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (connectRspBuilder_ == null) {
          connectRsp_ = com.letsmidi.monsys.protocol.route.Route.ConnectRsp.getDefaultInstance();
        } else {
          connectRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_descriptor;
      }

      public com.letsmidi.monsys.protocol.route.Route.RouteMsg getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.route.Route.RouteMsg.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.route.Route.RouteMsg build() {
        com.letsmidi.monsys.protocol.route.Route.RouteMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.route.Route.RouteMsg buildPartial() {
        com.letsmidi.monsys.protocol.route.Route.RouteMsg result = new com.letsmidi.monsys.protocol.route.Route.RouteMsg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sequence_ = sequence_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (reqTokenBuilder_ == null) {
          result.reqToken_ = reqToken_;
        } else {
          result.reqToken_ = reqTokenBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (reqTokenRspBuilder_ == null) {
          result.reqTokenRsp_ = reqTokenRsp_;
        } else {
          result.reqTokenRsp_ = reqTokenRspBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (connectBuilder_ == null) {
          result.connect_ = connect_;
        } else {
          result.connect_ = connectBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (connectRspBuilder_ == null) {
          result.connectRsp_ = connectRsp_;
        } else {
          result.connectRsp_ = connectRspBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.route.Route.RouteMsg) {
          return mergeFrom((com.letsmidi.monsys.protocol.route.Route.RouteMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.route.Route.RouteMsg other) {
        if (other == com.letsmidi.monsys.protocol.route.Route.RouteMsg.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        if (other.hasReqToken()) {
          mergeReqToken(other.getReqToken());
        }
        if (other.hasReqTokenRsp()) {
          mergeReqTokenRsp(other.getReqTokenRsp());
        }
        if (other.hasConnect()) {
          mergeConnect(other.getConnect());
        }
        if (other.hasConnectRsp()) {
          mergeConnectRsp(other.getConnectRsp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersion()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasSequence()) {
          
          return false;
        }
        if (hasReqToken()) {
          if (!getReqToken().isInitialized()) {
            
            return false;
          }
        }
        if (hasReqTokenRsp()) {
          if (!getReqTokenRsp().isInitialized()) {
            
            return false;
          }
        }
        if (hasConnect()) {
          if (!getConnect().isInitialized()) {
            
            return false;
          }
        }
        if (hasConnectRsp()) {
          if (!getConnectRsp().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.route.Route.RouteMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.route.Route.RouteMsg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 version = 1;
      private int version_ ;
      /**
       * <code>required int32 version = 1;</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 version = 1;</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required int32 version = 1;</code>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 version = 1;</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      // required .com.letsmidi.monsys.protocol.route.MsgType type = 2;
      private com.letsmidi.monsys.protocol.route.Route.MsgType type_ = com.letsmidi.monsys.protocol.route.Route.MsgType.REQ_TOKEN;
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.MsgType getType() {
        return type_;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
       */
      public Builder setType(com.letsmidi.monsys.protocol.route.Route.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.MsgType type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = com.letsmidi.monsys.protocol.route.Route.MsgType.REQ_TOKEN;
        onChanged();
        return this;
      }

      // required int32 sequence = 3;
      private int sequence_ ;
      /**
       * <code>required int32 sequence = 3;</code>
       */
      public boolean hasSequence() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 sequence = 3;</code>
       */
      public int getSequence() {
        return sequence_;
      }
      /**
       * <code>required int32 sequence = 3;</code>
       */
      public Builder setSequence(int value) {
        bitField0_ |= 0x00000004;
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 sequence = 3;</code>
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sequence_ = 0;
        onChanged();
        return this;
      }

      // optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;
      private com.letsmidi.monsys.protocol.route.Route.ReqToken reqToken_ = com.letsmidi.monsys.protocol.route.Route.ReqToken.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.ReqToken, com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder, com.letsmidi.monsys.protocol.route.Route.ReqTokenOrBuilder> reqTokenBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public boolean hasReqToken() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ReqToken getReqToken() {
        if (reqTokenBuilder_ == null) {
          return reqToken_;
        } else {
          return reqTokenBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public Builder setReqToken(com.letsmidi.monsys.protocol.route.Route.ReqToken value) {
        if (reqTokenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reqToken_ = value;
          onChanged();
        } else {
          reqTokenBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public Builder setReqToken(
          com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder builderForValue) {
        if (reqTokenBuilder_ == null) {
          reqToken_ = builderForValue.build();
          onChanged();
        } else {
          reqTokenBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public Builder mergeReqToken(com.letsmidi.monsys.protocol.route.Route.ReqToken value) {
        if (reqTokenBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              reqToken_ != com.letsmidi.monsys.protocol.route.Route.ReqToken.getDefaultInstance()) {
            reqToken_ =
              com.letsmidi.monsys.protocol.route.Route.ReqToken.newBuilder(reqToken_).mergeFrom(value).buildPartial();
          } else {
            reqToken_ = value;
          }
          onChanged();
        } else {
          reqTokenBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public Builder clearReqToken() {
        if (reqTokenBuilder_ == null) {
          reqToken_ = com.letsmidi.monsys.protocol.route.Route.ReqToken.getDefaultInstance();
          onChanged();
        } else {
          reqTokenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder getReqTokenBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getReqTokenFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ReqTokenOrBuilder getReqTokenOrBuilder() {
        if (reqTokenBuilder_ != null) {
          return reqTokenBuilder_.getMessageOrBuilder();
        } else {
          return reqToken_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqToken req_token = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.ReqToken, com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder, com.letsmidi.monsys.protocol.route.Route.ReqTokenOrBuilder> 
          getReqTokenFieldBuilder() {
        if (reqTokenBuilder_ == null) {
          reqTokenBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.route.Route.ReqToken, com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder, com.letsmidi.monsys.protocol.route.Route.ReqTokenOrBuilder>(
                  reqToken_,
                  getParentForChildren(),
                  isClean());
          reqToken_ = null;
        }
        return reqTokenBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;
      private com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp reqTokenRsp_ = com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp, com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder, com.letsmidi.monsys.protocol.route.Route.ReqTokenRspOrBuilder> reqTokenRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public boolean hasReqTokenRsp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp getReqTokenRsp() {
        if (reqTokenRspBuilder_ == null) {
          return reqTokenRsp_;
        } else {
          return reqTokenRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder setReqTokenRsp(com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp value) {
        if (reqTokenRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reqTokenRsp_ = value;
          onChanged();
        } else {
          reqTokenRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder setReqTokenRsp(
          com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder builderForValue) {
        if (reqTokenRspBuilder_ == null) {
          reqTokenRsp_ = builderForValue.build();
          onChanged();
        } else {
          reqTokenRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder mergeReqTokenRsp(com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp value) {
        if (reqTokenRspBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              reqTokenRsp_ != com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.getDefaultInstance()) {
            reqTokenRsp_ =
              com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.newBuilder(reqTokenRsp_).mergeFrom(value).buildPartial();
          } else {
            reqTokenRsp_ = value;
          }
          onChanged();
        } else {
          reqTokenRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder clearReqTokenRsp() {
        if (reqTokenRspBuilder_ == null) {
          reqTokenRsp_ = com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.getDefaultInstance();
          onChanged();
        } else {
          reqTokenRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder getReqTokenRspBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getReqTokenRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ReqTokenRspOrBuilder getReqTokenRspOrBuilder() {
        if (reqTokenRspBuilder_ != null) {
          return reqTokenRspBuilder_.getMessageOrBuilder();
        } else {
          return reqTokenRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ReqTokenRsp req_token_rsp = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp, com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder, com.letsmidi.monsys.protocol.route.Route.ReqTokenRspOrBuilder> 
          getReqTokenRspFieldBuilder() {
        if (reqTokenRspBuilder_ == null) {
          reqTokenRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp, com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder, com.letsmidi.monsys.protocol.route.Route.ReqTokenRspOrBuilder>(
                  reqTokenRsp_,
                  getParentForChildren(),
                  isClean());
          reqTokenRsp_ = null;
        }
        return reqTokenRspBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;
      private com.letsmidi.monsys.protocol.route.Route.Connect connect_ = com.letsmidi.monsys.protocol.route.Route.Connect.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.Connect, com.letsmidi.monsys.protocol.route.Route.Connect.Builder, com.letsmidi.monsys.protocol.route.Route.ConnectOrBuilder> connectBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public boolean hasConnect() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.Connect getConnect() {
        if (connectBuilder_ == null) {
          return connect_;
        } else {
          return connectBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public Builder setConnect(com.letsmidi.monsys.protocol.route.Route.Connect value) {
        if (connectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          connect_ = value;
          onChanged();
        } else {
          connectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public Builder setConnect(
          com.letsmidi.monsys.protocol.route.Route.Connect.Builder builderForValue) {
        if (connectBuilder_ == null) {
          connect_ = builderForValue.build();
          onChanged();
        } else {
          connectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public Builder mergeConnect(com.letsmidi.monsys.protocol.route.Route.Connect value) {
        if (connectBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              connect_ != com.letsmidi.monsys.protocol.route.Route.Connect.getDefaultInstance()) {
            connect_ =
              com.letsmidi.monsys.protocol.route.Route.Connect.newBuilder(connect_).mergeFrom(value).buildPartial();
          } else {
            connect_ = value;
          }
          onChanged();
        } else {
          connectBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public Builder clearConnect() {
        if (connectBuilder_ == null) {
          connect_ = com.letsmidi.monsys.protocol.route.Route.Connect.getDefaultInstance();
          onChanged();
        } else {
          connectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.Connect.Builder getConnectBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getConnectFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ConnectOrBuilder getConnectOrBuilder() {
        if (connectBuilder_ != null) {
          return connectBuilder_.getMessageOrBuilder();
        } else {
          return connect_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.Connect connect = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.Connect, com.letsmidi.monsys.protocol.route.Route.Connect.Builder, com.letsmidi.monsys.protocol.route.Route.ConnectOrBuilder> 
          getConnectFieldBuilder() {
        if (connectBuilder_ == null) {
          connectBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.route.Route.Connect, com.letsmidi.monsys.protocol.route.Route.Connect.Builder, com.letsmidi.monsys.protocol.route.Route.ConnectOrBuilder>(
                  connect_,
                  getParentForChildren(),
                  isClean());
          connect_ = null;
        }
        return connectBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;
      private com.letsmidi.monsys.protocol.route.Route.ConnectRsp connectRsp_ = com.letsmidi.monsys.protocol.route.Route.ConnectRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.ConnectRsp, com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder, com.letsmidi.monsys.protocol.route.Route.ConnectRspOrBuilder> connectRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public boolean hasConnectRsp() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ConnectRsp getConnectRsp() {
        if (connectRspBuilder_ == null) {
          return connectRsp_;
        } else {
          return connectRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder setConnectRsp(com.letsmidi.monsys.protocol.route.Route.ConnectRsp value) {
        if (connectRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          connectRsp_ = value;
          onChanged();
        } else {
          connectRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder setConnectRsp(
          com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder builderForValue) {
        if (connectRspBuilder_ == null) {
          connectRsp_ = builderForValue.build();
          onChanged();
        } else {
          connectRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder mergeConnectRsp(com.letsmidi.monsys.protocol.route.Route.ConnectRsp value) {
        if (connectRspBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              connectRsp_ != com.letsmidi.monsys.protocol.route.Route.ConnectRsp.getDefaultInstance()) {
            connectRsp_ =
              com.letsmidi.monsys.protocol.route.Route.ConnectRsp.newBuilder(connectRsp_).mergeFrom(value).buildPartial();
          } else {
            connectRsp_ = value;
          }
          onChanged();
        } else {
          connectRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder clearConnectRsp() {
        if (connectRspBuilder_ == null) {
          connectRsp_ = com.letsmidi.monsys.protocol.route.Route.ConnectRsp.getDefaultInstance();
          onChanged();
        } else {
          connectRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder getConnectRspBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getConnectRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ConnectRspOrBuilder getConnectRspOrBuilder() {
        if (connectRspBuilder_ != null) {
          return connectRspBuilder_.getMessageOrBuilder();
        } else {
          return connectRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.route.ConnectRsp connect_rsp = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.route.Route.ConnectRsp, com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder, com.letsmidi.monsys.protocol.route.Route.ConnectRspOrBuilder> 
          getConnectRspFieldBuilder() {
        if (connectRspBuilder_ == null) {
          connectRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.route.Route.ConnectRsp, com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder, com.letsmidi.monsys.protocol.route.Route.ConnectRspOrBuilder>(
                  connectRsp_,
                  getParentForChildren(),
                  isClean());
          connectRsp_ = null;
        }
        return connectRspBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.route.RouteMsg)
    }

    static {
      defaultInstance = new RouteMsg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.route.RouteMsg)
  }

  public interface ReqTokenOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string token = 1;
    /**
     * <code>required string token = 1;</code>
     */
    boolean hasToken();
    /**
     * <code>required string token = 1;</code>
     */
    java.lang.String getToken();
    /**
     * <code>required string token = 1;</code>
     */
    com.google.protobuf.ByteString
        getTokenBytes();

    // required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
     *
     * <pre>
     * required int32 timeout = 3;
     * </pre>
     */
    boolean hasAddrType();
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
     *
     * <pre>
     * required int32 timeout = 3;
     * </pre>
     */
    com.letsmidi.monsys.protocol.route.Route.AddrType getAddrType();

    // optional int32 client_ip_v4 = 3;
    /**
     * <code>optional int32 client_ip_v4 = 3;</code>
     */
    boolean hasClientIpV4();
    /**
     * <code>optional int32 client_ip_v4 = 3;</code>
     */
    int getClientIpV4();

    // optional int32 fgw_ip_v4 = 4;
    /**
     * <code>optional int32 fgw_ip_v4 = 4;</code>
     */
    boolean hasFgwIpV4();
    /**
     * <code>optional int32 fgw_ip_v4 = 4;</code>
     */
    int getFgwIpV4();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.route.ReqToken}
   */
  public static final class ReqToken extends
      com.google.protobuf.GeneratedMessage
      implements ReqTokenOrBuilder {
    // Use ReqToken.newBuilder() to construct.
    private ReqToken(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReqToken(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReqToken defaultInstance;
    public static ReqToken getDefaultInstance() {
      return defaultInstance;
    }

    public ReqToken getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReqToken(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              token_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.letsmidi.monsys.protocol.route.Route.AddrType value = com.letsmidi.monsys.protocol.route.Route.AddrType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                addrType_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              clientIpV4_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              fgwIpV4_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqToken_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqToken_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.route.Route.ReqToken.class, com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder.class);
    }

    public static com.google.protobuf.Parser<ReqToken> PARSER =
        new com.google.protobuf.AbstractParser<ReqToken>() {
      public ReqToken parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReqToken(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReqToken> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string token = 1;
    public static final int TOKEN_FIELD_NUMBER = 1;
    private java.lang.Object token_;
    /**
     * <code>required string token = 1;</code>
     */
    public boolean hasToken() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string token = 1;</code>
     */
    public java.lang.String getToken() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          token_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string token = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;
    public static final int ADDR_TYPE_FIELD_NUMBER = 2;
    private com.letsmidi.monsys.protocol.route.Route.AddrType addrType_;
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
     *
     * <pre>
     * required int32 timeout = 3;
     * </pre>
     */
    public boolean hasAddrType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
     *
     * <pre>
     * required int32 timeout = 3;
     * </pre>
     */
    public com.letsmidi.monsys.protocol.route.Route.AddrType getAddrType() {
      return addrType_;
    }

    // optional int32 client_ip_v4 = 3;
    public static final int CLIENT_IP_V4_FIELD_NUMBER = 3;
    private int clientIpV4_;
    /**
     * <code>optional int32 client_ip_v4 = 3;</code>
     */
    public boolean hasClientIpV4() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 client_ip_v4 = 3;</code>
     */
    public int getClientIpV4() {
      return clientIpV4_;
    }

    // optional int32 fgw_ip_v4 = 4;
    public static final int FGW_IP_V4_FIELD_NUMBER = 4;
    private int fgwIpV4_;
    /**
     * <code>optional int32 fgw_ip_v4 = 4;</code>
     */
    public boolean hasFgwIpV4() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 fgw_ip_v4 = 4;</code>
     */
    public int getFgwIpV4() {
      return fgwIpV4_;
    }

    private void initFields() {
      token_ = "";
      addrType_ = com.letsmidi.monsys.protocol.route.Route.AddrType.IP_V4;
      clientIpV4_ = 0;
      fgwIpV4_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasToken()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAddrType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTokenBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, addrType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, clientIpV4_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, fgwIpV4_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTokenBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, addrType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, clientIpV4_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, fgwIpV4_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqToken parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.route.Route.ReqToken prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.route.ReqToken}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.route.Route.ReqTokenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqToken_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqToken_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.route.Route.ReqToken.class, com.letsmidi.monsys.protocol.route.Route.ReqToken.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.route.Route.ReqToken.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        token_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        addrType_ = com.letsmidi.monsys.protocol.route.Route.AddrType.IP_V4;
        bitField0_ = (bitField0_ & ~0x00000002);
        clientIpV4_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        fgwIpV4_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqToken_descriptor;
      }

      public com.letsmidi.monsys.protocol.route.Route.ReqToken getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.route.Route.ReqToken.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.route.Route.ReqToken build() {
        com.letsmidi.monsys.protocol.route.Route.ReqToken result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.route.Route.ReqToken buildPartial() {
        com.letsmidi.monsys.protocol.route.Route.ReqToken result = new com.letsmidi.monsys.protocol.route.Route.ReqToken(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.token_ = token_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.addrType_ = addrType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.clientIpV4_ = clientIpV4_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fgwIpV4_ = fgwIpV4_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.route.Route.ReqToken) {
          return mergeFrom((com.letsmidi.monsys.protocol.route.Route.ReqToken)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.route.Route.ReqToken other) {
        if (other == com.letsmidi.monsys.protocol.route.Route.ReqToken.getDefaultInstance()) return this;
        if (other.hasToken()) {
          bitField0_ |= 0x00000001;
          token_ = other.token_;
          onChanged();
        }
        if (other.hasAddrType()) {
          setAddrType(other.getAddrType());
        }
        if (other.hasClientIpV4()) {
          setClientIpV4(other.getClientIpV4());
        }
        if (other.hasFgwIpV4()) {
          setFgwIpV4(other.getFgwIpV4());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasToken()) {
          
          return false;
        }
        if (!hasAddrType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.route.Route.ReqToken parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.route.Route.ReqToken) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string token = 1;
      private java.lang.Object token_ = "";
      /**
       * <code>required string token = 1;</code>
       */
      public boolean hasToken() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string token = 1;</code>
       */
      public java.lang.String getToken() {
        java.lang.Object ref = token_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          token_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string token = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        java.lang.Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string token = 1;</code>
       */
      public Builder setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string token = 1;</code>
       */
      public Builder clearToken() {
        bitField0_ = (bitField0_ & ~0x00000001);
        token_ = getDefaultInstance().getToken();
        onChanged();
        return this;
      }
      /**
       * <code>required string token = 1;</code>
       */
      public Builder setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        token_ = value;
        onChanged();
        return this;
      }

      // required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;
      private com.letsmidi.monsys.protocol.route.Route.AddrType addrType_ = com.letsmidi.monsys.protocol.route.Route.AddrType.IP_V4;
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
       *
       * <pre>
       * required int32 timeout = 3;
       * </pre>
       */
      public boolean hasAddrType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
       *
       * <pre>
       * required int32 timeout = 3;
       * </pre>
       */
      public com.letsmidi.monsys.protocol.route.Route.AddrType getAddrType() {
        return addrType_;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
       *
       * <pre>
       * required int32 timeout = 3;
       * </pre>
       */
      public Builder setAddrType(com.letsmidi.monsys.protocol.route.Route.AddrType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        addrType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.AddrType addr_type = 2;</code>
       *
       * <pre>
       * required int32 timeout = 3;
       * </pre>
       */
      public Builder clearAddrType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        addrType_ = com.letsmidi.monsys.protocol.route.Route.AddrType.IP_V4;
        onChanged();
        return this;
      }

      // optional int32 client_ip_v4 = 3;
      private int clientIpV4_ ;
      /**
       * <code>optional int32 client_ip_v4 = 3;</code>
       */
      public boolean hasClientIpV4() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 client_ip_v4 = 3;</code>
       */
      public int getClientIpV4() {
        return clientIpV4_;
      }
      /**
       * <code>optional int32 client_ip_v4 = 3;</code>
       */
      public Builder setClientIpV4(int value) {
        bitField0_ |= 0x00000004;
        clientIpV4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 client_ip_v4 = 3;</code>
       */
      public Builder clearClientIpV4() {
        bitField0_ = (bitField0_ & ~0x00000004);
        clientIpV4_ = 0;
        onChanged();
        return this;
      }

      // optional int32 fgw_ip_v4 = 4;
      private int fgwIpV4_ ;
      /**
       * <code>optional int32 fgw_ip_v4 = 4;</code>
       */
      public boolean hasFgwIpV4() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 fgw_ip_v4 = 4;</code>
       */
      public int getFgwIpV4() {
        return fgwIpV4_;
      }
      /**
       * <code>optional int32 fgw_ip_v4 = 4;</code>
       */
      public Builder setFgwIpV4(int value) {
        bitField0_ |= 0x00000008;
        fgwIpV4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fgw_ip_v4 = 4;</code>
       */
      public Builder clearFgwIpV4() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fgwIpV4_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.route.ReqToken)
    }

    static {
      defaultInstance = new ReqToken(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.route.ReqToken)
  }

  public interface ReqTokenRspOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 code = 1;
    /**
     * <code>required int32 code = 1;</code>
     */
    boolean hasCode();
    /**
     * <code>required int32 code = 1;</code>
     */
    int getCode();

    // required int32 port_for_client = 2;
    /**
     * <code>required int32 port_for_client = 2;</code>
     *
     * <pre>
     * required int32 timeout = 2;
     * </pre>
     */
    boolean hasPortForClient();
    /**
     * <code>required int32 port_for_client = 2;</code>
     *
     * <pre>
     * required int32 timeout = 2;
     * </pre>
     */
    int getPortForClient();

    // required int32 port_for_fgw = 3;
    /**
     * <code>required int32 port_for_fgw = 3;</code>
     */
    boolean hasPortForFgw();
    /**
     * <code>required int32 port_for_fgw = 3;</code>
     */
    int getPortForFgw();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.route.ReqTokenRsp}
   */
  public static final class ReqTokenRsp extends
      com.google.protobuf.GeneratedMessage
      implements ReqTokenRspOrBuilder {
    // Use ReqTokenRsp.newBuilder() to construct.
    private ReqTokenRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReqTokenRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReqTokenRsp defaultInstance;
    public static ReqTokenRsp getDefaultInstance() {
      return defaultInstance;
    }

    public ReqTokenRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReqTokenRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              code_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              portForClient_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              portForFgw_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.class, com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<ReqTokenRsp> PARSER =
        new com.google.protobuf.AbstractParser<ReqTokenRsp>() {
      public ReqTokenRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReqTokenRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReqTokenRsp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 code = 1;
    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>required int32 code = 1;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 code = 1;</code>
     */
    public int getCode() {
      return code_;
    }

    // required int32 port_for_client = 2;
    public static final int PORT_FOR_CLIENT_FIELD_NUMBER = 2;
    private int portForClient_;
    /**
     * <code>required int32 port_for_client = 2;</code>
     *
     * <pre>
     * required int32 timeout = 2;
     * </pre>
     */
    public boolean hasPortForClient() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 port_for_client = 2;</code>
     *
     * <pre>
     * required int32 timeout = 2;
     * </pre>
     */
    public int getPortForClient() {
      return portForClient_;
    }

    // required int32 port_for_fgw = 3;
    public static final int PORT_FOR_FGW_FIELD_NUMBER = 3;
    private int portForFgw_;
    /**
     * <code>required int32 port_for_fgw = 3;</code>
     */
    public boolean hasPortForFgw() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 port_for_fgw = 3;</code>
     */
    public int getPortForFgw() {
      return portForFgw_;
    }

    private void initFields() {
      code_ = 0;
      portForClient_ = 0;
      portForFgw_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPortForClient()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPortForFgw()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, code_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, portForClient_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, portForFgw_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, code_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, portForClient_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, portForFgw_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.route.ReqTokenRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.route.Route.ReqTokenRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.class, com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        code_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        portForClient_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        portForFgw_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp build() {
        com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp buildPartial() {
        com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp result = new com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.code_ = code_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.portForClient_ = portForClient_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.portForFgw_ = portForFgw_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp other) {
        if (other == com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp.getDefaultInstance()) return this;
        if (other.hasCode()) {
          setCode(other.getCode());
        }
        if (other.hasPortForClient()) {
          setPortForClient(other.getPortForClient());
        }
        if (other.hasPortForFgw()) {
          setPortForFgw(other.getPortForFgw());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCode()) {
          
          return false;
        }
        if (!hasPortForClient()) {
          
          return false;
        }
        if (!hasPortForFgw()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.route.Route.ReqTokenRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 code = 1;
      private int code_ ;
      /**
       * <code>required int32 code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder setCode(int value) {
        bitField0_ |= 0x00000001;
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        code_ = 0;
        onChanged();
        return this;
      }

      // required int32 port_for_client = 2;
      private int portForClient_ ;
      /**
       * <code>required int32 port_for_client = 2;</code>
       *
       * <pre>
       * required int32 timeout = 2;
       * </pre>
       */
      public boolean hasPortForClient() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 port_for_client = 2;</code>
       *
       * <pre>
       * required int32 timeout = 2;
       * </pre>
       */
      public int getPortForClient() {
        return portForClient_;
      }
      /**
       * <code>required int32 port_for_client = 2;</code>
       *
       * <pre>
       * required int32 timeout = 2;
       * </pre>
       */
      public Builder setPortForClient(int value) {
        bitField0_ |= 0x00000002;
        portForClient_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 port_for_client = 2;</code>
       *
       * <pre>
       * required int32 timeout = 2;
       * </pre>
       */
      public Builder clearPortForClient() {
        bitField0_ = (bitField0_ & ~0x00000002);
        portForClient_ = 0;
        onChanged();
        return this;
      }

      // required int32 port_for_fgw = 3;
      private int portForFgw_ ;
      /**
       * <code>required int32 port_for_fgw = 3;</code>
       */
      public boolean hasPortForFgw() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 port_for_fgw = 3;</code>
       */
      public int getPortForFgw() {
        return portForFgw_;
      }
      /**
       * <code>required int32 port_for_fgw = 3;</code>
       */
      public Builder setPortForFgw(int value) {
        bitField0_ |= 0x00000004;
        portForFgw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 port_for_fgw = 3;</code>
       */
      public Builder clearPortForFgw() {
        bitField0_ = (bitField0_ & ~0x00000004);
        portForFgw_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
    }

    static {
      defaultInstance = new ReqTokenRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.route.ReqTokenRsp)
  }

  public interface ConnectOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
     */
    boolean hasClientType();
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
     */
    com.letsmidi.monsys.protocol.route.Route.ClientType getClientType();

    // required string token = 2;
    /**
     * <code>required string token = 2;</code>
     */
    boolean hasToken();
    /**
     * <code>required string token = 2;</code>
     */
    java.lang.String getToken();
    /**
     * <code>required string token = 2;</code>
     */
    com.google.protobuf.ByteString
        getTokenBytes();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.route.Connect}
   */
  public static final class Connect extends
      com.google.protobuf.GeneratedMessage
      implements ConnectOrBuilder {
    // Use Connect.newBuilder() to construct.
    private Connect(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Connect(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Connect defaultInstance;
    public static Connect getDefaultInstance() {
      return defaultInstance;
    }

    public Connect getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Connect(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.letsmidi.monsys.protocol.route.Route.ClientType value = com.letsmidi.monsys.protocol.route.Route.ClientType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                clientType_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              token_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_Connect_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_Connect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.route.Route.Connect.class, com.letsmidi.monsys.protocol.route.Route.Connect.Builder.class);
    }

    public static com.google.protobuf.Parser<Connect> PARSER =
        new com.google.protobuf.AbstractParser<Connect>() {
      public Connect parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Connect(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Connect> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;
    public static final int CLIENT_TYPE_FIELD_NUMBER = 1;
    private com.letsmidi.monsys.protocol.route.Route.ClientType clientType_;
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
     */
    public boolean hasClientType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
     */
    public com.letsmidi.monsys.protocol.route.Route.ClientType getClientType() {
      return clientType_;
    }

    // required string token = 2;
    public static final int TOKEN_FIELD_NUMBER = 2;
    private java.lang.Object token_;
    /**
     * <code>required string token = 2;</code>
     */
    public boolean hasToken() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string token = 2;</code>
     */
    public java.lang.String getToken() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          token_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string token = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      clientType_ = com.letsmidi.monsys.protocol.route.Route.ClientType.CLIENT;
      token_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasClientType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasToken()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, clientType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTokenBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, clientType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTokenBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.Connect parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.route.Route.Connect prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.route.Connect}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.route.Route.ConnectOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_Connect_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_Connect_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.route.Route.Connect.class, com.letsmidi.monsys.protocol.route.Route.Connect.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.route.Route.Connect.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        clientType_ = com.letsmidi.monsys.protocol.route.Route.ClientType.CLIENT;
        bitField0_ = (bitField0_ & ~0x00000001);
        token_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_Connect_descriptor;
      }

      public com.letsmidi.monsys.protocol.route.Route.Connect getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.route.Route.Connect.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.route.Route.Connect build() {
        com.letsmidi.monsys.protocol.route.Route.Connect result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.route.Route.Connect buildPartial() {
        com.letsmidi.monsys.protocol.route.Route.Connect result = new com.letsmidi.monsys.protocol.route.Route.Connect(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.clientType_ = clientType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.token_ = token_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.route.Route.Connect) {
          return mergeFrom((com.letsmidi.monsys.protocol.route.Route.Connect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.route.Route.Connect other) {
        if (other == com.letsmidi.monsys.protocol.route.Route.Connect.getDefaultInstance()) return this;
        if (other.hasClientType()) {
          setClientType(other.getClientType());
        }
        if (other.hasToken()) {
          bitField0_ |= 0x00000002;
          token_ = other.token_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasClientType()) {
          
          return false;
        }
        if (!hasToken()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.route.Route.Connect parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.route.Route.Connect) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;
      private com.letsmidi.monsys.protocol.route.Route.ClientType clientType_ = com.letsmidi.monsys.protocol.route.Route.ClientType.CLIENT;
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
       */
      public boolean hasClientType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
       */
      public com.letsmidi.monsys.protocol.route.Route.ClientType getClientType() {
        return clientType_;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
       */
      public Builder setClientType(com.letsmidi.monsys.protocol.route.Route.ClientType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        clientType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.route.ClientType client_type = 1;</code>
       */
      public Builder clearClientType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clientType_ = com.letsmidi.monsys.protocol.route.Route.ClientType.CLIENT;
        onChanged();
        return this;
      }

      // required string token = 2;
      private java.lang.Object token_ = "";
      /**
       * <code>required string token = 2;</code>
       */
      public boolean hasToken() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string token = 2;</code>
       */
      public java.lang.String getToken() {
        java.lang.Object ref = token_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          token_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string token = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        java.lang.Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string token = 2;</code>
       */
      public Builder setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string token = 2;</code>
       */
      public Builder clearToken() {
        bitField0_ = (bitField0_ & ~0x00000002);
        token_ = getDefaultInstance().getToken();
        onChanged();
        return this;
      }
      /**
       * <code>required string token = 2;</code>
       */
      public Builder setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        token_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.route.Connect)
    }

    static {
      defaultInstance = new Connect(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.route.Connect)
  }

  public interface ConnectRspOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 code = 1;
    /**
     * <code>required int32 code = 1;</code>
     */
    boolean hasCode();
    /**
     * <code>required int32 code = 1;</code>
     */
    int getCode();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.route.ConnectRsp}
   */
  public static final class ConnectRsp extends
      com.google.protobuf.GeneratedMessage
      implements ConnectRspOrBuilder {
    // Use ConnectRsp.newBuilder() to construct.
    private ConnectRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ConnectRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ConnectRsp defaultInstance;
    public static ConnectRsp getDefaultInstance() {
      return defaultInstance;
    }

    public ConnectRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ConnectRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              code_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.route.Route.ConnectRsp.class, com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<ConnectRsp> PARSER =
        new com.google.protobuf.AbstractParser<ConnectRsp>() {
      public ConnectRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConnectRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ConnectRsp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 code = 1;
    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>required int32 code = 1;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 code = 1;</code>
     */
    public int getCode() {
      return code_;
    }

    private void initFields() {
      code_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, code_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, code_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.route.Route.ConnectRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.route.Route.ConnectRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.route.ConnectRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.route.Route.ConnectRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.route.Route.ConnectRsp.class, com.letsmidi.monsys.protocol.route.Route.ConnectRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.route.Route.ConnectRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        code_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.route.Route.internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.route.Route.ConnectRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.route.Route.ConnectRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.route.Route.ConnectRsp build() {
        com.letsmidi.monsys.protocol.route.Route.ConnectRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.route.Route.ConnectRsp buildPartial() {
        com.letsmidi.monsys.protocol.route.Route.ConnectRsp result = new com.letsmidi.monsys.protocol.route.Route.ConnectRsp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.code_ = code_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.route.Route.ConnectRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.route.Route.ConnectRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.route.Route.ConnectRsp other) {
        if (other == com.letsmidi.monsys.protocol.route.Route.ConnectRsp.getDefaultInstance()) return this;
        if (other.hasCode()) {
          setCode(other.getCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCode()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.route.Route.ConnectRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.route.Route.ConnectRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 code = 1;
      private int code_ ;
      /**
       * <code>required int32 code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder setCode(int value) {
        bitField0_ |= 0x00000001;
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        code_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.route.ConnectRsp)
    }

    static {
      defaultInstance = new ConnectRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.route.ConnectRsp)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_route_ReqToken_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_route_ReqToken_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_route_Connect_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_route_Connect_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013route.proto\022\"com.letsmidi.monsys.proto" +
      "col.route\"\364\002\n\010RouteMsg\022\017\n\007version\030\001 \002(\005\022" +
      "9\n\004type\030\002 \002(\0162+.com.letsmidi.monsys.prot" +
      "ocol.route.MsgType\022\020\n\010sequence\030\003 \002(\005\022?\n\t" +
      "req_token\030\n \001(\0132,.com.letsmidi.monsys.pr" +
      "otocol.route.ReqToken\022F\n\rreq_token_rsp\030\013" +
      " \001(\0132/.com.letsmidi.monsys.protocol.rout" +
      "e.ReqTokenRsp\022<\n\007connect\030\014 \001(\0132+.com.let" +
      "smidi.monsys.protocol.route.Connect\022C\n\013c" +
      "onnect_rsp\030\r \001(\0132..com.letsmidi.monsys.p",
      "rotocol.route.ConnectRsp\"\203\001\n\010ReqToken\022\r\n" +
      "\005token\030\001 \002(\t\022?\n\taddr_type\030\002 \002(\0162,.com.le" +
      "tsmidi.monsys.protocol.route.AddrType\022\024\n" +
      "\014client_ip_v4\030\003 \001(\005\022\021\n\tfgw_ip_v4\030\004 \001(\005\"J" +
      "\n\013ReqTokenRsp\022\014\n\004code\030\001 \002(\005\022\027\n\017port_for_" +
      "client\030\002 \002(\005\022\024\n\014port_for_fgw\030\003 \002(\005\"]\n\007Co" +
      "nnect\022C\n\013client_type\030\001 \002(\0162..com.letsmid" +
      "i.monsys.protocol.route.ClientType\022\r\n\005to" +
      "ken\030\002 \002(\t\"\032\n\nConnectRsp\022\014\n\004code\030\001 \002(\005*I\n" +
      "\007MsgType\022\r\n\tREQ_TOKEN\020\001\022\021\n\rREQ_TOKEN_RSP",
      "\020\002\022\013\n\007CONNECT\020\003\022\017\n\013CONNECT_RSP\020\004* \n\010Addr" +
      "Type\022\t\n\005IP_V4\020\001\022\t\n\005IP_V6\020\002*!\n\nClientType" +
      "\022\n\n\006CLIENT\020\001\022\007\n\003FGW\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_route_RouteMsg_descriptor,
              new java.lang.String[] { "Version", "Type", "Sequence", "ReqToken", "ReqTokenRsp", "Connect", "ConnectRsp", });
          internal_static_com_letsmidi_monsys_protocol_route_ReqToken_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_letsmidi_monsys_protocol_route_ReqToken_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_route_ReqToken_descriptor,
              new java.lang.String[] { "Token", "AddrType", "ClientIpV4", "FgwIpV4", });
          internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_route_ReqTokenRsp_descriptor,
              new java.lang.String[] { "Code", "PortForClient", "PortForFgw", });
          internal_static_com_letsmidi_monsys_protocol_route_Connect_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_letsmidi_monsys_protocol_route_Connect_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_route_Connect_descriptor,
              new java.lang.String[] { "ClientType", "Token", });
          internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_route_ConnectRsp_descriptor,
              new java.lang.String[] { "Code", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
