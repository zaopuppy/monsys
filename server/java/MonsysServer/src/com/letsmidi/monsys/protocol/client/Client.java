// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

package com.letsmidi.monsys.protocol.client;

public final class Client {
  private Client() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.letsmidi.monsys.protocol.client.MsgType}
   */
  public enum MsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HEARTBEAT = 1;</code>
     */
    HEARTBEAT(0, 1),
    /**
     * <code>LOGIN = 3;</code>
     */
    LOGIN(1, 3),
    /**
     * <code>LOGIN_RSP = 4;</code>
     */
    LOGIN_RSP(2, 4),
    /**
     * <code>REQUEST_COMM_SERVER = 5;</code>
     */
    REQUEST_COMM_SERVER(3, 5),
    /**
     * <code>REQUEST_COMM_SERVER_RSP = 6;</code>
     */
    REQUEST_COMM_SERVER_RSP(4, 6),
    ;

    /**
     * <code>HEARTBEAT = 1;</code>
     */
    public static final int HEARTBEAT_VALUE = 1;
    /**
     * <code>LOGIN = 3;</code>
     */
    public static final int LOGIN_VALUE = 3;
    /**
     * <code>LOGIN_RSP = 4;</code>
     */
    public static final int LOGIN_RSP_VALUE = 4;
    /**
     * <code>REQUEST_COMM_SERVER = 5;</code>
     */
    public static final int REQUEST_COMM_SERVER_VALUE = 5;
    /**
     * <code>REQUEST_COMM_SERVER_RSP = 6;</code>
     */
    public static final int REQUEST_COMM_SERVER_RSP_VALUE = 6;


    public final int getNumber() { return value; }

    public static MsgType valueOf(int value) {
      switch (value) {
        case 1: return HEARTBEAT;
        case 3: return LOGIN;
        case 4: return LOGIN_RSP;
        case 5: return REQUEST_COMM_SERVER;
        case 6: return REQUEST_COMM_SERVER_RSP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.client.Client.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.letsmidi.monsys.protocol.client.MsgType)
  }

  /**
   * Protobuf enum {@code com.letsmidi.monsys.protocol.client.ClientType}
   */
  public enum ClientType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CLIENT_TYPE_ANDROID = 1;</code>
     */
    CLIENT_TYPE_ANDROID(0, 1),
    ;

    /**
     * <code>CLIENT_TYPE_ANDROID = 1;</code>
     */
    public static final int CLIENT_TYPE_ANDROID_VALUE = 1;


    public final int getNumber() { return value; }

    public static ClientType valueOf(int value) {
      switch (value) {
        case 1: return CLIENT_TYPE_ANDROID;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ClientType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ClientType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ClientType>() {
            public ClientType findValueByNumber(int number) {
              return ClientType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.client.Client.getDescriptor().getEnumTypes().get(1);
    }

    private static final ClientType[] VALUES = values();

    public static ClientType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ClientType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.letsmidi.monsys.protocol.client.ClientType)
  }

  public interface ClientMsgOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.letsmidi.monsys.protocol.client.ClientMsg)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    int getVersion();

    /**
     * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
     */
    com.letsmidi.monsys.protocol.client.Client.MsgType getType();

    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    boolean hasSequence();
    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    int getSequence();

    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    boolean hasLogin();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    com.letsmidi.monsys.protocol.client.Client.Login getLogin();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    com.letsmidi.monsys.protocol.client.Client.LoginOrBuilder getLoginOrBuilder();

    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
     */
    boolean hasLoginRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
     */
    com.letsmidi.monsys.protocol.client.Client.LoginRsp getLoginRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
     */
    com.letsmidi.monsys.protocol.client.Client.LoginRspOrBuilder getLoginRspOrBuilder();

    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasRequestCommServer();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
     *
     * <pre>
     * </pre>
     */
    com.letsmidi.monsys.protocol.client.Client.RequestCommServer getRequestCommServer();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
     *
     * <pre>
     * </pre>
     */
    com.letsmidi.monsys.protocol.client.Client.RequestCommServerOrBuilder getRequestCommServerOrBuilder();

    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
     */
    boolean hasRequestCommServerRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
     */
    com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp getRequestCommServerRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
     */
    com.letsmidi.monsys.protocol.client.Client.RequestCommServerRspOrBuilder getRequestCommServerRspOrBuilder();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.client.ClientMsg}
   */
  public static final class ClientMsg extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.letsmidi.monsys.protocol.client.ClientMsg)
      ClientMsgOrBuilder {
    // Use ClientMsg.newBuilder() to construct.
    private ClientMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ClientMsg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ClientMsg defaultInstance;
    public static ClientMsg getDefaultInstance() {
      return defaultInstance;
    }

    public ClientMsg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ClientMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              version_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.letsmidi.monsys.protocol.client.Client.MsgType value = com.letsmidi.monsys.protocol.client.Client.MsgType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sequence_ = input.readUInt32();
              break;
            }
            case 42: {
              com.letsmidi.monsys.protocol.client.Client.Login.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = login_.toBuilder();
              }
              login_ = input.readMessage(com.letsmidi.monsys.protocol.client.Client.Login.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(login_);
                login_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 50: {
              com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = loginRsp_.toBuilder();
              }
              loginRsp_ = input.readMessage(com.letsmidi.monsys.protocol.client.Client.LoginRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loginRsp_);
                loginRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 58: {
              com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = requestCommServer_.toBuilder();
              }
              requestCommServer_ = input.readMessage(com.letsmidi.monsys.protocol.client.Client.RequestCommServer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(requestCommServer_);
                requestCommServer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 66: {
              com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = requestCommServerRsp_.toBuilder();
              }
              requestCommServerRsp_ = input.readMessage(com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(requestCommServerRsp_);
                requestCommServerRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.client.Client.ClientMsg.class, com.letsmidi.monsys.protocol.client.Client.ClientMsg.Builder.class);
    }

    public static com.google.protobuf.Parser<ClientMsg> PARSER =
        new com.google.protobuf.AbstractParser<ClientMsg>() {
      public ClientMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClientMsg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ClientMsg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private com.letsmidi.monsys.protocol.client.Client.MsgType type_;
    /**
     * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
     */
    public com.letsmidi.monsys.protocol.client.Client.MsgType getType() {
      return type_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 3;
    private int sequence_;
    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    public int getSequence() {
      return sequence_;
    }

    public static final int LOGIN_FIELD_NUMBER = 5;
    private com.letsmidi.monsys.protocol.client.Client.Login login_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    public boolean hasLogin() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    public com.letsmidi.monsys.protocol.client.Client.Login getLogin() {
      return login_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    public com.letsmidi.monsys.protocol.client.Client.LoginOrBuilder getLoginOrBuilder() {
      return login_;
    }

    public static final int LOGIN_RSP_FIELD_NUMBER = 6;
    private com.letsmidi.monsys.protocol.client.Client.LoginRsp loginRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
     */
    public boolean hasLoginRsp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
     */
    public com.letsmidi.monsys.protocol.client.Client.LoginRsp getLoginRsp() {
      return loginRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
     */
    public com.letsmidi.monsys.protocol.client.Client.LoginRspOrBuilder getLoginRspOrBuilder() {
      return loginRsp_;
    }

    public static final int REQUEST_COMM_SERVER_FIELD_NUMBER = 7;
    private com.letsmidi.monsys.protocol.client.Client.RequestCommServer requestCommServer_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasRequestCommServer() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
     *
     * <pre>
     * </pre>
     */
    public com.letsmidi.monsys.protocol.client.Client.RequestCommServer getRequestCommServer() {
      return requestCommServer_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
     *
     * <pre>
     * </pre>
     */
    public com.letsmidi.monsys.protocol.client.Client.RequestCommServerOrBuilder getRequestCommServerOrBuilder() {
      return requestCommServer_;
    }

    public static final int REQUEST_COMM_SERVER_RSP_FIELD_NUMBER = 8;
    private com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp requestCommServerRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
     */
    public boolean hasRequestCommServerRsp() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
     */
    public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp getRequestCommServerRsp() {
      return requestCommServerRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
     */
    public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRspOrBuilder getRequestCommServerRspOrBuilder() {
      return requestCommServerRsp_;
    }

    private void initFields() {
      version_ = 0;
      type_ = com.letsmidi.monsys.protocol.client.Client.MsgType.HEARTBEAT;
      sequence_ = 0;
      login_ = com.letsmidi.monsys.protocol.client.Client.Login.getDefaultInstance();
      loginRsp_ = com.letsmidi.monsys.protocol.client.Client.LoginRsp.getDefaultInstance();
      requestCommServer_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServer.getDefaultInstance();
      requestCommServerRsp_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSequence()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasLogin()) {
        if (!getLogin().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLoginRsp()) {
        if (!getLoginRsp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRequestCommServerRsp()) {
        if (!getRequestCommServerRsp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, sequence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, login_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, loginRsp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(7, requestCommServer_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(8, requestCommServerRsp_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, sequence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, login_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, loginRsp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, requestCommServer_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, requestCommServerRsp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.ClientMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.client.Client.ClientMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.client.ClientMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.letsmidi.monsys.protocol.client.ClientMsg)
        com.letsmidi.monsys.protocol.client.Client.ClientMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.client.Client.ClientMsg.class, com.letsmidi.monsys.protocol.client.Client.ClientMsg.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.client.Client.ClientMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLoginFieldBuilder();
          getLoginRspFieldBuilder();
          getRequestCommServerFieldBuilder();
          getRequestCommServerRspFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.letsmidi.monsys.protocol.client.Client.MsgType.HEARTBEAT;
        bitField0_ = (bitField0_ & ~0x00000002);
        sequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (loginBuilder_ == null) {
          login_ = com.letsmidi.monsys.protocol.client.Client.Login.getDefaultInstance();
        } else {
          loginBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (loginRspBuilder_ == null) {
          loginRsp_ = com.letsmidi.monsys.protocol.client.Client.LoginRsp.getDefaultInstance();
        } else {
          loginRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (requestCommServerBuilder_ == null) {
          requestCommServer_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServer.getDefaultInstance();
        } else {
          requestCommServerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (requestCommServerRspBuilder_ == null) {
          requestCommServerRsp_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.getDefaultInstance();
        } else {
          requestCommServerRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_descriptor;
      }

      public com.letsmidi.monsys.protocol.client.Client.ClientMsg getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.client.Client.ClientMsg.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.client.Client.ClientMsg build() {
        com.letsmidi.monsys.protocol.client.Client.ClientMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.client.Client.ClientMsg buildPartial() {
        com.letsmidi.monsys.protocol.client.Client.ClientMsg result = new com.letsmidi.monsys.protocol.client.Client.ClientMsg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sequence_ = sequence_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (loginBuilder_ == null) {
          result.login_ = login_;
        } else {
          result.login_ = loginBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (loginRspBuilder_ == null) {
          result.loginRsp_ = loginRsp_;
        } else {
          result.loginRsp_ = loginRspBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (requestCommServerBuilder_ == null) {
          result.requestCommServer_ = requestCommServer_;
        } else {
          result.requestCommServer_ = requestCommServerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (requestCommServerRspBuilder_ == null) {
          result.requestCommServerRsp_ = requestCommServerRsp_;
        } else {
          result.requestCommServerRsp_ = requestCommServerRspBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.client.Client.ClientMsg) {
          return mergeFrom((com.letsmidi.monsys.protocol.client.Client.ClientMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.client.Client.ClientMsg other) {
        if (other == com.letsmidi.monsys.protocol.client.Client.ClientMsg.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        if (other.hasLogin()) {
          mergeLogin(other.getLogin());
        }
        if (other.hasLoginRsp()) {
          mergeLoginRsp(other.getLoginRsp());
        }
        if (other.hasRequestCommServer()) {
          mergeRequestCommServer(other.getRequestCommServer());
        }
        if (other.hasRequestCommServerRsp()) {
          mergeRequestCommServerRsp(other.getRequestCommServerRsp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersion()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasSequence()) {
          
          return false;
        }
        if (hasLogin()) {
          if (!getLogin().isInitialized()) {
            
            return false;
          }
        }
        if (hasLoginRsp()) {
          if (!getLoginRsp().isInitialized()) {
            
            return false;
          }
        }
        if (hasRequestCommServerRsp()) {
          if (!getRequestCommServerRsp().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.client.Client.ClientMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.client.Client.ClientMsg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int version_ ;
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private com.letsmidi.monsys.protocol.client.Client.MsgType type_ = com.letsmidi.monsys.protocol.client.Client.MsgType.HEARTBEAT;
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.MsgType getType() {
        return type_;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
       */
      public Builder setType(com.letsmidi.monsys.protocol.client.Client.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.MsgType type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = com.letsmidi.monsys.protocol.client.Client.MsgType.HEARTBEAT;
        onChanged();
        return this;
      }

      private int sequence_ ;
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public boolean hasSequence() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public int getSequence() {
        return sequence_;
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public Builder setSequence(int value) {
        bitField0_ |= 0x00000004;
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sequence_ = 0;
        onChanged();
        return this;
      }

      private com.letsmidi.monsys.protocol.client.Client.Login login_ = com.letsmidi.monsys.protocol.client.Client.Login.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.Login, com.letsmidi.monsys.protocol.client.Client.Login.Builder, com.letsmidi.monsys.protocol.client.Client.LoginOrBuilder> loginBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public boolean hasLogin() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public com.letsmidi.monsys.protocol.client.Client.Login getLogin() {
        if (loginBuilder_ == null) {
          return login_;
        } else {
          return loginBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder setLogin(com.letsmidi.monsys.protocol.client.Client.Login value) {
        if (loginBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          login_ = value;
          onChanged();
        } else {
          loginBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder setLogin(
          com.letsmidi.monsys.protocol.client.Client.Login.Builder builderForValue) {
        if (loginBuilder_ == null) {
          login_ = builderForValue.build();
          onChanged();
        } else {
          loginBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder mergeLogin(com.letsmidi.monsys.protocol.client.Client.Login value) {
        if (loginBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              login_ != com.letsmidi.monsys.protocol.client.Client.Login.getDefaultInstance()) {
            login_ =
              com.letsmidi.monsys.protocol.client.Client.Login.newBuilder(login_).mergeFrom(value).buildPartial();
          } else {
            login_ = value;
          }
          onChanged();
        } else {
          loginBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder clearLogin() {
        if (loginBuilder_ == null) {
          login_ = com.letsmidi.monsys.protocol.client.Client.Login.getDefaultInstance();
          onChanged();
        } else {
          loginBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public com.letsmidi.monsys.protocol.client.Client.Login.Builder getLoginBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getLoginFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public com.letsmidi.monsys.protocol.client.Client.LoginOrBuilder getLoginOrBuilder() {
        if (loginBuilder_ != null) {
          return loginBuilder_.getMessageOrBuilder();
        } else {
          return login_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.Login login = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.Login, com.letsmidi.monsys.protocol.client.Client.Login.Builder, com.letsmidi.monsys.protocol.client.Client.LoginOrBuilder> 
          getLoginFieldBuilder() {
        if (loginBuilder_ == null) {
          loginBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.client.Client.Login, com.letsmidi.monsys.protocol.client.Client.Login.Builder, com.letsmidi.monsys.protocol.client.Client.LoginOrBuilder>(
                  getLogin(),
                  getParentForChildren(),
                  isClean());
          login_ = null;
        }
        return loginBuilder_;
      }

      private com.letsmidi.monsys.protocol.client.Client.LoginRsp loginRsp_ = com.letsmidi.monsys.protocol.client.Client.LoginRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.LoginRsp, com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder, com.letsmidi.monsys.protocol.client.Client.LoginRspOrBuilder> loginRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public boolean hasLoginRsp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.LoginRsp getLoginRsp() {
        if (loginRspBuilder_ == null) {
          return loginRsp_;
        } else {
          return loginRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public Builder setLoginRsp(com.letsmidi.monsys.protocol.client.Client.LoginRsp value) {
        if (loginRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loginRsp_ = value;
          onChanged();
        } else {
          loginRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public Builder setLoginRsp(
          com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder builderForValue) {
        if (loginRspBuilder_ == null) {
          loginRsp_ = builderForValue.build();
          onChanged();
        } else {
          loginRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public Builder mergeLoginRsp(com.letsmidi.monsys.protocol.client.Client.LoginRsp value) {
        if (loginRspBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              loginRsp_ != com.letsmidi.monsys.protocol.client.Client.LoginRsp.getDefaultInstance()) {
            loginRsp_ =
              com.letsmidi.monsys.protocol.client.Client.LoginRsp.newBuilder(loginRsp_).mergeFrom(value).buildPartial();
          } else {
            loginRsp_ = value;
          }
          onChanged();
        } else {
          loginRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public Builder clearLoginRsp() {
        if (loginRspBuilder_ == null) {
          loginRsp_ = com.letsmidi.monsys.protocol.client.Client.LoginRsp.getDefaultInstance();
          onChanged();
        } else {
          loginRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder getLoginRspBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getLoginRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.LoginRspOrBuilder getLoginRspOrBuilder() {
        if (loginRspBuilder_ != null) {
          return loginRspBuilder_.getMessageOrBuilder();
        } else {
          return loginRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.LoginRsp, com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder, com.letsmidi.monsys.protocol.client.Client.LoginRspOrBuilder> 
          getLoginRspFieldBuilder() {
        if (loginRspBuilder_ == null) {
          loginRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.client.Client.LoginRsp, com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder, com.letsmidi.monsys.protocol.client.Client.LoginRspOrBuilder>(
                  getLoginRsp(),
                  getParentForChildren(),
                  isClean());
          loginRsp_ = null;
        }
        return loginRspBuilder_;
      }

      private com.letsmidi.monsys.protocol.client.Client.RequestCommServer requestCommServer_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServer.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.RequestCommServer, com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder, com.letsmidi.monsys.protocol.client.Client.RequestCommServerOrBuilder> requestCommServerBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasRequestCommServer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public com.letsmidi.monsys.protocol.client.Client.RequestCommServer getRequestCommServer() {
        if (requestCommServerBuilder_ == null) {
          return requestCommServer_;
        } else {
          return requestCommServerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRequestCommServer(com.letsmidi.monsys.protocol.client.Client.RequestCommServer value) {
        if (requestCommServerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestCommServer_ = value;
          onChanged();
        } else {
          requestCommServerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRequestCommServer(
          com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder builderForValue) {
        if (requestCommServerBuilder_ == null) {
          requestCommServer_ = builderForValue.build();
          onChanged();
        } else {
          requestCommServerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder mergeRequestCommServer(com.letsmidi.monsys.protocol.client.Client.RequestCommServer value) {
        if (requestCommServerBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              requestCommServer_ != com.letsmidi.monsys.protocol.client.Client.RequestCommServer.getDefaultInstance()) {
            requestCommServer_ =
              com.letsmidi.monsys.protocol.client.Client.RequestCommServer.newBuilder(requestCommServer_).mergeFrom(value).buildPartial();
          } else {
            requestCommServer_ = value;
          }
          onChanged();
        } else {
          requestCommServerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearRequestCommServer() {
        if (requestCommServerBuilder_ == null) {
          requestCommServer_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServer.getDefaultInstance();
          onChanged();
        } else {
          requestCommServerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder getRequestCommServerBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getRequestCommServerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      public com.letsmidi.monsys.protocol.client.Client.RequestCommServerOrBuilder getRequestCommServerOrBuilder() {
        if (requestCommServerBuilder_ != null) {
          return requestCommServerBuilder_.getMessageOrBuilder();
        } else {
          return requestCommServer_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;</code>
       *
       * <pre>
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.RequestCommServer, com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder, com.letsmidi.monsys.protocol.client.Client.RequestCommServerOrBuilder> 
          getRequestCommServerFieldBuilder() {
        if (requestCommServerBuilder_ == null) {
          requestCommServerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.client.Client.RequestCommServer, com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder, com.letsmidi.monsys.protocol.client.Client.RequestCommServerOrBuilder>(
                  getRequestCommServer(),
                  getParentForChildren(),
                  isClean());
          requestCommServer_ = null;
        }
        return requestCommServerBuilder_;
      }

      private com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp requestCommServerRsp_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRspOrBuilder> requestCommServerRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public boolean hasRequestCommServerRsp() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp getRequestCommServerRsp() {
        if (requestCommServerRspBuilder_ == null) {
          return requestCommServerRsp_;
        } else {
          return requestCommServerRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public Builder setRequestCommServerRsp(com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp value) {
        if (requestCommServerRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestCommServerRsp_ = value;
          onChanged();
        } else {
          requestCommServerRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public Builder setRequestCommServerRsp(
          com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder builderForValue) {
        if (requestCommServerRspBuilder_ == null) {
          requestCommServerRsp_ = builderForValue.build();
          onChanged();
        } else {
          requestCommServerRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public Builder mergeRequestCommServerRsp(com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp value) {
        if (requestCommServerRspBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              requestCommServerRsp_ != com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.getDefaultInstance()) {
            requestCommServerRsp_ =
              com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.newBuilder(requestCommServerRsp_).mergeFrom(value).buildPartial();
          } else {
            requestCommServerRsp_ = value;
          }
          onChanged();
        } else {
          requestCommServerRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public Builder clearRequestCommServerRsp() {
        if (requestCommServerRspBuilder_ == null) {
          requestCommServerRsp_ = com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.getDefaultInstance();
          onChanged();
        } else {
          requestCommServerRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder getRequestCommServerRspBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getRequestCommServerRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRspOrBuilder getRequestCommServerRspOrBuilder() {
        if (requestCommServerRspBuilder_ != null) {
          return requestCommServerRspBuilder_.getMessageOrBuilder();
        } else {
          return requestCommServerRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRspOrBuilder> 
          getRequestCommServerRspFieldBuilder() {
        if (requestCommServerRspBuilder_ == null) {
          requestCommServerRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRspOrBuilder>(
                  getRequestCommServerRsp(),
                  getParentForChildren(),
                  isClean());
          requestCommServerRsp_ = null;
        }
        return requestCommServerRspBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.client.ClientMsg)
    }

    static {
      defaultInstance = new ClientMsg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.ClientMsg)
  }

  public interface LoginOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.letsmidi.monsys.protocol.client.Login)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
     */
    boolean hasClientType();
    /**
     * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
     */
    com.letsmidi.monsys.protocol.client.Client.ClientType getClientType();

    /**
     * <code>required string user_name = 2;</code>
     */
    boolean hasUserName();
    /**
     * <code>required string user_name = 2;</code>
     */
    java.lang.String getUserName();
    /**
     * <code>required string user_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    /**
     * <code>required string password = 3;</code>
     *
     * <pre>
     * required int32 status = 4;
     * </pre>
     */
    boolean hasPassword();
    /**
     * <code>required string password = 3;</code>
     *
     * <pre>
     * required int32 status = 4;
     * </pre>
     */
    java.lang.String getPassword();
    /**
     * <code>required string password = 3;</code>
     *
     * <pre>
     * required int32 status = 4;
     * </pre>
     */
    com.google.protobuf.ByteString
        getPasswordBytes();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.client.Login}
   */
  public static final class Login extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.letsmidi.monsys.protocol.client.Login)
      LoginOrBuilder {
    // Use Login.newBuilder() to construct.
    private Login(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Login(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Login defaultInstance;
    public static Login getDefaultInstance() {
      return defaultInstance;
    }

    public Login getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Login(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.letsmidi.monsys.protocol.client.Client.ClientType value = com.letsmidi.monsys.protocol.client.Client.ClientType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                clientType_ = value;
              }
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              userName_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              password_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_Login_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_Login_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.client.Client.Login.class, com.letsmidi.monsys.protocol.client.Client.Login.Builder.class);
    }

    public static com.google.protobuf.Parser<Login> PARSER =
        new com.google.protobuf.AbstractParser<Login>() {
      public Login parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Login(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Login> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CLIENT_TYPE_FIELD_NUMBER = 1;
    private com.letsmidi.monsys.protocol.client.Client.ClientType clientType_;
    /**
     * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
     */
    public boolean hasClientType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
     */
    public com.letsmidi.monsys.protocol.client.Client.ClientType getClientType() {
      return clientType_;
    }

    public static final int USER_NAME_FIELD_NUMBER = 2;
    private java.lang.Object userName_;
    /**
     * <code>required string user_name = 2;</code>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string user_name = 2;</code>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string user_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PASSWORD_FIELD_NUMBER = 3;
    private java.lang.Object password_;
    /**
     * <code>required string password = 3;</code>
     *
     * <pre>
     * required int32 status = 4;
     * </pre>
     */
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string password = 3;</code>
     *
     * <pre>
     * required int32 status = 4;
     * </pre>
     */
    public java.lang.String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          password_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string password = 3;</code>
     *
     * <pre>
     * required int32 status = 4;
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      clientType_ = com.letsmidi.monsys.protocol.client.Client.ClientType.CLIENT_TYPE_ANDROID;
      userName_ = "";
      password_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasClientType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUserName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPassword()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, clientType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getPasswordBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, clientType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getPasswordBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.Login parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.client.Client.Login prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.client.Login}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.letsmidi.monsys.protocol.client.Login)
        com.letsmidi.monsys.protocol.client.Client.LoginOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_Login_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_Login_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.client.Client.Login.class, com.letsmidi.monsys.protocol.client.Client.Login.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.client.Client.Login.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        clientType_ = com.letsmidi.monsys.protocol.client.Client.ClientType.CLIENT_TYPE_ANDROID;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_Login_descriptor;
      }

      public com.letsmidi.monsys.protocol.client.Client.Login getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.client.Client.Login.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.client.Client.Login build() {
        com.letsmidi.monsys.protocol.client.Client.Login result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.client.Client.Login buildPartial() {
        com.letsmidi.monsys.protocol.client.Client.Login result = new com.letsmidi.monsys.protocol.client.Client.Login(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.clientType_ = clientType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.password_ = password_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.client.Client.Login) {
          return mergeFrom((com.letsmidi.monsys.protocol.client.Client.Login)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.client.Client.Login other) {
        if (other == com.letsmidi.monsys.protocol.client.Client.Login.getDefaultInstance()) return this;
        if (other.hasClientType()) {
          setClientType(other.getClientType());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          onChanged();
        }
        if (other.hasPassword()) {
          bitField0_ |= 0x00000004;
          password_ = other.password_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasClientType()) {
          
          return false;
        }
        if (!hasUserName()) {
          
          return false;
        }
        if (!hasPassword()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.client.Client.Login parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.client.Client.Login) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.letsmidi.monsys.protocol.client.Client.ClientType clientType_ = com.letsmidi.monsys.protocol.client.Client.ClientType.CLIENT_TYPE_ANDROID;
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
       */
      public boolean hasClientType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
       */
      public com.letsmidi.monsys.protocol.client.Client.ClientType getClientType() {
        return clientType_;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
       */
      public Builder setClientType(com.letsmidi.monsys.protocol.client.Client.ClientType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        clientType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];</code>
       */
      public Builder clearClientType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clientType_ = com.letsmidi.monsys.protocol.client.Client.ClientType.CLIENT_TYPE_ANDROID;
        onChanged();
        return this;
      }

      private java.lang.Object userName_ = "";
      /**
       * <code>required string user_name = 2;</code>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string user_name = 2;</code>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            userName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string user_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string user_name = 2;</code>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string user_name = 2;</code>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <code>required string user_name = 2;</code>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object password_ = "";
      /**
       * <code>required string password = 3;</code>
       *
       * <pre>
       * required int32 status = 4;
       * </pre>
       */
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string password = 3;</code>
       *
       * <pre>
       * required int32 status = 4;
       * </pre>
       */
      public java.lang.String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            password_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string password = 3;</code>
       *
       * <pre>
       * required int32 status = 4;
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPasswordBytes() {
        java.lang.Object ref = password_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          password_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string password = 3;</code>
       *
       * <pre>
       * required int32 status = 4;
       * </pre>
       */
      public Builder setPassword(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        password_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string password = 3;</code>
       *
       * <pre>
       * required int32 status = 4;
       * </pre>
       */
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000004);
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      /**
       * <code>required string password = 3;</code>
       *
       * <pre>
       * required int32 status = 4;
       * </pre>
       */
      public Builder setPasswordBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        password_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.client.Login)
    }

    static {
      defaultInstance = new Login(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.Login)
  }

  public interface LoginRspOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.letsmidi.monsys.protocol.client.LoginRsp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 code = 1;</code>
     */
    boolean hasCode();
    /**
     * <code>required int32 code = 1;</code>
     */
    int getCode();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.client.LoginRsp}
   */
  public static final class LoginRsp extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.letsmidi.monsys.protocol.client.LoginRsp)
      LoginRspOrBuilder {
    // Use LoginRsp.newBuilder() to construct.
    private LoginRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LoginRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LoginRsp defaultInstance;
    public static LoginRsp getDefaultInstance() {
      return defaultInstance;
    }

    public LoginRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LoginRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              code_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.client.Client.LoginRsp.class, com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<LoginRsp> PARSER =
        new com.google.protobuf.AbstractParser<LoginRsp>() {
      public LoginRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LoginRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LoginRsp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>required int32 code = 1;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 code = 1;</code>
     */
    public int getCode() {
      return code_;
    }

    private void initFields() {
      code_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, code_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, code_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.LoginRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.client.Client.LoginRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.client.LoginRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.letsmidi.monsys.protocol.client.LoginRsp)
        com.letsmidi.monsys.protocol.client.Client.LoginRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.client.Client.LoginRsp.class, com.letsmidi.monsys.protocol.client.Client.LoginRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.client.Client.LoginRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        code_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.client.Client.LoginRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.client.Client.LoginRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.client.Client.LoginRsp build() {
        com.letsmidi.monsys.protocol.client.Client.LoginRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.client.Client.LoginRsp buildPartial() {
        com.letsmidi.monsys.protocol.client.Client.LoginRsp result = new com.letsmidi.monsys.protocol.client.Client.LoginRsp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.code_ = code_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.client.Client.LoginRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.client.Client.LoginRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.client.Client.LoginRsp other) {
        if (other == com.letsmidi.monsys.protocol.client.Client.LoginRsp.getDefaultInstance()) return this;
        if (other.hasCode()) {
          setCode(other.getCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCode()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.client.Client.LoginRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.client.Client.LoginRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int code_ ;
      /**
       * <code>required int32 code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder setCode(int value) {
        bitField0_ |= 0x00000001;
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        code_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.client.LoginRsp)
    }

    static {
      defaultInstance = new LoginRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.LoginRsp)
  }

  public interface RequestCommServerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.letsmidi.monsys.protocol.client.RequestCommServer)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.client.RequestCommServer}
   */
  public static final class RequestCommServer extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.letsmidi.monsys.protocol.client.RequestCommServer)
      RequestCommServerOrBuilder {
    // Use RequestCommServer.newBuilder() to construct.
    private RequestCommServer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RequestCommServer(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RequestCommServer defaultInstance;
    public static RequestCommServer getDefaultInstance() {
      return defaultInstance;
    }

    public RequestCommServer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RequestCommServer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.client.Client.RequestCommServer.class, com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder.class);
    }

    public static com.google.protobuf.Parser<RequestCommServer> PARSER =
        new com.google.protobuf.AbstractParser<RequestCommServer>() {
      public RequestCommServer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RequestCommServer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RequestCommServer> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.client.Client.RequestCommServer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.client.RequestCommServer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.letsmidi.monsys.protocol.client.RequestCommServer)
        com.letsmidi.monsys.protocol.client.Client.RequestCommServerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.client.Client.RequestCommServer.class, com.letsmidi.monsys.protocol.client.Client.RequestCommServer.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.client.Client.RequestCommServer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_descriptor;
      }

      public com.letsmidi.monsys.protocol.client.Client.RequestCommServer getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.client.Client.RequestCommServer.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.client.Client.RequestCommServer build() {
        com.letsmidi.monsys.protocol.client.Client.RequestCommServer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.client.Client.RequestCommServer buildPartial() {
        com.letsmidi.monsys.protocol.client.Client.RequestCommServer result = new com.letsmidi.monsys.protocol.client.Client.RequestCommServer(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.client.Client.RequestCommServer) {
          return mergeFrom((com.letsmidi.monsys.protocol.client.Client.RequestCommServer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.client.Client.RequestCommServer other) {
        if (other == com.letsmidi.monsys.protocol.client.Client.RequestCommServer.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.client.Client.RequestCommServer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.client.Client.RequestCommServer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.client.RequestCommServer)
    }

    static {
      defaultInstance = new RequestCommServer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.RequestCommServer)
  }

  public interface RequestCommServerRspOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 code = 1;</code>
     */
    boolean hasCode();
    /**
     * <code>required int32 code = 1;</code>
     */
    int getCode();

    /**
     * <code>required string ip_v4_addr = 2;</code>
     */
    boolean hasIpV4Addr();
    /**
     * <code>required string ip_v4_addr = 2;</code>
     */
    java.lang.String getIpV4Addr();
    /**
     * <code>required string ip_v4_addr = 2;</code>
     */
    com.google.protobuf.ByteString
        getIpV4AddrBytes();

    /**
     * <code>required int32 port = 3;</code>
     */
    boolean hasPort();
    /**
     * <code>required int32 port = 3;</code>
     */
    int getPort();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.client.RequestCommServerRsp}
   */
  public static final class RequestCommServerRsp extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
      RequestCommServerRspOrBuilder {
    // Use RequestCommServerRsp.newBuilder() to construct.
    private RequestCommServerRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RequestCommServerRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RequestCommServerRsp defaultInstance;
    public static RequestCommServerRsp getDefaultInstance() {
      return defaultInstance;
    }

    public RequestCommServerRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RequestCommServerRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              code_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              ipV4Addr_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              port_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.class, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<RequestCommServerRsp> PARSER =
        new com.google.protobuf.AbstractParser<RequestCommServerRsp>() {
      public RequestCommServerRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RequestCommServerRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RequestCommServerRsp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>required int32 code = 1;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 code = 1;</code>
     */
    public int getCode() {
      return code_;
    }

    public static final int IP_V4_ADDR_FIELD_NUMBER = 2;
    private java.lang.Object ipV4Addr_;
    /**
     * <code>required string ip_v4_addr = 2;</code>
     */
    public boolean hasIpV4Addr() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string ip_v4_addr = 2;</code>
     */
    public java.lang.String getIpV4Addr() {
      java.lang.Object ref = ipV4Addr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipV4Addr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string ip_v4_addr = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIpV4AddrBytes() {
      java.lang.Object ref = ipV4Addr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipV4Addr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PORT_FIELD_NUMBER = 3;
    private int port_;
    /**
     * <code>required int32 port = 3;</code>
     */
    public boolean hasPort() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 port = 3;</code>
     */
    public int getPort() {
      return port_;
    }

    private void initFields() {
      code_ = 0;
      ipV4Addr_ = "";
      port_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIpV4Addr()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPort()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, code_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getIpV4AddrBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, port_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, code_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getIpV4AddrBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, port_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.client.RequestCommServerRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
        com.letsmidi.monsys.protocol.client.Client.RequestCommServerRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.class, com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        code_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        ipV4Addr_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        port_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.client.Client.internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp build() {
        com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp buildPartial() {
        com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp result = new com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.code_ = code_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.ipV4Addr_ = ipV4Addr_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.port_ = port_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp other) {
        if (other == com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp.getDefaultInstance()) return this;
        if (other.hasCode()) {
          setCode(other.getCode());
        }
        if (other.hasIpV4Addr()) {
          bitField0_ |= 0x00000002;
          ipV4Addr_ = other.ipV4Addr_;
          onChanged();
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCode()) {
          
          return false;
        }
        if (!hasIpV4Addr()) {
          
          return false;
        }
        if (!hasPort()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.client.Client.RequestCommServerRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int code_ ;
      /**
       * <code>required int32 code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder setCode(int value) {
        bitField0_ |= 0x00000001;
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        code_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object ipV4Addr_ = "";
      /**
       * <code>required string ip_v4_addr = 2;</code>
       */
      public boolean hasIpV4Addr() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string ip_v4_addr = 2;</code>
       */
      public java.lang.String getIpV4Addr() {
        java.lang.Object ref = ipV4Addr_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            ipV4Addr_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string ip_v4_addr = 2;</code>
       */
      public com.google.protobuf.ByteString
          getIpV4AddrBytes() {
        java.lang.Object ref = ipV4Addr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipV4Addr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string ip_v4_addr = 2;</code>
       */
      public Builder setIpV4Addr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        ipV4Addr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_v4_addr = 2;</code>
       */
      public Builder clearIpV4Addr() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ipV4Addr_ = getDefaultInstance().getIpV4Addr();
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_v4_addr = 2;</code>
       */
      public Builder setIpV4AddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        ipV4Addr_ = value;
        onChanged();
        return this;
      }

      private int port_ ;
      /**
       * <code>required int32 port = 3;</code>
       */
      public boolean hasPort() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 port = 3;</code>
       */
      public int getPort() {
        return port_;
      }
      /**
       * <code>required int32 port = 3;</code>
       */
      public Builder setPort(int value) {
        bitField0_ |= 0x00000004;
        port_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 port = 3;</code>
       */
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000004);
        port_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
    }

    static {
      defaultInstance = new RequestCommServerRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_client_Login_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_client_Login_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014client.proto\022#com.letsmidi.monsys.prot" +
      "ocol.client\"\230\003\n\tClientMsg\022\017\n\007version\030\001 \002" +
      "(\r\022:\n\004type\030\002 \002(\0162,.com.letsmidi.monsys.p" +
      "rotocol.client.MsgType\022\020\n\010sequence\030\003 \002(\r" +
      "\0229\n\005login\030\005 \001(\0132*.com.letsmidi.monsys.pr" +
      "otocol.client.Login\022@\n\tlogin_rsp\030\006 \001(\0132-" +
      ".com.letsmidi.monsys.protocol.client.Log" +
      "inRsp\022S\n\023request_comm_server\030\007 \001(\01326.com" +
      ".letsmidi.monsys.protocol.client.Request" +
      "CommServer\022Z\n\027request_comm_server_rsp\030\010 ",
      "\001(\01329.com.letsmidi.monsys.protocol.clien" +
      "t.RequestCommServerRsp\"\207\001\n\005Login\022Y\n\013clie" +
      "nt_type\030\001 \002(\0162/.com.letsmidi.monsys.prot" +
      "ocol.client.ClientType:\023CLIENT_TYPE_ANDR" +
      "OID\022\021\n\tuser_name\030\002 \002(\t\022\020\n\010password\030\003 \002(\t" +
      "\"\030\n\010LoginRsp\022\014\n\004code\030\001 \002(\005\"\023\n\021RequestCom" +
      "mServer\"F\n\024RequestCommServerRsp\022\014\n\004code\030" +
      "\001 \002(\005\022\022\n\nip_v4_addr\030\002 \002(\t\022\014\n\004port\030\003 \002(\005*" +
      "h\n\007MsgType\022\r\n\tHEARTBEAT\020\001\022\t\n\005LOGIN\020\003\022\r\n\t" +
      "LOGIN_RSP\020\004\022\027\n\023REQUEST_COMM_SERVER\020\005\022\033\n\027",
      "REQUEST_COMM_SERVER_RSP\020\006*%\n\nClientType\022" +
      "\027\n\023CLIENT_TYPE_ANDROID\020\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_letsmidi_monsys_protocol_client_ClientMsg_descriptor,
        new java.lang.String[] { "Version", "Type", "Sequence", "Login", "LoginRsp", "RequestCommServer", "RequestCommServerRsp", });
    internal_static_com_letsmidi_monsys_protocol_client_Login_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_letsmidi_monsys_protocol_client_Login_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_letsmidi_monsys_protocol_client_Login_descriptor,
        new java.lang.String[] { "ClientType", "UserName", "Password", });
    internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_letsmidi_monsys_protocol_client_LoginRsp_descriptor,
        new java.lang.String[] { "Code", });
    internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_letsmidi_monsys_protocol_client_RequestCommServer_descriptor,
        new java.lang.String[] { });
    internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_letsmidi_monsys_protocol_client_RequestCommServerRsp_descriptor,
        new java.lang.String[] { "Code", "IpV4Addr", "Port", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
