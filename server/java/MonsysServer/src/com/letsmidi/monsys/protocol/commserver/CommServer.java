// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm_server.proto

package com.letsmidi.monsys.protocol.commserver;

public final class CommServer {
  private CommServer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.letsmidi.monsys.protocol.commserver.MsgType}
   */
  public enum MsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HEARTBEAT = 1;</code>
     */
    HEARTBEAT(0, 1),
    /**
     * <code>REGISTER = 3;</code>
     */
    REGISTER(1, 3),
    /**
     * <code>REGISTER_RSP = 4;</code>
     */
    REGISTER_RSP(2, 4),
    /**
     * <code>REQUEST_TOKEN = 5;</code>
     */
    REQUEST_TOKEN(3, 5),
    /**
     * <code>REQUEST_TOKEN_RSP = 6;</code>
     */
    REQUEST_TOKEN_RSP(4, 6),
    ;

    /**
     * <code>HEARTBEAT = 1;</code>
     */
    public static final int HEARTBEAT_VALUE = 1;
    /**
     * <code>REGISTER = 3;</code>
     */
    public static final int REGISTER_VALUE = 3;
    /**
     * <code>REGISTER_RSP = 4;</code>
     */
    public static final int REGISTER_RSP_VALUE = 4;
    /**
     * <code>REQUEST_TOKEN = 5;</code>
     */
    public static final int REQUEST_TOKEN_VALUE = 5;
    /**
     * <code>REQUEST_TOKEN_RSP = 6;</code>
     */
    public static final int REQUEST_TOKEN_RSP_VALUE = 6;


    public final int getNumber() { return value; }

    public static MsgType valueOf(int value) {
      switch (value) {
        case 1: return HEARTBEAT;
        case 3: return REGISTER;
        case 4: return REGISTER_RSP;
        case 5: return REQUEST_TOKEN;
        case 6: return REQUEST_TOKEN_RSP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.letsmidi.monsys.protocol.commserver.MsgType)
  }

  public interface CommServerMsgOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 version = 1;
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    int getVersion();

    // required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;
    /**
     * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.MsgType getType();

    // required uint32 sequence = 3;
    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    boolean hasSequence();
    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    int getSequence();

    // optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    boolean hasRegister();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.Register getRegister();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.RegisterOrBuilder getRegisterOrBuilder();

    // optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
     */
    boolean hasRegisterRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp getRegisterRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRspOrBuilder getRegisterRspOrBuilder();

    // optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
     *
     * <pre>
     * request-token
     * </pre>
     */
    boolean hasRequestToken();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
     *
     * <pre>
     * request-token
     * </pre>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken getRequestToken();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
     *
     * <pre>
     * request-token
     * </pre>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenOrBuilder getRequestTokenOrBuilder();

    // optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
     */
    boolean hasRequestTokenRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp getRequestTokenRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
     */
    com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRspOrBuilder getRequestTokenRspOrBuilder();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.CommServerMsg}
   */
  public static final class CommServerMsg extends
      com.google.protobuf.GeneratedMessage
      implements CommServerMsgOrBuilder {
    // Use CommServerMsg.newBuilder() to construct.
    private CommServerMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CommServerMsg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CommServerMsg defaultInstance;
    public static CommServerMsg getDefaultInstance() {
      return defaultInstance;
    }

    public CommServerMsg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CommServerMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              version_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.letsmidi.monsys.protocol.commserver.CommServer.MsgType value = com.letsmidi.monsys.protocol.commserver.CommServer.MsgType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sequence_ = input.readUInt32();
              break;
            }
            case 42: {
              com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = register_.toBuilder();
              }
              register_ = input.readMessage(com.letsmidi.monsys.protocol.commserver.CommServer.Register.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(register_);
                register_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 50: {
              com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = registerRsp_.toBuilder();
              }
              registerRsp_ = input.readMessage(com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(registerRsp_);
                registerRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 58: {
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = requestToken_.toBuilder();
              }
              requestToken_ = input.readMessage(com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(requestToken_);
                requestToken_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 66: {
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = requestTokenRsp_.toBuilder();
              }
              requestTokenRsp_ = input.readMessage(com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(requestTokenRsp_);
                requestTokenRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg.class, com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg.Builder.class);
    }

    public static com.google.protobuf.Parser<CommServerMsg> PARSER =
        new com.google.protobuf.AbstractParser<CommServerMsg>() {
      public CommServerMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommServerMsg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CommServerMsg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * head
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    // required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private com.letsmidi.monsys.protocol.commserver.CommServer.MsgType type_;
    /**
     * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.MsgType getType() {
      return type_;
    }

    // required uint32 sequence = 3;
    public static final int SEQUENCE_FIELD_NUMBER = 3;
    private int sequence_;
    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 sequence = 3;</code>
     *
     * <pre>
     * required uint32 reserved = 4;
     * </pre>
     */
    public int getSequence() {
      return sequence_;
    }

    // optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;
    public static final int REGISTER_FIELD_NUMBER = 5;
    private com.letsmidi.monsys.protocol.commserver.CommServer.Register register_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    public boolean hasRegister() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.Register getRegister() {
      return register_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
     *
     * <pre>
     * login
     * </pre>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterOrBuilder getRegisterOrBuilder() {
      return register_;
    }

    // optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;
    public static final int REGISTER_RSP_FIELD_NUMBER = 6;
    private com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp registerRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
     */
    public boolean hasRegisterRsp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp getRegisterRsp() {
      return registerRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRspOrBuilder getRegisterRspOrBuilder() {
      return registerRsp_;
    }

    // optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;
    public static final int REQUEST_TOKEN_FIELD_NUMBER = 7;
    private com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken requestToken_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
     *
     * <pre>
     * request-token
     * </pre>
     */
    public boolean hasRequestToken() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
     *
     * <pre>
     * request-token
     * </pre>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken getRequestToken() {
      return requestToken_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
     *
     * <pre>
     * request-token
     * </pre>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenOrBuilder getRequestTokenOrBuilder() {
      return requestToken_;
    }

    // optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;
    public static final int REQUEST_TOKEN_RSP_FIELD_NUMBER = 8;
    private com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp requestTokenRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
     */
    public boolean hasRequestTokenRsp() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp getRequestTokenRsp() {
      return requestTokenRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
     */
    public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRspOrBuilder getRequestTokenRspOrBuilder() {
      return requestTokenRsp_;
    }

    private void initFields() {
      version_ = 0;
      type_ = com.letsmidi.monsys.protocol.commserver.CommServer.MsgType.HEARTBEAT;
      sequence_ = 0;
      register_ = com.letsmidi.monsys.protocol.commserver.CommServer.Register.getDefaultInstance();
      registerRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.getDefaultInstance();
      requestToken_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.getDefaultInstance();
      requestTokenRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSequence()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasRegister()) {
        if (!getRegister().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRegisterRsp()) {
        if (!getRegisterRsp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRequestTokenRsp()) {
        if (!getRequestTokenRsp().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, sequence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, register_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, registerRsp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(7, requestToken_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(8, requestTokenRsp_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, sequence_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, register_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, registerRsp_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, requestToken_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, requestTokenRsp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.CommServerMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg.class, com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRegisterFieldBuilder();
          getRegisterRspFieldBuilder();
          getRequestTokenFieldBuilder();
          getRequestTokenRspFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.letsmidi.monsys.protocol.commserver.CommServer.MsgType.HEARTBEAT;
        bitField0_ = (bitField0_ & ~0x00000002);
        sequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (registerBuilder_ == null) {
          register_ = com.letsmidi.monsys.protocol.commserver.CommServer.Register.getDefaultInstance();
        } else {
          registerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (registerRspBuilder_ == null) {
          registerRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.getDefaultInstance();
        } else {
          registerRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (requestTokenBuilder_ == null) {
          requestToken_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.getDefaultInstance();
        } else {
          requestTokenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (requestTokenRspBuilder_ == null) {
          requestTokenRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.getDefaultInstance();
        } else {
          requestTokenRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_descriptor;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg build() {
        com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg buildPartial() {
        com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg result = new com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sequence_ = sequence_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (registerBuilder_ == null) {
          result.register_ = register_;
        } else {
          result.register_ = registerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (registerRspBuilder_ == null) {
          result.registerRsp_ = registerRsp_;
        } else {
          result.registerRsp_ = registerRspBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (requestTokenBuilder_ == null) {
          result.requestToken_ = requestToken_;
        } else {
          result.requestToken_ = requestTokenBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (requestTokenRspBuilder_ == null) {
          result.requestTokenRsp_ = requestTokenRsp_;
        } else {
          result.requestTokenRsp_ = requestTokenRspBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg) {
          return mergeFrom((com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg other) {
        if (other == com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        if (other.hasRegister()) {
          mergeRegister(other.getRegister());
        }
        if (other.hasRegisterRsp()) {
          mergeRegisterRsp(other.getRegisterRsp());
        }
        if (other.hasRequestToken()) {
          mergeRequestToken(other.getRequestToken());
        }
        if (other.hasRequestTokenRsp()) {
          mergeRequestTokenRsp(other.getRequestTokenRsp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersion()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasSequence()) {
          
          return false;
        }
        if (hasRegister()) {
          if (!getRegister().isInitialized()) {
            
            return false;
          }
        }
        if (hasRegisterRsp()) {
          if (!getRegisterRsp().isInitialized()) {
            
            return false;
          }
        }
        if (hasRequestTokenRsp()) {
          if (!getRequestTokenRsp().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.commserver.CommServer.CommServerMsg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 version = 1;
      private int version_ ;
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * head
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      // required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;
      private com.letsmidi.monsys.protocol.commserver.CommServer.MsgType type_ = com.letsmidi.monsys.protocol.commserver.CommServer.MsgType.HEARTBEAT;
      /**
       * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.MsgType getType() {
        return type_;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
       */
      public Builder setType(com.letsmidi.monsys.protocol.commserver.CommServer.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = com.letsmidi.monsys.protocol.commserver.CommServer.MsgType.HEARTBEAT;
        onChanged();
        return this;
      }

      // required uint32 sequence = 3;
      private int sequence_ ;
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public boolean hasSequence() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public int getSequence() {
        return sequence_;
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public Builder setSequence(int value) {
        bitField0_ |= 0x00000004;
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       *
       * <pre>
       * required uint32 reserved = 4;
       * </pre>
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sequence_ = 0;
        onChanged();
        return this;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;
      private com.letsmidi.monsys.protocol.commserver.CommServer.Register register_ = com.letsmidi.monsys.protocol.commserver.CommServer.Register.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.Register, com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterOrBuilder> registerBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public boolean hasRegister() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.Register getRegister() {
        if (registerBuilder_ == null) {
          return register_;
        } else {
          return registerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder setRegister(com.letsmidi.monsys.protocol.commserver.CommServer.Register value) {
        if (registerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          register_ = value;
          onChanged();
        } else {
          registerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder setRegister(
          com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder builderForValue) {
        if (registerBuilder_ == null) {
          register_ = builderForValue.build();
          onChanged();
        } else {
          registerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder mergeRegister(com.letsmidi.monsys.protocol.commserver.CommServer.Register value) {
        if (registerBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              register_ != com.letsmidi.monsys.protocol.commserver.CommServer.Register.getDefaultInstance()) {
            register_ =
              com.letsmidi.monsys.protocol.commserver.CommServer.Register.newBuilder(register_).mergeFrom(value).buildPartial();
          } else {
            register_ = value;
          }
          onChanged();
        } else {
          registerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public Builder clearRegister() {
        if (registerBuilder_ == null) {
          register_ = com.letsmidi.monsys.protocol.commserver.CommServer.Register.getDefaultInstance();
          onChanged();
        } else {
          registerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder getRegisterBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getRegisterFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterOrBuilder getRegisterOrBuilder() {
        if (registerBuilder_ != null) {
          return registerBuilder_.getMessageOrBuilder();
        } else {
          return register_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;</code>
       *
       * <pre>
       * login
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.Register, com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterOrBuilder> 
          getRegisterFieldBuilder() {
        if (registerBuilder_ == null) {
          registerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.commserver.CommServer.Register, com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterOrBuilder>(
                  register_,
                  getParentForChildren(),
                  isClean());
          register_ = null;
        }
        return registerBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;
      private com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp registerRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRspOrBuilder> registerRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public boolean hasRegisterRsp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp getRegisterRsp() {
        if (registerRspBuilder_ == null) {
          return registerRsp_;
        } else {
          return registerRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public Builder setRegisterRsp(com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp value) {
        if (registerRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          registerRsp_ = value;
          onChanged();
        } else {
          registerRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public Builder setRegisterRsp(
          com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder builderForValue) {
        if (registerRspBuilder_ == null) {
          registerRsp_ = builderForValue.build();
          onChanged();
        } else {
          registerRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public Builder mergeRegisterRsp(com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp value) {
        if (registerRspBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              registerRsp_ != com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.getDefaultInstance()) {
            registerRsp_ =
              com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.newBuilder(registerRsp_).mergeFrom(value).buildPartial();
          } else {
            registerRsp_ = value;
          }
          onChanged();
        } else {
          registerRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public Builder clearRegisterRsp() {
        if (registerRspBuilder_ == null) {
          registerRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.getDefaultInstance();
          onChanged();
        } else {
          registerRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder getRegisterRspBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getRegisterRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRspOrBuilder getRegisterRspOrBuilder() {
        if (registerRspBuilder_ != null) {
          return registerRspBuilder_.getMessageOrBuilder();
        } else {
          return registerRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRspOrBuilder> 
          getRegisterRspFieldBuilder() {
        if (registerRspBuilder_ == null) {
          registerRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRspOrBuilder>(
                  registerRsp_,
                  getParentForChildren(),
                  isClean());
          registerRsp_ = null;
        }
        return registerRspBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;
      private com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken requestToken_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken, com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenOrBuilder> requestTokenBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public boolean hasRequestToken() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken getRequestToken() {
        if (requestTokenBuilder_ == null) {
          return requestToken_;
        } else {
          return requestTokenBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public Builder setRequestToken(com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken value) {
        if (requestTokenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestToken_ = value;
          onChanged();
        } else {
          requestTokenBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public Builder setRequestToken(
          com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder builderForValue) {
        if (requestTokenBuilder_ == null) {
          requestToken_ = builderForValue.build();
          onChanged();
        } else {
          requestTokenBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public Builder mergeRequestToken(com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken value) {
        if (requestTokenBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              requestToken_ != com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.getDefaultInstance()) {
            requestToken_ =
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.newBuilder(requestToken_).mergeFrom(value).buildPartial();
          } else {
            requestToken_ = value;
          }
          onChanged();
        } else {
          requestTokenBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public Builder clearRequestToken() {
        if (requestTokenBuilder_ == null) {
          requestToken_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.getDefaultInstance();
          onChanged();
        } else {
          requestTokenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder getRequestTokenBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getRequestTokenFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenOrBuilder getRequestTokenOrBuilder() {
        if (requestTokenBuilder_ != null) {
          return requestTokenBuilder_.getMessageOrBuilder();
        } else {
          return requestToken_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;</code>
       *
       * <pre>
       * request-token
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken, com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenOrBuilder> 
          getRequestTokenFieldBuilder() {
        if (requestTokenBuilder_ == null) {
          requestTokenBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken, com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenOrBuilder>(
                  requestToken_,
                  getParentForChildren(),
                  isClean());
          requestToken_ = null;
        }
        return requestTokenBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;
      private com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp requestTokenRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRspOrBuilder> requestTokenRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public boolean hasRequestTokenRsp() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp getRequestTokenRsp() {
        if (requestTokenRspBuilder_ == null) {
          return requestTokenRsp_;
        } else {
          return requestTokenRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public Builder setRequestTokenRsp(com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp value) {
        if (requestTokenRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestTokenRsp_ = value;
          onChanged();
        } else {
          requestTokenRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public Builder setRequestTokenRsp(
          com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder builderForValue) {
        if (requestTokenRspBuilder_ == null) {
          requestTokenRsp_ = builderForValue.build();
          onChanged();
        } else {
          requestTokenRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public Builder mergeRequestTokenRsp(com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp value) {
        if (requestTokenRspBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              requestTokenRsp_ != com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.getDefaultInstance()) {
            requestTokenRsp_ =
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.newBuilder(requestTokenRsp_).mergeFrom(value).buildPartial();
          } else {
            requestTokenRsp_ = value;
          }
          onChanged();
        } else {
          requestTokenRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public Builder clearRequestTokenRsp() {
        if (requestTokenRspBuilder_ == null) {
          requestTokenRsp_ = com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.getDefaultInstance();
          onChanged();
        } else {
          requestTokenRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder getRequestTokenRspBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getRequestTokenRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRspOrBuilder getRequestTokenRspOrBuilder() {
        if (requestTokenRspBuilder_ != null) {
          return requestTokenRspBuilder_.getMessageOrBuilder();
        } else {
          return requestTokenRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRspOrBuilder> 
          getRequestTokenRspFieldBuilder() {
        if (requestTokenRspBuilder_ == null) {
          requestTokenRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRspOrBuilder>(
                  requestTokenRsp_,
                  getParentForChildren(),
                  isClean());
          requestTokenRsp_ = null;
        }
        return requestTokenRspBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
    }

    static {
      defaultInstance = new CommServerMsg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  }

  public interface RegisterOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string ip_v4_addr = 1;
    /**
     * <code>required string ip_v4_addr = 1;</code>
     */
    boolean hasIpV4Addr();
    /**
     * <code>required string ip_v4_addr = 1;</code>
     */
    java.lang.String getIpV4Addr();
    /**
     * <code>required string ip_v4_addr = 1;</code>
     */
    com.google.protobuf.ByteString
        getIpV4AddrBytes();

    // required uint32 port = 2;
    /**
     * <code>required uint32 port = 2;</code>
     */
    boolean hasPort();
    /**
     * <code>required uint32 port = 2;</code>
     */
    int getPort();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.Register}
   *
   * <pre>
   * comm server -&gt; login server
   * </pre>
   */
  public static final class Register extends
      com.google.protobuf.GeneratedMessage
      implements RegisterOrBuilder {
    // Use Register.newBuilder() to construct.
    private Register(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Register(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Register defaultInstance;
    public static Register getDefaultInstance() {
      return defaultInstance;
    }

    public Register getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Register(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              ipV4Addr_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              port_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_Register_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_Register_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.commserver.CommServer.Register.class, com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder.class);
    }

    public static com.google.protobuf.Parser<Register> PARSER =
        new com.google.protobuf.AbstractParser<Register>() {
      public Register parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Register(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Register> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string ip_v4_addr = 1;
    public static final int IP_V4_ADDR_FIELD_NUMBER = 1;
    private java.lang.Object ipV4Addr_;
    /**
     * <code>required string ip_v4_addr = 1;</code>
     */
    public boolean hasIpV4Addr() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string ip_v4_addr = 1;</code>
     */
    public java.lang.String getIpV4Addr() {
      java.lang.Object ref = ipV4Addr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipV4Addr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string ip_v4_addr = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIpV4AddrBytes() {
      java.lang.Object ref = ipV4Addr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipV4Addr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required uint32 port = 2;
    public static final int PORT_FIELD_NUMBER = 2;
    private int port_;
    /**
     * <code>required uint32 port = 2;</code>
     */
    public boolean hasPort() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 port = 2;</code>
     */
    public int getPort() {
      return port_;
    }

    private void initFields() {
      ipV4Addr_ = "";
      port_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasIpV4Addr()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPort()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIpV4AddrBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, port_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getIpV4AddrBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, port_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.Register parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.commserver.CommServer.Register prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.Register}
     *
     * <pre>
     * comm server -&gt; login server
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.commserver.CommServer.RegisterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_Register_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_Register_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.commserver.CommServer.Register.class, com.letsmidi.monsys.protocol.commserver.CommServer.Register.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.commserver.CommServer.Register.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        ipV4Addr_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        port_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_Register_descriptor;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.Register getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.Register.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.Register build() {
        com.letsmidi.monsys.protocol.commserver.CommServer.Register result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.Register buildPartial() {
        com.letsmidi.monsys.protocol.commserver.CommServer.Register result = new com.letsmidi.monsys.protocol.commserver.CommServer.Register(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ipV4Addr_ = ipV4Addr_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.port_ = port_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.commserver.CommServer.Register) {
          return mergeFrom((com.letsmidi.monsys.protocol.commserver.CommServer.Register)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.commserver.CommServer.Register other) {
        if (other == com.letsmidi.monsys.protocol.commserver.CommServer.Register.getDefaultInstance()) return this;
        if (other.hasIpV4Addr()) {
          bitField0_ |= 0x00000001;
          ipV4Addr_ = other.ipV4Addr_;
          onChanged();
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIpV4Addr()) {
          
          return false;
        }
        if (!hasPort()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.commserver.CommServer.Register parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.commserver.CommServer.Register) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string ip_v4_addr = 1;
      private java.lang.Object ipV4Addr_ = "";
      /**
       * <code>required string ip_v4_addr = 1;</code>
       */
      public boolean hasIpV4Addr() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string ip_v4_addr = 1;</code>
       */
      public java.lang.String getIpV4Addr() {
        java.lang.Object ref = ipV4Addr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ipV4Addr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string ip_v4_addr = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIpV4AddrBytes() {
        java.lang.Object ref = ipV4Addr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipV4Addr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string ip_v4_addr = 1;</code>
       */
      public Builder setIpV4Addr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        ipV4Addr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_v4_addr = 1;</code>
       */
      public Builder clearIpV4Addr() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ipV4Addr_ = getDefaultInstance().getIpV4Addr();
        onChanged();
        return this;
      }
      /**
       * <code>required string ip_v4_addr = 1;</code>
       */
      public Builder setIpV4AddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        ipV4Addr_ = value;
        onChanged();
        return this;
      }

      // required uint32 port = 2;
      private int port_ ;
      /**
       * <code>required uint32 port = 2;</code>
       */
      public boolean hasPort() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 port = 2;</code>
       */
      public int getPort() {
        return port_;
      }
      /**
       * <code>required uint32 port = 2;</code>
       */
      public Builder setPort(int value) {
        bitField0_ |= 0x00000002;
        port_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 port = 2;</code>
       */
      public Builder clearPort() {
        bitField0_ = (bitField0_ & ~0x00000002);
        port_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.commserver.Register)
    }

    static {
      defaultInstance = new Register(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.commserver.Register)
  }

  public interface RegisterRspOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 code = 1;
    /**
     * <code>required int32 code = 1;</code>
     */
    boolean hasCode();
    /**
     * <code>required int32 code = 1;</code>
     */
    int getCode();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.RegisterRsp}
   */
  public static final class RegisterRsp extends
      com.google.protobuf.GeneratedMessage
      implements RegisterRspOrBuilder {
    // Use RegisterRsp.newBuilder() to construct.
    private RegisterRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RegisterRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RegisterRsp defaultInstance;
    public static RegisterRsp getDefaultInstance() {
      return defaultInstance;
    }

    public RegisterRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RegisterRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              code_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.class, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<RegisterRsp> PARSER =
        new com.google.protobuf.AbstractParser<RegisterRsp>() {
      public RegisterRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegisterRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegisterRsp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 code = 1;
    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>required int32 code = 1;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 code = 1;</code>
     */
    public int getCode() {
      return code_;
    }

    private void initFields() {
      code_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, code_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, code_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.RegisterRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.class, com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        code_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp build() {
        com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp buildPartial() {
        com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp result = new com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.code_ = code_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp other) {
        if (other == com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp.getDefaultInstance()) return this;
        if (other.hasCode()) {
          setCode(other.getCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCode()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.commserver.CommServer.RegisterRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 code = 1;
      private int code_ ;
      /**
       * <code>required int32 code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder setCode(int value) {
        bitField0_ |= 0x00000001;
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        code_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
    }

    static {
      defaultInstance = new RegisterRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  }

  public interface RequestTokenOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.RequestToken}
   *
   * <pre>
   * login server -&gt; comm server
   * </pre>
   */
  public static final class RequestToken extends
      com.google.protobuf.GeneratedMessage
      implements RequestTokenOrBuilder {
    // Use RequestToken.newBuilder() to construct.
    private RequestToken(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RequestToken(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RequestToken defaultInstance;
    public static RequestToken getDefaultInstance() {
      return defaultInstance;
    }

    public RequestToken getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RequestToken(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.class, com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder.class);
    }

    public static com.google.protobuf.Parser<RequestToken> PARSER =
        new com.google.protobuf.AbstractParser<RequestToken>() {
      public RequestToken parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RequestToken(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RequestToken> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.RequestToken}
     *
     * <pre>
     * login server -&gt; comm server
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.class, com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_descriptor;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken build() {
        com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken buildPartial() {
        com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken result = new com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken) {
          return mergeFrom((com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken other) {
        if (other == com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.commserver.CommServer.RequestToken) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.commserver.RequestToken)
    }

    static {
      defaultInstance = new RequestToken(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.commserver.RequestToken)
  }

  public interface RequestTokenRspOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 code = 1;
    /**
     * <code>required int32 code = 1;</code>
     */
    boolean hasCode();
    /**
     * <code>required int32 code = 1;</code>
     */
    int getCode();

    // required string token = 2;
    /**
     * <code>required string token = 2;</code>
     */
    boolean hasToken();
    /**
     * <code>required string token = 2;</code>
     */
    java.lang.String getToken();
    /**
     * <code>required string token = 2;</code>
     */
    com.google.protobuf.ByteString
        getTokenBytes();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.RequestTokenRsp}
   */
  public static final class RequestTokenRsp extends
      com.google.protobuf.GeneratedMessage
      implements RequestTokenRspOrBuilder {
    // Use RequestTokenRsp.newBuilder() to construct.
    private RequestTokenRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RequestTokenRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RequestTokenRsp defaultInstance;
    public static RequestTokenRsp getDefaultInstance() {
      return defaultInstance;
    }

    public RequestTokenRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RequestTokenRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              code_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              token_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.class, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<RequestTokenRsp> PARSER =
        new com.google.protobuf.AbstractParser<RequestTokenRsp>() {
      public RequestTokenRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RequestTokenRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RequestTokenRsp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 code = 1;
    public static final int CODE_FIELD_NUMBER = 1;
    private int code_;
    /**
     * <code>required int32 code = 1;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 code = 1;</code>
     */
    public int getCode() {
      return code_;
    }

    // required string token = 2;
    public static final int TOKEN_FIELD_NUMBER = 2;
    private java.lang.Object token_;
    /**
     * <code>required string token = 2;</code>
     */
    public boolean hasToken() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string token = 2;</code>
     */
    public java.lang.String getToken() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          token_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string token = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      code_ = 0;
      token_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasCode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasToken()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, code_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTokenBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, code_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTokenBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.commserver.RequestTokenRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.class, com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        code_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        token_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp build() {
        com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp buildPartial() {
        com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp result = new com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.code_ = code_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.token_ = token_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp other) {
        if (other == com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp.getDefaultInstance()) return this;
        if (other.hasCode()) {
          setCode(other.getCode());
        }
        if (other.hasToken()) {
          bitField0_ |= 0x00000002;
          token_ = other.token_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCode()) {
          
          return false;
        }
        if (!hasToken()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.commserver.CommServer.RequestTokenRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 code = 1;
      private int code_ ;
      /**
       * <code>required int32 code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder setCode(int value) {
        bitField0_ |= 0x00000001;
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 code = 1;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        code_ = 0;
        onChanged();
        return this;
      }

      // required string token = 2;
      private java.lang.Object token_ = "";
      /**
       * <code>required string token = 2;</code>
       */
      public boolean hasToken() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string token = 2;</code>
       */
      public java.lang.String getToken() {
        java.lang.Object ref = token_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          token_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string token = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        java.lang.Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string token = 2;</code>
       */
      public Builder setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string token = 2;</code>
       */
      public Builder clearToken() {
        bitField0_ = (bitField0_ & ~0x00000002);
        token_ = getDefaultInstance().getToken();
        onChanged();
        return this;
      }
      /**
       * <code>required string token = 2;</code>
       */
      public Builder setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        token_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
    }

    static {
      defaultInstance = new RequestTokenRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_commserver_Register_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_commserver_Register_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021comm_server.proto\022\'com.letsmidi.monsys" +
      ".protocol.commserver\"\246\003\n\rCommServerMsg\022\017" +
      "\n\007version\030\001 \002(\r\022>\n\004type\030\002 \002(\01620.com.lets" +
      "midi.monsys.protocol.commserver.MsgType\022" +
      "\020\n\010sequence\030\003 \002(\r\022C\n\010register\030\005 \001(\01321.co" +
      "m.letsmidi.monsys.protocol.commserver.Re" +
      "gister\022J\n\014register_rsp\030\006 \001(\01324.com.letsm" +
      "idi.monsys.protocol.commserver.RegisterR" +
      "sp\022L\n\rrequest_token\030\007 \001(\01325.com.letsmidi" +
      ".monsys.protocol.commserver.RequestToken",
      "\022S\n\021request_token_rsp\030\010 \001(\01328.com.letsmi" +
      "di.monsys.protocol.commserver.RequestTok" +
      "enRsp\",\n\010Register\022\022\n\nip_v4_addr\030\001 \002(\t\022\014\n" +
      "\004port\030\002 \002(\r\"\033\n\013RegisterRsp\022\014\n\004code\030\001 \002(\005" +
      "\"\016\n\014RequestToken\".\n\017RequestTokenRsp\022\014\n\004c" +
      "ode\030\001 \002(\005\022\r\n\005token\030\002 \002(\t*b\n\007MsgType\022\r\n\tH" +
      "EARTBEAT\020\001\022\014\n\010REGISTER\020\003\022\020\n\014REGISTER_RSP" +
      "\020\004\022\021\n\rREQUEST_TOKEN\020\005\022\025\n\021REQUEST_TOKEN_R" +
      "SP\020\006"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_commserver_CommServerMsg_descriptor,
              new java.lang.String[] { "Version", "Type", "Sequence", "Register", "RegisterRsp", "RequestToken", "RequestTokenRsp", });
          internal_static_com_letsmidi_monsys_protocol_commserver_Register_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_letsmidi_monsys_protocol_commserver_Register_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_commserver_Register_descriptor,
              new java.lang.String[] { "IpV4Addr", "Port", });
          internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_commserver_RegisterRsp_descriptor,
              new java.lang.String[] { "Code", });
          internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_commserver_RequestToken_descriptor,
              new java.lang.String[] { });
          internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_commserver_RequestTokenRsp_descriptor,
              new java.lang.String[] { "Code", "Token", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
