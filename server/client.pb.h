// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {
namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class ClientMsg;
class Login;
class LoginRsp;
class RequestCommServer;
class RequestCommServerRsp;
class GetFgwList;
class GetFgwListRsp;

enum MsgType {
  HEARTBEAT = 1,
  LOGIN = 3,
  LOGIN_RSP = 4,
  REQUEST_COMM_SERVER = 5,
  REQUEST_COMM_SERVER_RSP = 6,
  GET_FGW_LIST = 7,
  GET_FGW_LIST_RSP = 8
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = HEARTBEAT;
const MsgType MsgType_MAX = GET_FGW_LIST_RSP;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum ClientType {
  CLIENT_TYPE_ANDROID = 1
};
bool ClientType_IsValid(int value);
const ClientType ClientType_MIN = CLIENT_TYPE_ANDROID;
const ClientType ClientType_MAX = CLIENT_TYPE_ANDROID;
const int ClientType_ARRAYSIZE = ClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientType_descriptor();
inline const ::std::string& ClientType_Name(ClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientType_descriptor(), value);
}
inline bool ClientType_Parse(
    const ::std::string& name, ClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientType>(
    ClientType_descriptor(), name, value);
}
// ===================================================================

class ClientMsg : public ::google::protobuf::Message {
 public:
  ClientMsg();
  virtual ~ClientMsg();

  ClientMsg(const ClientMsg& from);

  inline ClientMsg& operator=(const ClientMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMsg& default_instance();

  void Swap(ClientMsg* other);

  // implements Message ----------------------------------------------

  ClientMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMsg& from);
  void MergeFrom(const ClientMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required .com.letsmidi.monsys.protocol.client.MsgType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::com::letsmidi::monsys::protocol::client::MsgType type() const;
  inline void set_type(::com::letsmidi::monsys::protocol::client::MsgType value);

  // required uint32 sequence = 3;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 3;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional .com.letsmidi.monsys.protocol.client.Login login = 5;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 5;
  inline const ::com::letsmidi::monsys::protocol::client::Login& login() const;
  inline ::com::letsmidi::monsys::protocol::client::Login* mutable_login();
  inline ::com::letsmidi::monsys::protocol::client::Login* release_login();
  inline void set_allocated_login(::com::letsmidi::monsys::protocol::client::Login* login);

  // optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;
  inline bool has_login_rsp() const;
  inline void clear_login_rsp();
  static const int kLoginRspFieldNumber = 6;
  inline const ::com::letsmidi::monsys::protocol::client::LoginRsp& login_rsp() const;
  inline ::com::letsmidi::monsys::protocol::client::LoginRsp* mutable_login_rsp();
  inline ::com::letsmidi::monsys::protocol::client::LoginRsp* release_login_rsp();
  inline void set_allocated_login_rsp(::com::letsmidi::monsys::protocol::client::LoginRsp* login_rsp);

  // optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;
  inline bool has_request_comm_server() const;
  inline void clear_request_comm_server();
  static const int kRequestCommServerFieldNumber = 7;
  inline const ::com::letsmidi::monsys::protocol::client::RequestCommServer& request_comm_server() const;
  inline ::com::letsmidi::monsys::protocol::client::RequestCommServer* mutable_request_comm_server();
  inline ::com::letsmidi::monsys::protocol::client::RequestCommServer* release_request_comm_server();
  inline void set_allocated_request_comm_server(::com::letsmidi::monsys::protocol::client::RequestCommServer* request_comm_server);

  // optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;
  inline bool has_request_comm_server_rsp() const;
  inline void clear_request_comm_server_rsp();
  static const int kRequestCommServerRspFieldNumber = 8;
  inline const ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp& request_comm_server_rsp() const;
  inline ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* mutable_request_comm_server_rsp();
  inline ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* release_request_comm_server_rsp();
  inline void set_allocated_request_comm_server_rsp(::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* request_comm_server_rsp);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.ClientMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_login_rsp();
  inline void clear_has_login_rsp();
  inline void set_has_request_comm_server();
  inline void clear_has_request_comm_server();
  inline void set_has_request_comm_server_rsp();
  inline void clear_has_request_comm_server_rsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  int type_;
  ::com::letsmidi::monsys::protocol::client::Login* login_;
  ::com::letsmidi::monsys::protocol::client::LoginRsp* login_rsp_;
  ::com::letsmidi::monsys::protocol::client::RequestCommServer* request_comm_server_;
  ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* request_comm_server_rsp_;
  ::google::protobuf::uint32 sequence_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static ClientMsg* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 1;
  inline ::com::letsmidi::monsys::protocol::client::ClientType client_type() const;
  inline void set_client_type(::com::letsmidi::monsys::protocol::client::ClientType value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.Login)
 private:
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* password_;
  int client_type_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.LoginRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class RequestCommServer : public ::google::protobuf::Message {
 public:
  RequestCommServer();
  virtual ~RequestCommServer();

  RequestCommServer(const RequestCommServer& from);

  inline RequestCommServer& operator=(const RequestCommServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestCommServer& default_instance();

  void Swap(RequestCommServer* other);

  // implements Message ----------------------------------------------

  RequestCommServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestCommServer& from);
  void MergeFrom(const RequestCommServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.RequestCommServer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static RequestCommServer* default_instance_;
};
// -------------------------------------------------------------------

class RequestCommServerRsp : public ::google::protobuf::Message {
 public:
  RequestCommServerRsp();
  virtual ~RequestCommServerRsp();

  RequestCommServerRsp(const RequestCommServerRsp& from);

  inline RequestCommServerRsp& operator=(const RequestCommServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestCommServerRsp& default_instance();

  void Swap(RequestCommServerRsp* other);

  // implements Message ----------------------------------------------

  RequestCommServerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestCommServerRsp& from);
  void MergeFrom(const RequestCommServerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // required string ip_v4_addr = 2;
  inline bool has_ip_v4_addr() const;
  inline void clear_ip_v4_addr();
  static const int kIpV4AddrFieldNumber = 2;
  inline const ::std::string& ip_v4_addr() const;
  inline void set_ip_v4_addr(const ::std::string& value);
  inline void set_ip_v4_addr(const char* value);
  inline void set_ip_v4_addr(const char* value, size_t size);
  inline ::std::string* mutable_ip_v4_addr();
  inline ::std::string* release_ip_v4_addr();
  inline void set_allocated_ip_v4_addr(::std::string* ip_v4_addr);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required string exchangeId = 4;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 4;
  inline const ::std::string& exchangeid() const;
  inline void set_exchangeid(const ::std::string& value);
  inline void set_exchangeid(const char* value);
  inline void set_exchangeid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeid();
  inline ::std::string* release_exchangeid();
  inline void set_allocated_exchangeid(::std::string* exchangeid);

  // required string peerId = 5;
  inline bool has_peerid() const;
  inline void clear_peerid();
  static const int kPeerIdFieldNumber = 5;
  inline const ::std::string& peerid() const;
  inline void set_peerid(const ::std::string& value);
  inline void set_peerid(const char* value);
  inline void set_peerid(const char* value, size_t size);
  inline ::std::string* mutable_peerid();
  inline ::std::string* release_peerid();
  inline void set_allocated_peerid(::std::string* peerid);

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_ip_v4_addr();
  inline void clear_has_ip_v4_addr();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_peerid();
  inline void clear_has_peerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_v4_addr_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 port_;
  ::std::string* exchangeid_;
  ::std::string* peerid_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static RequestCommServerRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetFgwList : public ::google::protobuf::Message {
 public:
  GetFgwList();
  virtual ~GetFgwList();

  GetFgwList(const GetFgwList& from);

  inline GetFgwList& operator=(const GetFgwList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFgwList& default_instance();

  void Swap(GetFgwList* other);

  // implements Message ----------------------------------------------

  GetFgwList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFgwList& from);
  void MergeFrom(const GetFgwList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.GetFgwList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static GetFgwList* default_instance_;
};
// -------------------------------------------------------------------

class GetFgwListRsp : public ::google::protobuf::Message {
 public:
  GetFgwListRsp();
  virtual ~GetFgwListRsp();

  GetFgwListRsp(const GetFgwListRsp& from);

  inline GetFgwListRsp& operator=(const GetFgwListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFgwListRsp& default_instance();

  void Swap(GetFgwListRsp* other);

  // implements Message ----------------------------------------------

  GetFgwListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFgwListRsp& from);
  void MergeFrom(const GetFgwListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.client.GetFgwListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static GetFgwListRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientMsg

// required uint32 version = 1;
inline bool ClientMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMsg::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ClientMsg::version() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.ClientMsg.version)
  return version_;
}
inline void ClientMsg::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.ClientMsg.version)
}

// required .com.letsmidi.monsys.protocol.client.MsgType type = 2;
inline bool ClientMsg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMsg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::com::letsmidi::monsys::protocol::client::MsgType ClientMsg::type() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.ClientMsg.type)
  return static_cast< ::com::letsmidi::monsys::protocol::client::MsgType >(type_);
}
inline void ClientMsg::set_type(::com::letsmidi::monsys::protocol::client::MsgType value) {
  assert(::com::letsmidi::monsys::protocol::client::MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.ClientMsg.type)
}

// required uint32 sequence = 3;
inline bool ClientMsg::has_sequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientMsg::set_has_sequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientMsg::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientMsg::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 ClientMsg::sequence() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.ClientMsg.sequence)
  return sequence_;
}
inline void ClientMsg::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.ClientMsg.sequence)
}

// optional .com.letsmidi.monsys.protocol.client.Login login = 5;
inline bool ClientMsg::has_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientMsg::set_has_login() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientMsg::clear_has_login() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientMsg::clear_login() {
  if (login_ != NULL) login_->::com::letsmidi::monsys::protocol::client::Login::Clear();
  clear_has_login();
}
inline const ::com::letsmidi::monsys::protocol::client::Login& ClientMsg::login() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.ClientMsg.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::com::letsmidi::monsys::protocol::client::Login* ClientMsg::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::com::letsmidi::monsys::protocol::client::Login;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.ClientMsg.login)
  return login_;
}
inline ::com::letsmidi::monsys::protocol::client::Login* ClientMsg::release_login() {
  clear_has_login();
  ::com::letsmidi::monsys::protocol::client::Login* temp = login_;
  login_ = NULL;
  return temp;
}
inline void ClientMsg::set_allocated_login(::com::letsmidi::monsys::protocol::client::Login* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.ClientMsg.login)
}

// optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;
inline bool ClientMsg::has_login_rsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientMsg::set_has_login_rsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientMsg::clear_has_login_rsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientMsg::clear_login_rsp() {
  if (login_rsp_ != NULL) login_rsp_->::com::letsmidi::monsys::protocol::client::LoginRsp::Clear();
  clear_has_login_rsp();
}
inline const ::com::letsmidi::monsys::protocol::client::LoginRsp& ClientMsg::login_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.ClientMsg.login_rsp)
  return login_rsp_ != NULL ? *login_rsp_ : *default_instance_->login_rsp_;
}
inline ::com::letsmidi::monsys::protocol::client::LoginRsp* ClientMsg::mutable_login_rsp() {
  set_has_login_rsp();
  if (login_rsp_ == NULL) login_rsp_ = new ::com::letsmidi::monsys::protocol::client::LoginRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.ClientMsg.login_rsp)
  return login_rsp_;
}
inline ::com::letsmidi::monsys::protocol::client::LoginRsp* ClientMsg::release_login_rsp() {
  clear_has_login_rsp();
  ::com::letsmidi::monsys::protocol::client::LoginRsp* temp = login_rsp_;
  login_rsp_ = NULL;
  return temp;
}
inline void ClientMsg::set_allocated_login_rsp(::com::letsmidi::monsys::protocol::client::LoginRsp* login_rsp) {
  delete login_rsp_;
  login_rsp_ = login_rsp;
  if (login_rsp) {
    set_has_login_rsp();
  } else {
    clear_has_login_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.ClientMsg.login_rsp)
}

// optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;
inline bool ClientMsg::has_request_comm_server() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientMsg::set_has_request_comm_server() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientMsg::clear_has_request_comm_server() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientMsg::clear_request_comm_server() {
  if (request_comm_server_ != NULL) request_comm_server_->::com::letsmidi::monsys::protocol::client::RequestCommServer::Clear();
  clear_has_request_comm_server();
}
inline const ::com::letsmidi::monsys::protocol::client::RequestCommServer& ClientMsg::request_comm_server() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.ClientMsg.request_comm_server)
  return request_comm_server_ != NULL ? *request_comm_server_ : *default_instance_->request_comm_server_;
}
inline ::com::letsmidi::monsys::protocol::client::RequestCommServer* ClientMsg::mutable_request_comm_server() {
  set_has_request_comm_server();
  if (request_comm_server_ == NULL) request_comm_server_ = new ::com::letsmidi::monsys::protocol::client::RequestCommServer;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.ClientMsg.request_comm_server)
  return request_comm_server_;
}
inline ::com::letsmidi::monsys::protocol::client::RequestCommServer* ClientMsg::release_request_comm_server() {
  clear_has_request_comm_server();
  ::com::letsmidi::monsys::protocol::client::RequestCommServer* temp = request_comm_server_;
  request_comm_server_ = NULL;
  return temp;
}
inline void ClientMsg::set_allocated_request_comm_server(::com::letsmidi::monsys::protocol::client::RequestCommServer* request_comm_server) {
  delete request_comm_server_;
  request_comm_server_ = request_comm_server;
  if (request_comm_server) {
    set_has_request_comm_server();
  } else {
    clear_has_request_comm_server();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.ClientMsg.request_comm_server)
}

// optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;
inline bool ClientMsg::has_request_comm_server_rsp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientMsg::set_has_request_comm_server_rsp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientMsg::clear_has_request_comm_server_rsp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientMsg::clear_request_comm_server_rsp() {
  if (request_comm_server_rsp_ != NULL) request_comm_server_rsp_->::com::letsmidi::monsys::protocol::client::RequestCommServerRsp::Clear();
  clear_has_request_comm_server_rsp();
}
inline const ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp& ClientMsg::request_comm_server_rsp() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.ClientMsg.request_comm_server_rsp)
  return request_comm_server_rsp_ != NULL ? *request_comm_server_rsp_ : *default_instance_->request_comm_server_rsp_;
}
inline ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* ClientMsg::mutable_request_comm_server_rsp() {
  set_has_request_comm_server_rsp();
  if (request_comm_server_rsp_ == NULL) request_comm_server_rsp_ = new ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp;
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.ClientMsg.request_comm_server_rsp)
  return request_comm_server_rsp_;
}
inline ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* ClientMsg::release_request_comm_server_rsp() {
  clear_has_request_comm_server_rsp();
  ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* temp = request_comm_server_rsp_;
  request_comm_server_rsp_ = NULL;
  return temp;
}
inline void ClientMsg::set_allocated_request_comm_server_rsp(::com::letsmidi::monsys::protocol::client::RequestCommServerRsp* request_comm_server_rsp) {
  delete request_comm_server_rsp_;
  request_comm_server_rsp_ = request_comm_server_rsp;
  if (request_comm_server_rsp) {
    set_has_request_comm_server_rsp();
  } else {
    clear_has_request_comm_server_rsp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.ClientMsg.request_comm_server_rsp)
}

// -------------------------------------------------------------------

// Login

// required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];
inline bool Login::has_client_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_client_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::com::letsmidi::monsys::protocol::client::ClientType Login::client_type() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.Login.client_type)
  return static_cast< ::com::letsmidi::monsys::protocol::client::ClientType >(client_type_);
}
inline void Login::set_client_type(::com::letsmidi::monsys::protocol::client::ClientType value) {
  assert(::com::letsmidi::monsys::protocol::client::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.Login.client_type)
}

// required string user_name = 2;
inline bool Login::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& Login::user_name() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.Login.user_name)
  return *user_name_;
}
inline void Login::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.Login.user_name)
}
inline void Login::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.client.Login.user_name)
}
inline void Login::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.client.Login.user_name)
}
inline ::std::string* Login::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.Login.user_name)
  return user_name_;
}
inline ::std::string* Login::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.Login.user_name)
}

// required string password = 3;
inline bool Login::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.Login.password)
  return *password_;
}
inline void Login::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.Login.password)
}
inline void Login::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.client.Login.password)
}
inline void Login::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.client.Login.password)
}
inline ::std::string* Login::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.Login.password)
  return password_;
}
inline ::std::string* Login::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.Login.password)
}

// -------------------------------------------------------------------

// LoginRsp

// required int32 code = 1;
inline bool LoginRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 LoginRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.LoginRsp.code)
  return code_;
}
inline void LoginRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.LoginRsp.code)
}

// -------------------------------------------------------------------

// RequestCommServer

// -------------------------------------------------------------------

// RequestCommServerRsp

// required int32 code = 1;
inline bool RequestCommServerRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestCommServerRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestCommServerRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestCommServerRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 RequestCommServerRsp::code() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.code)
  return code_;
}
inline void RequestCommServerRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.code)
}

// required string ip_v4_addr = 2;
inline bool RequestCommServerRsp::has_ip_v4_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestCommServerRsp::set_has_ip_v4_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestCommServerRsp::clear_has_ip_v4_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestCommServerRsp::clear_ip_v4_addr() {
  if (ip_v4_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_v4_addr_->clear();
  }
  clear_has_ip_v4_addr();
}
inline const ::std::string& RequestCommServerRsp::ip_v4_addr() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.ip_v4_addr)
  return *ip_v4_addr_;
}
inline void RequestCommServerRsp::set_ip_v4_addr(const ::std::string& value) {
  set_has_ip_v4_addr();
  if (ip_v4_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_v4_addr_ = new ::std::string;
  }
  ip_v4_addr_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.ip_v4_addr)
}
inline void RequestCommServerRsp::set_ip_v4_addr(const char* value) {
  set_has_ip_v4_addr();
  if (ip_v4_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_v4_addr_ = new ::std::string;
  }
  ip_v4_addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.ip_v4_addr)
}
inline void RequestCommServerRsp::set_ip_v4_addr(const char* value, size_t size) {
  set_has_ip_v4_addr();
  if (ip_v4_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_v4_addr_ = new ::std::string;
  }
  ip_v4_addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.ip_v4_addr)
}
inline ::std::string* RequestCommServerRsp::mutable_ip_v4_addr() {
  set_has_ip_v4_addr();
  if (ip_v4_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_v4_addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.ip_v4_addr)
  return ip_v4_addr_;
}
inline ::std::string* RequestCommServerRsp::release_ip_v4_addr() {
  clear_has_ip_v4_addr();
  if (ip_v4_addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_v4_addr_;
    ip_v4_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestCommServerRsp::set_allocated_ip_v4_addr(::std::string* ip_v4_addr) {
  if (ip_v4_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_v4_addr_;
  }
  if (ip_v4_addr) {
    set_has_ip_v4_addr();
    ip_v4_addr_ = ip_v4_addr;
  } else {
    clear_has_ip_v4_addr();
    ip_v4_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.ip_v4_addr)
}

// required int32 port = 3;
inline bool RequestCommServerRsp::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestCommServerRsp::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestCommServerRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestCommServerRsp::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 RequestCommServerRsp::port() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.port)
  return port_;
}
inline void RequestCommServerRsp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.port)
}

// required string exchangeId = 4;
inline bool RequestCommServerRsp::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestCommServerRsp::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestCommServerRsp::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestCommServerRsp::clear_exchangeid() {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_->clear();
  }
  clear_has_exchangeid();
}
inline const ::std::string& RequestCommServerRsp::exchangeid() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.exchangeId)
  return *exchangeid_;
}
inline void RequestCommServerRsp::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.exchangeId)
}
inline void RequestCommServerRsp::set_exchangeid(const char* value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.exchangeId)
}
inline void RequestCommServerRsp::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.exchangeId)
}
inline ::std::string* RequestCommServerRsp::mutable_exchangeid() {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exchangeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.exchangeId)
  return exchangeid_;
}
inline ::std::string* RequestCommServerRsp::release_exchangeid() {
  clear_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exchangeid_;
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestCommServerRsp::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (exchangeid) {
    set_has_exchangeid();
    exchangeid_ = exchangeid;
  } else {
    clear_has_exchangeid();
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.exchangeId)
}

// required string peerId = 5;
inline bool RequestCommServerRsp::has_peerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestCommServerRsp::set_has_peerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestCommServerRsp::clear_has_peerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestCommServerRsp::clear_peerid() {
  if (peerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peerid_->clear();
  }
  clear_has_peerid();
}
inline const ::std::string& RequestCommServerRsp::peerid() const {
  // @@protoc_insertion_point(field_get:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.peerId)
  return *peerid_;
}
inline void RequestCommServerRsp::set_peerid(const ::std::string& value) {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peerid_ = new ::std::string;
  }
  peerid_->assign(value);
  // @@protoc_insertion_point(field_set:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.peerId)
}
inline void RequestCommServerRsp::set_peerid(const char* value) {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peerid_ = new ::std::string;
  }
  peerid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.peerId)
}
inline void RequestCommServerRsp::set_peerid(const char* value, size_t size) {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peerid_ = new ::std::string;
  }
  peerid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.peerId)
}
inline ::std::string* RequestCommServerRsp::mutable_peerid() {
  set_has_peerid();
  if (peerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    peerid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.peerId)
  return peerid_;
}
inline ::std::string* RequestCommServerRsp::release_peerid() {
  clear_has_peerid();
  if (peerid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = peerid_;
    peerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestCommServerRsp::set_allocated_peerid(::std::string* peerid) {
  if (peerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peerid_;
  }
  if (peerid) {
    set_has_peerid();
    peerid_ = peerid;
  } else {
    clear_has_peerid();
    peerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.letsmidi.monsys.protocol.client.RequestCommServerRsp.peerId)
}

// -------------------------------------------------------------------

// GetFgwList

// -------------------------------------------------------------------

// GetFgwListRsp


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::letsmidi::monsys::protocol::client::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::letsmidi::monsys::protocol::client::MsgType>() {
  return ::com::letsmidi::monsys::protocol::client::MsgType_descriptor();
}
template <> struct is_proto_enum< ::com::letsmidi::monsys::protocol::client::ClientType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::letsmidi::monsys::protocol::client::ClientType>() {
  return ::com::letsmidi::monsys::protocol::client::ClientType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
