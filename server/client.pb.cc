// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {
namespace client {

namespace {

const ::google::protobuf::Descriptor* ClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCommServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCommServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCommServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCommServerRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  ClientMsg_descriptor_ = file->message_type(0);
  static const int ClientMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, login_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, request_comm_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, request_comm_server_rsp_),
  };
  ClientMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMsg_descriptor_,
      ClientMsg::default_instance_,
      ClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMsg));
  Login_descriptor_ = file->message_type(1);
  static const int Login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LoginRsp_descriptor_ = file->message_type(2);
  static const int LoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, code_),
  };
  LoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRsp_descriptor_,
      LoginRsp::default_instance_,
      LoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRsp));
  RequestCommServer_descriptor_ = file->message_type(3);
  static const int RequestCommServer_offsets_[1] = {
  };
  RequestCommServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCommServer_descriptor_,
      RequestCommServer::default_instance_,
      RequestCommServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCommServer));
  RequestCommServerRsp_descriptor_ = file->message_type(4);
  static const int RequestCommServerRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServerRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServerRsp, ip_v4_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServerRsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServerRsp, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServerRsp, peerid_),
  };
  RequestCommServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCommServerRsp_descriptor_,
      RequestCommServerRsp::default_instance_,
      RequestCommServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCommServerRsp));
  MsgType_descriptor_ = file->enum_type(0);
  ClientType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMsg_descriptor_, &ClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRsp_descriptor_, &LoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCommServer_descriptor_, &RequestCommServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCommServerRsp_descriptor_, &RequestCommServerRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete ClientMsg::default_instance_;
  delete ClientMsg_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LoginRsp::default_instance_;
  delete LoginRsp_reflection_;
  delete RequestCommServer::default_instance_;
  delete RequestCommServer_reflection_;
  delete RequestCommServerRsp::default_instance_;
  delete RequestCommServerRsp_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022#com.letsmidi.monsys.prot"
    "ocol.client\"\230\003\n\tClientMsg\022\017\n\007version\030\001 \002"
    "(\r\022:\n\004type\030\002 \002(\0162,.com.letsmidi.monsys.p"
    "rotocol.client.MsgType\022\020\n\010sequence\030\003 \002(\r"
    "\0229\n\005login\030\005 \001(\0132*.com.letsmidi.monsys.pr"
    "otocol.client.Login\022@\n\tlogin_rsp\030\006 \001(\0132-"
    ".com.letsmidi.monsys.protocol.client.Log"
    "inRsp\022S\n\023request_comm_server\030\007 \001(\01326.com"
    ".letsmidi.monsys.protocol.client.Request"
    "CommServer\022Z\n\027request_comm_server_rsp\030\010 "
    "\001(\01329.com.letsmidi.monsys.protocol.clien"
    "t.RequestCommServerRsp\"\207\001\n\005Login\022Y\n\013clie"
    "nt_type\030\001 \002(\0162/.com.letsmidi.monsys.prot"
    "ocol.client.ClientType:\023CLIENT_TYPE_ANDR"
    "OID\022\021\n\tuser_name\030\002 \002(\t\022\020\n\010password\030\003 \002(\t"
    "\"\030\n\010LoginRsp\022\014\n\004code\030\001 \002(\005\"\023\n\021RequestCom"
    "mServer\"j\n\024RequestCommServerRsp\022\014\n\004code\030"
    "\001 \002(\005\022\022\n\nip_v4_addr\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\022"
    "\022\n\nexchangeId\030\004 \002(\t\022\016\n\006peerId\030\005 \002(\t*h\n\007M"
    "sgType\022\r\n\tHEARTBEAT\020\001\022\t\n\005LOGIN\020\003\022\r\n\tLOGI"
    "N_RSP\020\004\022\027\n\023REQUEST_COMM_SERVER\020\005\022\033\n\027REQU"
    "EST_COMM_SERVER_RSP\020\006*%\n\nClientType\022\027\n\023C"
    "LIENT_TYPE_ANDROID\020\001", 900);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  ClientMsg::default_instance_ = new ClientMsg();
  Login::default_instance_ = new Login();
  LoginRsp::default_instance_ = new LoginRsp();
  RequestCommServer::default_instance_ = new RequestCommServer();
  RequestCommServerRsp::default_instance_ = new RequestCommServerRsp();
  ClientMsg::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  RequestCommServer::default_instance_->InitAsDefaultInstance();
  RequestCommServerRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientType_descriptor_;
}
bool ClientType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ClientMsg::kVersionFieldNumber;
const int ClientMsg::kTypeFieldNumber;
const int ClientMsg::kSequenceFieldNumber;
const int ClientMsg::kLoginFieldNumber;
const int ClientMsg::kLoginRspFieldNumber;
const int ClientMsg::kRequestCommServerFieldNumber;
const int ClientMsg::kRequestCommServerRspFieldNumber;
#endif  // !_MSC_VER

ClientMsg::ClientMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.client.ClientMsg)
}

void ClientMsg::InitAsDefaultInstance() {
  login_ = const_cast< ::com::letsmidi::monsys::protocol::client::Login*>(&::com::letsmidi::monsys::protocol::client::Login::default_instance());
  login_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::client::LoginRsp*>(&::com::letsmidi::monsys::protocol::client::LoginRsp::default_instance());
  request_comm_server_ = const_cast< ::com::letsmidi::monsys::protocol::client::RequestCommServer*>(&::com::letsmidi::monsys::protocol::client::RequestCommServer::default_instance());
  request_comm_server_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::client::RequestCommServerRsp*>(&::com::letsmidi::monsys::protocol::client::RequestCommServerRsp::default_instance());
}

ClientMsg::ClientMsg(const ClientMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.client.ClientMsg)
}

void ClientMsg::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  type_ = 1;
  sequence_ = 0u;
  login_ = NULL;
  login_rsp_ = NULL;
  request_comm_server_ = NULL;
  request_comm_server_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMsg::~ClientMsg() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.client.ClientMsg)
  SharedDtor();
}

void ClientMsg::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete login_rsp_;
    delete request_comm_server_;
    delete request_comm_server_rsp_;
  }
}

void ClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMsg_descriptor_;
}

const ClientMsg& ClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

ClientMsg* ClientMsg::default_instance_ = NULL;

ClientMsg* ClientMsg::New() const {
  return new ClientMsg;
}

void ClientMsg::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    version_ = 0u;
    type_ = 1;
    sequence_ = 0u;
    if (has_login()) {
      if (login_ != NULL) login_->::com::letsmidi::monsys::protocol::client::Login::Clear();
    }
    if (has_login_rsp()) {
      if (login_rsp_ != NULL) login_rsp_->::com::letsmidi::monsys::protocol::client::LoginRsp::Clear();
    }
    if (has_request_comm_server()) {
      if (request_comm_server_ != NULL) request_comm_server_->::com::letsmidi::monsys::protocol::client::RequestCommServer::Clear();
    }
    if (has_request_comm_server_rsp()) {
      if (request_comm_server_rsp_ != NULL) request_comm_server_rsp_->::com::letsmidi::monsys::protocol::client::RequestCommServerRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.client.ClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .com.letsmidi.monsys.protocol.client.MsgType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::client::MsgType_IsValid(value)) {
            set_type(static_cast< ::com::letsmidi::monsys::protocol::client::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // required uint32 sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_login;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.client.Login login = 5;
      case 5: {
        if (tag == 42) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_login_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;
      case 6: {
        if (tag == 50) {
         parse_login_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_request_comm_server;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;
      case 7: {
        if (tag == 58) {
         parse_request_comm_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_comm_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_request_comm_server_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;
      case 8: {
        if (tag == 66) {
         parse_request_comm_server_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_comm_server_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.client.ClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.client.ClientMsg)
  return false;
#undef DO_
}

void ClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.client.ClientMsg)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required .com.letsmidi.monsys.protocol.client.MsgType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence(), output);
  }

  // optional .com.letsmidi.monsys.protocol.client.Login login = 5;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->login(), output);
  }

  // optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;
  if (has_login_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->login_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;
  if (has_request_comm_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->request_comm_server(), output);
  }

  // optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;
  if (has_request_comm_server_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->request_comm_server_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.client.ClientMsg)
}

::google::protobuf::uint8* ClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.client.ClientMsg)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required .com.letsmidi.monsys.protocol.client.MsgType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence(), target);
  }

  // optional .com.letsmidi.monsys.protocol.client.Login login = 5;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->login(), target);
  }

  // optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;
  if (has_login_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->login_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;
  if (has_request_comm_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->request_comm_server(), target);
  }

  // optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;
  if (has_request_comm_server_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->request_comm_server_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.client.ClientMsg)
  return target;
}

int ClientMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required .com.letsmidi.monsys.protocol.client.MsgType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional .com.letsmidi.monsys.protocol.client.Login login = 5;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .com.letsmidi.monsys.protocol.client.LoginRsp login_rsp = 6;
    if (has_login_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.client.RequestCommServer request_comm_server = 7;
    if (has_request_comm_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_comm_server());
    }

    // optional .com.letsmidi.monsys.protocol.client.RequestCommServerRsp request_comm_server_rsp = 8;
    if (has_request_comm_server_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_comm_server_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMsg::MergeFrom(const ClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_login()) {
      mutable_login()->::com::letsmidi::monsys::protocol::client::Login::MergeFrom(from.login());
    }
    if (from.has_login_rsp()) {
      mutable_login_rsp()->::com::letsmidi::monsys::protocol::client::LoginRsp::MergeFrom(from.login_rsp());
    }
    if (from.has_request_comm_server()) {
      mutable_request_comm_server()->::com::letsmidi::monsys::protocol::client::RequestCommServer::MergeFrom(from.request_comm_server());
    }
    if (from.has_request_comm_server_rsp()) {
      mutable_request_comm_server_rsp()->::com::letsmidi::monsys::protocol::client::RequestCommServerRsp::MergeFrom(from.request_comm_server_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMsg::CopyFrom(const ClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_login_rsp()) {
    if (!this->login_rsp().IsInitialized()) return false;
  }
  if (has_request_comm_server_rsp()) {
    if (!this->request_comm_server_rsp().IsInitialized()) return false;
  }
  return true;
}

void ClientMsg::Swap(ClientMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(sequence_, other->sequence_);
    std::swap(login_, other->login_);
    std::swap(login_rsp_, other->login_rsp_);
    std::swap(request_comm_server_, other->request_comm_server_);
    std::swap(request_comm_server_rsp_, other->request_comm_server_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMsg_descriptor_;
  metadata.reflection = ClientMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kClientTypeFieldNumber;
const int Login::kUserNameFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.client.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.client.Login)
}

void Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_type_ = 1;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.client.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    client_type_ = 1;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.client.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::client::ClientType_IsValid(value)) {
            set_client_type(static_cast< ::com::letsmidi::monsys::protocol::client::ClientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.client.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.client.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.client.Login)
  // required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->client_type(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.client.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.client.Login)
  // required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->client_type(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.client.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.letsmidi.monsys.protocol.client.ClientType client_type = 1 [default = CLIENT_TYPE_ANDROID];
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(client_type_, other->client_type_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.client.LoginRsp)
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.client.LoginRsp)
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.client.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRsp_descriptor_;
}

const LoginRsp& LoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.client.LoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.client.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.client.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.client.LoginRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.client.LoginRsp)
}

::google::protobuf::uint8* LoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.client.LoginRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.client.LoginRsp)
  return target;
}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRsp_descriptor_;
  metadata.reflection = LoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestCommServer::RequestCommServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.client.RequestCommServer)
}

void RequestCommServer::InitAsDefaultInstance() {
}

RequestCommServer::RequestCommServer(const RequestCommServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.client.RequestCommServer)
}

void RequestCommServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCommServer::~RequestCommServer() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.client.RequestCommServer)
  SharedDtor();
}

void RequestCommServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCommServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCommServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCommServer_descriptor_;
}

const RequestCommServer& RequestCommServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RequestCommServer* RequestCommServer::default_instance_ = NULL;

RequestCommServer* RequestCommServer::New() const {
  return new RequestCommServer;
}

void RequestCommServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCommServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.client.RequestCommServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.client.RequestCommServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.client.RequestCommServer)
  return false;
#undef DO_
}

void RequestCommServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.client.RequestCommServer)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.client.RequestCommServer)
}

::google::protobuf::uint8* RequestCommServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.client.RequestCommServer)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.client.RequestCommServer)
  return target;
}

int RequestCommServer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCommServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCommServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCommServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCommServer::MergeFrom(const RequestCommServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCommServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCommServer::CopyFrom(const RequestCommServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCommServer::IsInitialized() const {

  return true;
}

void RequestCommServer::Swap(RequestCommServer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCommServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCommServer_descriptor_;
  metadata.reflection = RequestCommServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCommServerRsp::kCodeFieldNumber;
const int RequestCommServerRsp::kIpV4AddrFieldNumber;
const int RequestCommServerRsp::kPortFieldNumber;
const int RequestCommServerRsp::kExchangeIdFieldNumber;
const int RequestCommServerRsp::kPeerIdFieldNumber;
#endif  // !_MSC_VER

RequestCommServerRsp::RequestCommServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
}

void RequestCommServerRsp::InitAsDefaultInstance() {
}

RequestCommServerRsp::RequestCommServerRsp(const RequestCommServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
}

void RequestCommServerRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  ip_v4_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCommServerRsp::~RequestCommServerRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  SharedDtor();
}

void RequestCommServerRsp::SharedDtor() {
  if (ip_v4_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_v4_addr_;
  }
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (peerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peerid_;
  }
  if (this != default_instance_) {
  }
}

void RequestCommServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCommServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCommServerRsp_descriptor_;
}

const RequestCommServerRsp& RequestCommServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

RequestCommServerRsp* RequestCommServerRsp::default_instance_ = NULL;

RequestCommServerRsp* RequestCommServerRsp::New() const {
  return new RequestCommServerRsp;
}

void RequestCommServerRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestCommServerRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(code_, port_);
    if (has_ip_v4_addr()) {
      if (ip_v4_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_v4_addr_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeid_->clear();
      }
    }
    if (has_peerid()) {
      if (peerid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peerid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCommServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip_v4_addr;
        break;
      }

      // required string ip_v4_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_ip_v4_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_v4_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_v4_addr().data(), this->ip_v4_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip_v4_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exchangeId;
        break;
      }

      // required string exchangeId = 4;
      case 4: {
        if (tag == 34) {
         parse_exchangeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_peerId;
        break;
      }

      // required string peerId = 5;
      case 5: {
        if (tag == 42) {
         parse_peerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peerid().data(), this->peerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  return false;
#undef DO_
}

void RequestCommServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string ip_v4_addr = 2;
  if (has_ip_v4_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_v4_addr().data(), this->ip_v4_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_v4_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip_v4_addr(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required string exchangeId = 4;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchangeid(), output);
  }

  // required string peerId = 5;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peerid().data(), this->peerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->peerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
}

::google::protobuf::uint8* RequestCommServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string ip_v4_addr = 2;
  if (has_ip_v4_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_v4_addr().data(), this->ip_v4_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_v4_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_v4_addr(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required string exchangeId = 4;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeid(), target);
  }

  // required string peerId = 5;
  if (has_peerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peerid().data(), this->peerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->peerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.client.RequestCommServerRsp)
  return target;
}

int RequestCommServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string ip_v4_addr = 2;
    if (has_ip_v4_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_v4_addr());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required string exchangeId = 4;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required string peerId = 5;
    if (has_peerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCommServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCommServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCommServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCommServerRsp::MergeFrom(const RequestCommServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_ip_v4_addr()) {
      set_ip_v4_addr(from.ip_v4_addr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_peerid()) {
      set_peerid(from.peerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCommServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCommServerRsp::CopyFrom(const RequestCommServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCommServerRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestCommServerRsp::Swap(RequestCommServerRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(ip_v4_addr_, other->ip_v4_addr_);
    std::swap(port_, other->port_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(peerid_, other->peerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCommServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCommServerRsp_descriptor_;
  metadata.reflection = RequestCommServerRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

// @@protoc_insertion_point(global_scope)
