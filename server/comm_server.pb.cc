// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace letsmidi {
namespace monsys {
namespace protocol {
namespace commserver {

namespace {

const ::google::protobuf::Descriptor* CommServerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommServerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTokenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTokenRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_5fserver_2eproto() {
  protobuf_AddDesc_comm_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm_server.proto");
  GOOGLE_CHECK(file != NULL);
  CommServerMsg_descriptor_ = file->message_type(0);
  static const int CommServerMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, register__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, register_rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, request_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, request_token_rsp_),
  };
  CommServerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommServerMsg_descriptor_,
      CommServerMsg::default_instance_,
      CommServerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommServerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommServerMsg));
  Register_descriptor_ = file->message_type(1);
  static const int Register_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, ip_v4_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, port_),
  };
  Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register));
  RegisterRsp_descriptor_ = file->message_type(2);
  static const int RegisterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsp, code_),
  };
  RegisterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRsp_descriptor_,
      RegisterRsp::default_instance_,
      RegisterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRsp));
  RequestToken_descriptor_ = file->message_type(3);
  static const int RequestToken_offsets_[1] = {
  };
  RequestToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestToken_descriptor_,
      RequestToken::default_instance_,
      RequestToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestToken));
  RequestTokenRsp_descriptor_ = file->message_type(4);
  static const int RequestTokenRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTokenRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTokenRsp, token_),
  };
  RequestTokenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTokenRsp_descriptor_,
      RequestTokenRsp::default_instance_,
      RequestTokenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTokenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTokenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTokenRsp));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommServerMsg_descriptor_, &CommServerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRsp_descriptor_, &RegisterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestToken_descriptor_, &RequestToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTokenRsp_descriptor_, &RequestTokenRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_5fserver_2eproto() {
  delete CommServerMsg::default_instance_;
  delete CommServerMsg_reflection_;
  delete Register::default_instance_;
  delete Register_reflection_;
  delete RegisterRsp::default_instance_;
  delete RegisterRsp_reflection_;
  delete RequestToken::default_instance_;
  delete RequestToken_reflection_;
  delete RequestTokenRsp::default_instance_;
  delete RequestTokenRsp_reflection_;
}

void protobuf_AddDesc_comm_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021comm_server.proto\022\'com.letsmidi.monsys"
    ".protocol.commserver\"\246\003\n\rCommServerMsg\022\017"
    "\n\007version\030\001 \002(\r\022>\n\004type\030\002 \002(\01620.com.lets"
    "midi.monsys.protocol.commserver.MsgType\022"
    "\020\n\010sequence\030\003 \002(\r\022C\n\010register\030\005 \001(\01321.co"
    "m.letsmidi.monsys.protocol.commserver.Re"
    "gister\022J\n\014register_rsp\030\006 \001(\01324.com.letsm"
    "idi.monsys.protocol.commserver.RegisterR"
    "sp\022L\n\rrequest_token\030\007 \001(\01325.com.letsmidi"
    ".monsys.protocol.commserver.RequestToken"
    "\022S\n\021request_token_rsp\030\010 \001(\01328.com.letsmi"
    "di.monsys.protocol.commserver.RequestTok"
    "enRsp\",\n\010Register\022\022\n\nip_v4_addr\030\001 \002(\t\022\014\n"
    "\004port\030\002 \002(\r\"\033\n\013RegisterRsp\022\014\n\004code\030\001 \002(\005"
    "\"\016\n\014RequestToken\".\n\017RequestTokenRsp\022\014\n\004c"
    "ode\030\001 \002(\005\022\r\n\005token\030\002 \002(\t*b\n\007MsgType\022\r\n\tH"
    "EARTBEAT\020\001\022\014\n\010REGISTER\020\003\022\020\n\014REGISTER_RSP"
    "\020\004\022\021\n\rREQUEST_TOKEN\020\005\022\025\n\021REQUEST_TOKEN_R"
    "SP\020\006", 724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm_server.proto", &protobuf_RegisterTypes);
  CommServerMsg::default_instance_ = new CommServerMsg();
  Register::default_instance_ = new Register();
  RegisterRsp::default_instance_ = new RegisterRsp();
  RequestToken::default_instance_ = new RequestToken();
  RequestTokenRsp::default_instance_ = new RequestTokenRsp();
  CommServerMsg::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  RegisterRsp::default_instance_->InitAsDefaultInstance();
  RequestToken::default_instance_->InitAsDefaultInstance();
  RequestTokenRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_5fserver_2eproto {
  StaticDescriptorInitializer_comm_5fserver_2eproto() {
    protobuf_AddDesc_comm_5fserver_2eproto();
  }
} static_descriptor_initializer_comm_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CommServerMsg::kVersionFieldNumber;
const int CommServerMsg::kTypeFieldNumber;
const int CommServerMsg::kSequenceFieldNumber;
const int CommServerMsg::kRegisterFieldNumber;
const int CommServerMsg::kRegisterRspFieldNumber;
const int CommServerMsg::kRequestTokenFieldNumber;
const int CommServerMsg::kRequestTokenRspFieldNumber;
#endif  // !_MSC_VER

CommServerMsg::CommServerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
}

void CommServerMsg::InitAsDefaultInstance() {
  register__ = const_cast< ::com::letsmidi::monsys::protocol::commserver::Register*>(&::com::letsmidi::monsys::protocol::commserver::Register::default_instance());
  register_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::commserver::RegisterRsp*>(&::com::letsmidi::monsys::protocol::commserver::RegisterRsp::default_instance());
  request_token_ = const_cast< ::com::letsmidi::monsys::protocol::commserver::RequestToken*>(&::com::letsmidi::monsys::protocol::commserver::RequestToken::default_instance());
  request_token_rsp_ = const_cast< ::com::letsmidi::monsys::protocol::commserver::RequestTokenRsp*>(&::com::letsmidi::monsys::protocol::commserver::RequestTokenRsp::default_instance());
}

CommServerMsg::CommServerMsg(const CommServerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
}

void CommServerMsg::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  type_ = 1;
  sequence_ = 0u;
  register__ = NULL;
  register_rsp_ = NULL;
  request_token_ = NULL;
  request_token_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommServerMsg::~CommServerMsg() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  SharedDtor();
}

void CommServerMsg::SharedDtor() {
  if (this != default_instance_) {
    delete register__;
    delete register_rsp_;
    delete request_token_;
    delete request_token_rsp_;
  }
}

void CommServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommServerMsg_descriptor_;
}

const CommServerMsg& CommServerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_5fserver_2eproto();
  return *default_instance_;
}

CommServerMsg* CommServerMsg::default_instance_ = NULL;

CommServerMsg* CommServerMsg::New() const {
  return new CommServerMsg;
}

void CommServerMsg::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    version_ = 0u;
    type_ = 1;
    sequence_ = 0u;
    if (has_register_()) {
      if (register__ != NULL) register__->::com::letsmidi::monsys::protocol::commserver::Register::Clear();
    }
    if (has_register_rsp()) {
      if (register_rsp_ != NULL) register_rsp_->::com::letsmidi::monsys::protocol::commserver::RegisterRsp::Clear();
    }
    if (has_request_token()) {
      if (request_token_ != NULL) request_token_->::com::letsmidi::monsys::protocol::commserver::RequestToken::Clear();
    }
    if (has_request_token_rsp()) {
      if (request_token_rsp_ != NULL) request_token_rsp_->::com::letsmidi::monsys::protocol::commserver::RequestTokenRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::letsmidi::monsys::protocol::commserver::MsgType_IsValid(value)) {
            set_type(static_cast< ::com::letsmidi::monsys::protocol::commserver::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // required uint32 sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_register;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;
      case 5: {
        if (tag == 42) {
         parse_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_register_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;
      case 6: {
        if (tag == 50) {
         parse_register_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_request_token;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;
      case 7: {
        if (tag == 58) {
         parse_request_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_request_token_rsp;
        break;
      }

      // optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;
      case 8: {
        if (tag == 66) {
         parse_request_token_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_token_rsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  return false;
#undef DO_
}

void CommServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence(), output);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->register_(), output);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;
  if (has_register_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->register_rsp(), output);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;
  if (has_request_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->request_token(), output);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;
  if (has_request_token_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->request_token_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
}

::google::protobuf::uint8* CommServerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence(), target);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;
  if (has_register_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->register_(), target);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;
  if (has_register_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->register_rsp(), target);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;
  if (has_request_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->request_token(), target);
  }

  // optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;
  if (has_request_token_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->request_token_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.commserver.CommServerMsg)
  return target;
}

int CommServerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required .com.letsmidi.monsys.protocol.commserver.MsgType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional .com.letsmidi.monsys.protocol.commserver.Register register = 5;
    if (has_register_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_());
    }

    // optional .com.letsmidi.monsys.protocol.commserver.RegisterRsp register_rsp = 6;
    if (has_register_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_rsp());
    }

    // optional .com.letsmidi.monsys.protocol.commserver.RequestToken request_token = 7;
    if (has_request_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_token());
    }

    // optional .com.letsmidi.monsys.protocol.commserver.RequestTokenRsp request_token_rsp = 8;
    if (has_request_token_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_token_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommServerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommServerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommServerMsg::MergeFrom(const CommServerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_register_()) {
      mutable_register_()->::com::letsmidi::monsys::protocol::commserver::Register::MergeFrom(from.register_());
    }
    if (from.has_register_rsp()) {
      mutable_register_rsp()->::com::letsmidi::monsys::protocol::commserver::RegisterRsp::MergeFrom(from.register_rsp());
    }
    if (from.has_request_token()) {
      mutable_request_token()->::com::letsmidi::monsys::protocol::commserver::RequestToken::MergeFrom(from.request_token());
    }
    if (from.has_request_token_rsp()) {
      mutable_request_token_rsp()->::com::letsmidi::monsys::protocol::commserver::RequestTokenRsp::MergeFrom(from.request_token_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommServerMsg::CopyFrom(const CommServerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommServerMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_register_()) {
    if (!this->register_().IsInitialized()) return false;
  }
  if (has_register_rsp()) {
    if (!this->register_rsp().IsInitialized()) return false;
  }
  if (has_request_token_rsp()) {
    if (!this->request_token_rsp().IsInitialized()) return false;
  }
  return true;
}

void CommServerMsg::Swap(CommServerMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(sequence_, other->sequence_);
    std::swap(register__, other->register__);
    std::swap(register_rsp_, other->register_rsp_);
    std::swap(request_token_, other->request_token_);
    std::swap(request_token_rsp_, other->request_token_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommServerMsg_descriptor_;
  metadata.reflection = CommServerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kIpV4AddrFieldNumber;
const int Register::kPortFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.commserver.Register)
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.commserver.Register)
}

void Register::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_v4_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.commserver.Register)
  SharedDtor();
}

void Register::SharedDtor() {
  if (ip_v4_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_v4_addr_;
  }
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_5fserver_2eproto();
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip_v4_addr()) {
      if (ip_v4_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_v4_addr_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.commserver.Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip_v4_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_v4_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_v4_addr().data(), this->ip_v4_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip_v4_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.commserver.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.commserver.Register)
  return false;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.commserver.Register)
  // required string ip_v4_addr = 1;
  if (has_ip_v4_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_v4_addr().data(), this->ip_v4_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_v4_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_v4_addr(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.commserver.Register)
}

::google::protobuf::uint8* Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.commserver.Register)
  // required string ip_v4_addr = 1;
  if (has_ip_v4_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_v4_addr().data(), this->ip_v4_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_v4_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_v4_addr(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.commserver.Register)
  return target;
}

int Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip_v4_addr = 1;
    if (has_ip_v4_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_v4_addr());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip_v4_addr()) {
      set_ip_v4_addr(from.ip_v4_addr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(ip_v4_addr_, other->ip_v4_addr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

RegisterRsp::RegisterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
}

void RegisterRsp::InitAsDefaultInstance() {
}

RegisterRsp::RegisterRsp(const RegisterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
}

void RegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRsp::~RegisterRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  SharedDtor();
}

void RegisterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRsp_descriptor_;
}

const RegisterRsp& RegisterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_5fserver_2eproto();
  return *default_instance_;
}

RegisterRsp* RegisterRsp::default_instance_ = NULL;

RegisterRsp* RegisterRsp::New() const {
  return new RegisterRsp;
}

void RegisterRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  return false;
#undef DO_
}

void RegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
}

::google::protobuf::uint8* RegisterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.commserver.RegisterRsp)
  return target;
}

int RegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRsp::MergeFrom(const RegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRsp::CopyFrom(const RegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegisterRsp::Swap(RegisterRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRsp_descriptor_;
  metadata.reflection = RegisterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestToken::RequestToken()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.commserver.RequestToken)
}

void RequestToken::InitAsDefaultInstance() {
}

RequestToken::RequestToken(const RequestToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.commserver.RequestToken)
}

void RequestToken::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestToken::~RequestToken() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.commserver.RequestToken)
  SharedDtor();
}

void RequestToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestToken_descriptor_;
}

const RequestToken& RequestToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_5fserver_2eproto();
  return *default_instance_;
}

RequestToken* RequestToken::default_instance_ = NULL;

RequestToken* RequestToken::New() const {
  return new RequestToken;
}

void RequestToken::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.commserver.RequestToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.commserver.RequestToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.commserver.RequestToken)
  return false;
#undef DO_
}

void RequestToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.commserver.RequestToken)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.commserver.RequestToken)
}

::google::protobuf::uint8* RequestToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.commserver.RequestToken)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.commserver.RequestToken)
  return target;
}

int RequestToken::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestToken::MergeFrom(const RequestToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestToken::CopyFrom(const RequestToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestToken::IsInitialized() const {

  return true;
}

void RequestToken::Swap(RequestToken* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestToken_descriptor_;
  metadata.reflection = RequestToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTokenRsp::kCodeFieldNumber;
const int RequestTokenRsp::kTokenFieldNumber;
#endif  // !_MSC_VER

RequestTokenRsp::RequestTokenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
}

void RequestTokenRsp::InitAsDefaultInstance() {
}

RequestTokenRsp::RequestTokenRsp(const RequestTokenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
}

void RequestTokenRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTokenRsp::~RequestTokenRsp() {
  // @@protoc_insertion_point(destructor:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  SharedDtor();
}

void RequestTokenRsp::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RequestTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTokenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTokenRsp_descriptor_;
}

const RequestTokenRsp& RequestTokenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_5fserver_2eproto();
  return *default_instance_;
}

RequestTokenRsp* RequestTokenRsp::default_instance_ = NULL;

RequestTokenRsp* RequestTokenRsp::New() const {
  return new RequestTokenRsp;
}

void RequestTokenRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  return false;
#undef DO_
}

void RequestTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
}

::google::protobuf::uint8* RequestTokenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.letsmidi.monsys.protocol.commserver.RequestTokenRsp)
  return target;
}

int RequestTokenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTokenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTokenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTokenRsp::MergeFrom(const RequestTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTokenRsp::CopyFrom(const RequestTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestTokenRsp::Swap(RequestTokenRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTokenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTokenRsp_descriptor_;
  metadata.reflection = RequestTokenRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commserver
}  // namespace protocol
}  // namespace monsys
}  // namespace letsmidi
}  // namespace com

// @@protoc_insertion_point(global_scope)
