// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

package com.letsmidi.monsys.protocol.push;

public final class Route {
  private Route() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.letsmidi.monsys.protocol.push.MsgType}
   */
  public enum MsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>REQ_TOKEN = 1;</code>
     */
    REQ_TOKEN(0, 1),
    /**
     * <code>REQ_TOKEN_RSP = 2;</code>
     */
    REQ_TOKEN_RSP(1, 2),
    /**
     * <code>CONNECT = 3;</code>
     */
    CONNECT(2, 3),
    /**
     * <code>CONNECT_RSP = 4;</code>
     */
    CONNECT_RSP(3, 4),
    ;

    /**
     * <code>REQ_TOKEN = 1;</code>
     */
    public static final int REQ_TOKEN_VALUE = 1;
    /**
     * <code>REQ_TOKEN_RSP = 2;</code>
     */
    public static final int REQ_TOKEN_RSP_VALUE = 2;
    /**
     * <code>CONNECT = 3;</code>
     */
    public static final int CONNECT_VALUE = 3;
    /**
     * <code>CONNECT_RSP = 4;</code>
     */
    public static final int CONNECT_RSP_VALUE = 4;


    public final int getNumber() { return value; }

    public static MsgType valueOf(int value) {
      switch (value) {
        case 1: return REQ_TOKEN;
        case 2: return REQ_TOKEN_RSP;
        case 3: return CONNECT;
        case 4: return CONNECT_RSP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.push.Route.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MsgType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.letsmidi.monsys.protocol.push.MsgType)
  }

  public interface RouteMsgOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 version = 1 [default = 1];
    /**
     * <code>required int32 version = 1 [default = 1];</code>
     */
    boolean hasVersion();
    /**
     * <code>required int32 version = 1 [default = 1];</code>
     */
    int getVersion();

    // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
    /**
     * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.MsgType getType();

    // optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
     */
    boolean hasReqToken();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.ReqToken getReqToken();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.ReqTokenOrBuilder getReqTokenOrBuilder();

    // optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
     */
    boolean hasReqTokenRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp getReqTokenRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.ReqTokenRspOrBuilder getReqTokenRspOrBuilder();

    // optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
     */
    boolean hasConnect();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.Connect getConnect();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.ConnectOrBuilder getConnectOrBuilder();

    // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
     */
    boolean hasConnectRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.ConnectRsp getConnectRsp();
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
     */
    com.letsmidi.monsys.protocol.push.Route.ConnectRspOrBuilder getConnectRspOrBuilder();
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.push.RouteMsg}
   */
  public static final class RouteMsg extends
      com.google.protobuf.GeneratedMessage
      implements RouteMsgOrBuilder {
    // Use RouteMsg.newBuilder() to construct.
    private RouteMsg(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RouteMsg(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RouteMsg defaultInstance;
    public static RouteMsg getDefaultInstance() {
      return defaultInstance;
    }

    public RouteMsg getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RouteMsg(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              version_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.letsmidi.monsys.protocol.push.Route.MsgType value = com.letsmidi.monsys.protocol.push.Route.MsgType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 82: {
              com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = reqToken_.toBuilder();
              }
              reqToken_ = input.readMessage(com.letsmidi.monsys.protocol.push.Route.ReqToken.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reqToken_);
                reqToken_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 90: {
              com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = reqTokenRsp_.toBuilder();
              }
              reqTokenRsp_ = input.readMessage(com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reqTokenRsp_);
                reqTokenRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 98: {
              com.letsmidi.monsys.protocol.push.Route.Connect.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = connect_.toBuilder();
              }
              connect_ = input.readMessage(com.letsmidi.monsys.protocol.push.Route.Connect.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(connect_);
                connect_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 106: {
              com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = connectRsp_.toBuilder();
              }
              connectRsp_ = input.readMessage(com.letsmidi.monsys.protocol.push.Route.ConnectRsp.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(connectRsp_);
                connectRsp_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.push.Route.RouteMsg.class, com.letsmidi.monsys.protocol.push.Route.RouteMsg.Builder.class);
    }

    public static com.google.protobuf.Parser<RouteMsg> PARSER =
        new com.google.protobuf.AbstractParser<RouteMsg>() {
      public RouteMsg parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RouteMsg(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RouteMsg> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 version = 1 [default = 1];
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>required int32 version = 1 [default = 1];</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 version = 1 [default = 1];</code>
     */
    public int getVersion() {
      return version_;
    }

    // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private com.letsmidi.monsys.protocol.push.Route.MsgType type_;
    /**
     * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.MsgType getType() {
      return type_;
    }

    // optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;
    public static final int REQ_TOKEN_FIELD_NUMBER = 10;
    private com.letsmidi.monsys.protocol.push.Route.ReqToken reqToken_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
     */
    public boolean hasReqToken() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.ReqToken getReqToken() {
      return reqToken_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.ReqTokenOrBuilder getReqTokenOrBuilder() {
      return reqToken_;
    }

    // optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;
    public static final int REQ_TOKEN_RSP_FIELD_NUMBER = 11;
    private com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp reqTokenRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
     */
    public boolean hasReqTokenRsp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp getReqTokenRsp() {
      return reqTokenRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.ReqTokenRspOrBuilder getReqTokenRspOrBuilder() {
      return reqTokenRsp_;
    }

    // optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;
    public static final int CONNECT_FIELD_NUMBER = 12;
    private com.letsmidi.monsys.protocol.push.Route.Connect connect_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
     */
    public boolean hasConnect() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.Connect getConnect() {
      return connect_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.ConnectOrBuilder getConnectOrBuilder() {
      return connect_;
    }

    // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;
    public static final int CONNECT_RSP_FIELD_NUMBER = 13;
    private com.letsmidi.monsys.protocol.push.Route.ConnectRsp connectRsp_;
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
     */
    public boolean hasConnectRsp() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.ConnectRsp getConnectRsp() {
      return connectRsp_;
    }
    /**
     * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
     */
    public com.letsmidi.monsys.protocol.push.Route.ConnectRspOrBuilder getConnectRspOrBuilder() {
      return connectRsp_;
    }

    private void initFields() {
      version_ = 1;
      type_ = com.letsmidi.monsys.protocol.push.Route.MsgType.REQ_TOKEN;
      reqToken_ = com.letsmidi.monsys.protocol.push.Route.ReqToken.getDefaultInstance();
      reqTokenRsp_ = com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.getDefaultInstance();
      connect_ = com.letsmidi.monsys.protocol.push.Route.Connect.getDefaultInstance();
      connectRsp_ = com.letsmidi.monsys.protocol.push.Route.ConnectRsp.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(10, reqToken_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(11, reqTokenRsp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(12, connect_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(13, connectRsp_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, reqToken_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, reqTokenRsp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, connect_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, connectRsp_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.RouteMsg parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.push.Route.RouteMsg prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.push.RouteMsg}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.push.Route.RouteMsgOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.push.Route.RouteMsg.class, com.letsmidi.monsys.protocol.push.Route.RouteMsg.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.push.Route.RouteMsg.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getReqTokenFieldBuilder();
          getReqTokenRspFieldBuilder();
          getConnectFieldBuilder();
          getConnectRspFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        version_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.letsmidi.monsys.protocol.push.Route.MsgType.REQ_TOKEN;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (reqTokenBuilder_ == null) {
          reqToken_ = com.letsmidi.monsys.protocol.push.Route.ReqToken.getDefaultInstance();
        } else {
          reqTokenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (reqTokenRspBuilder_ == null) {
          reqTokenRsp_ = com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.getDefaultInstance();
        } else {
          reqTokenRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (connectBuilder_ == null) {
          connect_ = com.letsmidi.monsys.protocol.push.Route.Connect.getDefaultInstance();
        } else {
          connectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (connectRspBuilder_ == null) {
          connectRsp_ = com.letsmidi.monsys.protocol.push.Route.ConnectRsp.getDefaultInstance();
        } else {
          connectRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_descriptor;
      }

      public com.letsmidi.monsys.protocol.push.Route.RouteMsg getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.push.Route.RouteMsg.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.push.Route.RouteMsg build() {
        com.letsmidi.monsys.protocol.push.Route.RouteMsg result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.push.Route.RouteMsg buildPartial() {
        com.letsmidi.monsys.protocol.push.Route.RouteMsg result = new com.letsmidi.monsys.protocol.push.Route.RouteMsg(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (reqTokenBuilder_ == null) {
          result.reqToken_ = reqToken_;
        } else {
          result.reqToken_ = reqTokenBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (reqTokenRspBuilder_ == null) {
          result.reqTokenRsp_ = reqTokenRsp_;
        } else {
          result.reqTokenRsp_ = reqTokenRspBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (connectBuilder_ == null) {
          result.connect_ = connect_;
        } else {
          result.connect_ = connectBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (connectRspBuilder_ == null) {
          result.connectRsp_ = connectRsp_;
        } else {
          result.connectRsp_ = connectRspBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.push.Route.RouteMsg) {
          return mergeFrom((com.letsmidi.monsys.protocol.push.Route.RouteMsg)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.push.Route.RouteMsg other) {
        if (other == com.letsmidi.monsys.protocol.push.Route.RouteMsg.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasReqToken()) {
          mergeReqToken(other.getReqToken());
        }
        if (other.hasReqTokenRsp()) {
          mergeReqTokenRsp(other.getReqTokenRsp());
        }
        if (other.hasConnect()) {
          mergeConnect(other.getConnect());
        }
        if (other.hasConnectRsp()) {
          mergeConnectRsp(other.getConnectRsp());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersion()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.push.Route.RouteMsg parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.push.Route.RouteMsg) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 version = 1 [default = 1];
      private int version_ = 1;
      /**
       * <code>required int32 version = 1 [default = 1];</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 version = 1 [default = 1];</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required int32 version = 1 [default = 1];</code>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 version = 1 [default = 1];</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 1;
        onChanged();
        return this;
      }

      // required .com.letsmidi.monsys.protocol.push.MsgType type = 2;
      private com.letsmidi.monsys.protocol.push.Route.MsgType type_ = com.letsmidi.monsys.protocol.push.Route.MsgType.REQ_TOKEN;
      /**
       * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.MsgType getType() {
        return type_;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
       */
      public Builder setType(com.letsmidi.monsys.protocol.push.Route.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.letsmidi.monsys.protocol.push.MsgType type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = com.letsmidi.monsys.protocol.push.Route.MsgType.REQ_TOKEN;
        onChanged();
        return this;
      }

      // optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;
      private com.letsmidi.monsys.protocol.push.Route.ReqToken reqToken_ = com.letsmidi.monsys.protocol.push.Route.ReqToken.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.ReqToken, com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder, com.letsmidi.monsys.protocol.push.Route.ReqTokenOrBuilder> reqTokenBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public boolean hasReqToken() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ReqToken getReqToken() {
        if (reqTokenBuilder_ == null) {
          return reqToken_;
        } else {
          return reqTokenBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public Builder setReqToken(com.letsmidi.monsys.protocol.push.Route.ReqToken value) {
        if (reqTokenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reqToken_ = value;
          onChanged();
        } else {
          reqTokenBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public Builder setReqToken(
          com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder builderForValue) {
        if (reqTokenBuilder_ == null) {
          reqToken_ = builderForValue.build();
          onChanged();
        } else {
          reqTokenBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public Builder mergeReqToken(com.letsmidi.monsys.protocol.push.Route.ReqToken value) {
        if (reqTokenBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              reqToken_ != com.letsmidi.monsys.protocol.push.Route.ReqToken.getDefaultInstance()) {
            reqToken_ =
              com.letsmidi.monsys.protocol.push.Route.ReqToken.newBuilder(reqToken_).mergeFrom(value).buildPartial();
          } else {
            reqToken_ = value;
          }
          onChanged();
        } else {
          reqTokenBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public Builder clearReqToken() {
        if (reqTokenBuilder_ == null) {
          reqToken_ = com.letsmidi.monsys.protocol.push.Route.ReqToken.getDefaultInstance();
          onChanged();
        } else {
          reqTokenBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder getReqTokenBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getReqTokenFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ReqTokenOrBuilder getReqTokenOrBuilder() {
        if (reqTokenBuilder_ != null) {
          return reqTokenBuilder_.getMessageOrBuilder();
        } else {
          return reqToken_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqToken req_token = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.ReqToken, com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder, com.letsmidi.monsys.protocol.push.Route.ReqTokenOrBuilder> 
          getReqTokenFieldBuilder() {
        if (reqTokenBuilder_ == null) {
          reqTokenBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.push.Route.ReqToken, com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder, com.letsmidi.monsys.protocol.push.Route.ReqTokenOrBuilder>(
                  reqToken_,
                  getParentForChildren(),
                  isClean());
          reqToken_ = null;
        }
        return reqTokenBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;
      private com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp reqTokenRsp_ = com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp, com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder, com.letsmidi.monsys.protocol.push.Route.ReqTokenRspOrBuilder> reqTokenRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public boolean hasReqTokenRsp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp getReqTokenRsp() {
        if (reqTokenRspBuilder_ == null) {
          return reqTokenRsp_;
        } else {
          return reqTokenRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder setReqTokenRsp(com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp value) {
        if (reqTokenRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reqTokenRsp_ = value;
          onChanged();
        } else {
          reqTokenRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder setReqTokenRsp(
          com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder builderForValue) {
        if (reqTokenRspBuilder_ == null) {
          reqTokenRsp_ = builderForValue.build();
          onChanged();
        } else {
          reqTokenRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder mergeReqTokenRsp(com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp value) {
        if (reqTokenRspBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              reqTokenRsp_ != com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.getDefaultInstance()) {
            reqTokenRsp_ =
              com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.newBuilder(reqTokenRsp_).mergeFrom(value).buildPartial();
          } else {
            reqTokenRsp_ = value;
          }
          onChanged();
        } else {
          reqTokenRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public Builder clearReqTokenRsp() {
        if (reqTokenRspBuilder_ == null) {
          reqTokenRsp_ = com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.getDefaultInstance();
          onChanged();
        } else {
          reqTokenRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder getReqTokenRspBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getReqTokenRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ReqTokenRspOrBuilder getReqTokenRspOrBuilder() {
        if (reqTokenRspBuilder_ != null) {
          return reqTokenRspBuilder_.getMessageOrBuilder();
        } else {
          return reqTokenRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ReqTokenRsp req_token_rsp = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp, com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder, com.letsmidi.monsys.protocol.push.Route.ReqTokenRspOrBuilder> 
          getReqTokenRspFieldBuilder() {
        if (reqTokenRspBuilder_ == null) {
          reqTokenRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp, com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder, com.letsmidi.monsys.protocol.push.Route.ReqTokenRspOrBuilder>(
                  reqTokenRsp_,
                  getParentForChildren(),
                  isClean());
          reqTokenRsp_ = null;
        }
        return reqTokenRspBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;
      private com.letsmidi.monsys.protocol.push.Route.Connect connect_ = com.letsmidi.monsys.protocol.push.Route.Connect.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.Connect, com.letsmidi.monsys.protocol.push.Route.Connect.Builder, com.letsmidi.monsys.protocol.push.Route.ConnectOrBuilder> connectBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public boolean hasConnect() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.Connect getConnect() {
        if (connectBuilder_ == null) {
          return connect_;
        } else {
          return connectBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public Builder setConnect(com.letsmidi.monsys.protocol.push.Route.Connect value) {
        if (connectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          connect_ = value;
          onChanged();
        } else {
          connectBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public Builder setConnect(
          com.letsmidi.monsys.protocol.push.Route.Connect.Builder builderForValue) {
        if (connectBuilder_ == null) {
          connect_ = builderForValue.build();
          onChanged();
        } else {
          connectBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public Builder mergeConnect(com.letsmidi.monsys.protocol.push.Route.Connect value) {
        if (connectBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              connect_ != com.letsmidi.monsys.protocol.push.Route.Connect.getDefaultInstance()) {
            connect_ =
              com.letsmidi.monsys.protocol.push.Route.Connect.newBuilder(connect_).mergeFrom(value).buildPartial();
          } else {
            connect_ = value;
          }
          onChanged();
        } else {
          connectBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public Builder clearConnect() {
        if (connectBuilder_ == null) {
          connect_ = com.letsmidi.monsys.protocol.push.Route.Connect.getDefaultInstance();
          onChanged();
        } else {
          connectBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.Connect.Builder getConnectBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getConnectFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ConnectOrBuilder getConnectOrBuilder() {
        if (connectBuilder_ != null) {
          return connectBuilder_.getMessageOrBuilder();
        } else {
          return connect_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.Connect connect = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.Connect, com.letsmidi.monsys.protocol.push.Route.Connect.Builder, com.letsmidi.monsys.protocol.push.Route.ConnectOrBuilder> 
          getConnectFieldBuilder() {
        if (connectBuilder_ == null) {
          connectBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.push.Route.Connect, com.letsmidi.monsys.protocol.push.Route.Connect.Builder, com.letsmidi.monsys.protocol.push.Route.ConnectOrBuilder>(
                  connect_,
                  getParentForChildren(),
                  isClean());
          connect_ = null;
        }
        return connectBuilder_;
      }

      // optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;
      private com.letsmidi.monsys.protocol.push.Route.ConnectRsp connectRsp_ = com.letsmidi.monsys.protocol.push.Route.ConnectRsp.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.ConnectRsp, com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder, com.letsmidi.monsys.protocol.push.Route.ConnectRspOrBuilder> connectRspBuilder_;
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public boolean hasConnectRsp() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ConnectRsp getConnectRsp() {
        if (connectRspBuilder_ == null) {
          return connectRsp_;
        } else {
          return connectRspBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder setConnectRsp(com.letsmidi.monsys.protocol.push.Route.ConnectRsp value) {
        if (connectRspBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          connectRsp_ = value;
          onChanged();
        } else {
          connectRspBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder setConnectRsp(
          com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder builderForValue) {
        if (connectRspBuilder_ == null) {
          connectRsp_ = builderForValue.build();
          onChanged();
        } else {
          connectRspBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder mergeConnectRsp(com.letsmidi.monsys.protocol.push.Route.ConnectRsp value) {
        if (connectRspBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              connectRsp_ != com.letsmidi.monsys.protocol.push.Route.ConnectRsp.getDefaultInstance()) {
            connectRsp_ =
              com.letsmidi.monsys.protocol.push.Route.ConnectRsp.newBuilder(connectRsp_).mergeFrom(value).buildPartial();
          } else {
            connectRsp_ = value;
          }
          onChanged();
        } else {
          connectRspBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public Builder clearConnectRsp() {
        if (connectRspBuilder_ == null) {
          connectRsp_ = com.letsmidi.monsys.protocol.push.Route.ConnectRsp.getDefaultInstance();
          onChanged();
        } else {
          connectRspBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder getConnectRspBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getConnectRspFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      public com.letsmidi.monsys.protocol.push.Route.ConnectRspOrBuilder getConnectRspOrBuilder() {
        if (connectRspBuilder_ != null) {
          return connectRspBuilder_.getMessageOrBuilder();
        } else {
          return connectRsp_;
        }
      }
      /**
       * <code>optional .com.letsmidi.monsys.protocol.push.ConnectRsp connect_rsp = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.letsmidi.monsys.protocol.push.Route.ConnectRsp, com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder, com.letsmidi.monsys.protocol.push.Route.ConnectRspOrBuilder> 
          getConnectRspFieldBuilder() {
        if (connectRspBuilder_ == null) {
          connectRspBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.letsmidi.monsys.protocol.push.Route.ConnectRsp, com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder, com.letsmidi.monsys.protocol.push.Route.ConnectRspOrBuilder>(
                  connectRsp_,
                  getParentForChildren(),
                  isClean());
          connectRsp_ = null;
        }
        return connectRspBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.push.RouteMsg)
    }

    static {
      defaultInstance = new RouteMsg(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.RouteMsg)
  }

  public interface ReqTokenOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.push.ReqToken}
   */
  public static final class ReqToken extends
      com.google.protobuf.GeneratedMessage
      implements ReqTokenOrBuilder {
    // Use ReqToken.newBuilder() to construct.
    private ReqToken(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReqToken(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReqToken defaultInstance;
    public static ReqToken getDefaultInstance() {
      return defaultInstance;
    }

    public ReqToken getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReqToken(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqToken_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqToken_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.push.Route.ReqToken.class, com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder.class);
    }

    public static com.google.protobuf.Parser<ReqToken> PARSER =
        new com.google.protobuf.AbstractParser<ReqToken>() {
      public ReqToken parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReqToken(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReqToken> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqToken parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.push.Route.ReqToken prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.push.ReqToken}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.push.Route.ReqTokenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqToken_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqToken_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.push.Route.ReqToken.class, com.letsmidi.monsys.protocol.push.Route.ReqToken.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.push.Route.ReqToken.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqToken_descriptor;
      }

      public com.letsmidi.monsys.protocol.push.Route.ReqToken getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.push.Route.ReqToken.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.push.Route.ReqToken build() {
        com.letsmidi.monsys.protocol.push.Route.ReqToken result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.push.Route.ReqToken buildPartial() {
        com.letsmidi.monsys.protocol.push.Route.ReqToken result = new com.letsmidi.monsys.protocol.push.Route.ReqToken(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.push.Route.ReqToken) {
          return mergeFrom((com.letsmidi.monsys.protocol.push.Route.ReqToken)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.push.Route.ReqToken other) {
        if (other == com.letsmidi.monsys.protocol.push.Route.ReqToken.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.push.Route.ReqToken parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.push.Route.ReqToken) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.push.ReqToken)
    }

    static {
      defaultInstance = new ReqToken(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.ReqToken)
  }

  public interface ReqTokenRspOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.push.ReqTokenRsp}
   */
  public static final class ReqTokenRsp extends
      com.google.protobuf.GeneratedMessage
      implements ReqTokenRspOrBuilder {
    // Use ReqTokenRsp.newBuilder() to construct.
    private ReqTokenRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReqTokenRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReqTokenRsp defaultInstance;
    public static ReqTokenRsp getDefaultInstance() {
      return defaultInstance;
    }

    public ReqTokenRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReqTokenRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.class, com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<ReqTokenRsp> PARSER =
        new com.google.protobuf.AbstractParser<ReqTokenRsp>() {
      public ReqTokenRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReqTokenRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReqTokenRsp> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.push.ReqTokenRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.push.Route.ReqTokenRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.class, com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp build() {
        com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp buildPartial() {
        com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp result = new com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp other) {
        if (other == com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.push.Route.ReqTokenRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.push.ReqTokenRsp)
    }

    static {
      defaultInstance = new ReqTokenRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.ReqTokenRsp)
  }

  public interface ConnectOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.push.Connect}
   */
  public static final class Connect extends
      com.google.protobuf.GeneratedMessage
      implements ConnectOrBuilder {
    // Use Connect.newBuilder() to construct.
    private Connect(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Connect(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Connect defaultInstance;
    public static Connect getDefaultInstance() {
      return defaultInstance;
    }

    public Connect getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Connect(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_Connect_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_Connect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.push.Route.Connect.class, com.letsmidi.monsys.protocol.push.Route.Connect.Builder.class);
    }

    public static com.google.protobuf.Parser<Connect> PARSER =
        new com.google.protobuf.AbstractParser<Connect>() {
      public Connect parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Connect(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Connect> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.Connect parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.push.Route.Connect prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.push.Connect}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.push.Route.ConnectOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_Connect_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_Connect_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.push.Route.Connect.class, com.letsmidi.monsys.protocol.push.Route.Connect.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.push.Route.Connect.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_Connect_descriptor;
      }

      public com.letsmidi.monsys.protocol.push.Route.Connect getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.push.Route.Connect.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.push.Route.Connect build() {
        com.letsmidi.monsys.protocol.push.Route.Connect result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.push.Route.Connect buildPartial() {
        com.letsmidi.monsys.protocol.push.Route.Connect result = new com.letsmidi.monsys.protocol.push.Route.Connect(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.push.Route.Connect) {
          return mergeFrom((com.letsmidi.monsys.protocol.push.Route.Connect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.push.Route.Connect other) {
        if (other == com.letsmidi.monsys.protocol.push.Route.Connect.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.push.Route.Connect parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.push.Route.Connect) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.push.Connect)
    }

    static {
      defaultInstance = new Connect(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.Connect)
  }

  public interface ConnectRspOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.letsmidi.monsys.protocol.push.ConnectRsp}
   */
  public static final class ConnectRsp extends
      com.google.protobuf.GeneratedMessage
      implements ConnectRspOrBuilder {
    // Use ConnectRsp.newBuilder() to construct.
    private ConnectRsp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ConnectRsp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ConnectRsp defaultInstance;
    public static ConnectRsp getDefaultInstance() {
      return defaultInstance;
    }

    public ConnectRsp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ConnectRsp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.letsmidi.monsys.protocol.push.Route.ConnectRsp.class, com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder.class);
    }

    public static com.google.protobuf.Parser<ConnectRsp> PARSER =
        new com.google.protobuf.AbstractParser<ConnectRsp>() {
      public ConnectRsp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConnectRsp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ConnectRsp> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.letsmidi.monsys.protocol.push.Route.ConnectRsp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.letsmidi.monsys.protocol.push.Route.ConnectRsp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.letsmidi.monsys.protocol.push.ConnectRsp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.letsmidi.monsys.protocol.push.Route.ConnectRspOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.letsmidi.monsys.protocol.push.Route.ConnectRsp.class, com.letsmidi.monsys.protocol.push.Route.ConnectRsp.Builder.class);
      }

      // Construct using com.letsmidi.monsys.protocol.push.Route.ConnectRsp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.letsmidi.monsys.protocol.push.Route.internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_descriptor;
      }

      public com.letsmidi.monsys.protocol.push.Route.ConnectRsp getDefaultInstanceForType() {
        return com.letsmidi.monsys.protocol.push.Route.ConnectRsp.getDefaultInstance();
      }

      public com.letsmidi.monsys.protocol.push.Route.ConnectRsp build() {
        com.letsmidi.monsys.protocol.push.Route.ConnectRsp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.letsmidi.monsys.protocol.push.Route.ConnectRsp buildPartial() {
        com.letsmidi.monsys.protocol.push.Route.ConnectRsp result = new com.letsmidi.monsys.protocol.push.Route.ConnectRsp(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.letsmidi.monsys.protocol.push.Route.ConnectRsp) {
          return mergeFrom((com.letsmidi.monsys.protocol.push.Route.ConnectRsp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.letsmidi.monsys.protocol.push.Route.ConnectRsp other) {
        if (other == com.letsmidi.monsys.protocol.push.Route.ConnectRsp.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.letsmidi.monsys.protocol.push.Route.ConnectRsp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.letsmidi.monsys.protocol.push.Route.ConnectRsp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.letsmidi.monsys.protocol.push.ConnectRsp)
    }

    static {
      defaultInstance = new ConnectRsp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.letsmidi.monsys.protocol.push.ConnectRsp)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_push_ReqToken_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_push_ReqToken_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_push_Connect_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_push_Connect_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013route.proto\022!com.letsmidi.monsys.proto" +
      "col.push\"\340\002\n\010RouteMsg\022\022\n\007version\030\001 \002(\005:\001" +
      "1\0228\n\004type\030\002 \002(\0162*.com.letsmidi.monsys.pr" +
      "otocol.push.MsgType\022>\n\treq_token\030\n \001(\0132+" +
      ".com.letsmidi.monsys.protocol.push.ReqTo" +
      "ken\022E\n\rreq_token_rsp\030\013 \001(\0132..com.letsmid" +
      "i.monsys.protocol.push.ReqTokenRsp\022;\n\007co" +
      "nnect\030\014 \001(\0132*.com.letsmidi.monsys.protoc" +
      "ol.push.Connect\022B\n\013connect_rsp\030\r \001(\0132-.c" +
      "om.letsmidi.monsys.protocol.push.Connect",
      "Rsp\"\n\n\010ReqToken\"\r\n\013ReqTokenRsp\"\t\n\007Connec" +
      "t\"\014\n\nConnectRsp*I\n\007MsgType\022\r\n\tREQ_TOKEN\020" +
      "\001\022\021\n\rREQ_TOKEN_RSP\020\002\022\013\n\007CONNECT\020\003\022\017\n\013CON" +
      "NECT_RSP\020\004"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_push_RouteMsg_descriptor,
              new java.lang.String[] { "Version", "Type", "ReqToken", "ReqTokenRsp", "Connect", "ConnectRsp", });
          internal_static_com_letsmidi_monsys_protocol_push_ReqToken_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_letsmidi_monsys_protocol_push_ReqToken_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_push_ReqToken_descriptor,
              new java.lang.String[] { });
          internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_push_ReqTokenRsp_descriptor,
              new java.lang.String[] { });
          internal_static_com_letsmidi_monsys_protocol_push_Connect_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_letsmidi_monsys_protocol_push_Connect_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_push_Connect_descriptor,
              new java.lang.String[] { });
          internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_letsmidi_monsys_protocol_push_ConnectRsp_descriptor,
              new java.lang.String[] { });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
