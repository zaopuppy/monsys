
关于Java的跨平台
=================================================
在我看来，一次编译导出运行并不是什么特别的好处，如果一份代码可以不需要做任何适配和特殊的写作，就能顺利的在各个平台上编译运行，那么单纯为了减少编译而引入一个虚拟机在我看来是得不偿失的（这里特指跨平台，其他特性也许必须要虚拟机，但是不那么明显）。

我觉得，跨平台，更多的是对"API"的跨平台。

写C代码的程序员知道，不同的平台API是不一样，甚至差异非常大的。典型的，高性能socket接口，Linux有epoll，Mac OS有kqueue，Windows有IOCP（IO Completion Ports），除非是对底层有强大兴趣并投入大量时间深入学习，否则一个人很难对所有平台都非常熟悉。更何况在效率优先的开发期间，谁又停下进度来钻研这些API的差异呢？就算开发人员乐意，项目进度也不允许。

所以Java对交付优先的人来说，确实是极有吸引力的，毕竟，快速原型开放，对任何一个人/团队（尤其是创业团队）来说，尤其重要。

2013-11-11 22:24 (damn, I'm so lonely...)

帐号和设备的绑定
=================================================
一个帐号可以绑定多个家庭网关
每个网关由设备ID进行识别（暂时适用网卡MAC吧）

*
* 怎样得到一个设备的唯一ID? 手机是怎样做到IMEI号唯一的?
* 在普通的PC/嵌入式设备上如何做到?
* WEB登陆过程是怎样的? 天极通和手机加速是如何以及使用什么实现的
*

account: 
MAC = Device Identifier
ST = f(account+MAC)


Center:
{
	WebApi:
	{
		WebApi Message (JSON): "seq"
		Inner Message: sequence
	}

	ZDispatcher:
	{
		Inner Message
	}

	FGWServer(session):
	{
		Inner Message: sequence(key)
		WebApi Message (JSON): "seq"
	}
}



FGW:
{
	FGWClient(session):
	{
		WebApi Message (JSON): "seq"
		Inner Message: sequence(key)
	}

	ZDispatcher:
	{
		Inner Message
	}

	ZigBeeModule(session):
	{
		Inner Message: sequence(key)
		ZigBee Message: address
	}
}










REQUEST:

(HTTP --> Inner)
[Client] ->
	WebApiServer(Module) ->
		WebApiHandler(Handler) ->
			Dispatcher ->

Dispatcher ->
	SerialModule(Module) ->
		ZigBeeHandler(Handler) ->
			send() -> [ZigBee]

RESPONSE:

(ZigBee --> Inner)
[ZigBee] ->
	ZigBeeHandler(Handler) ->
		Dispatcher ->

Dispatcher ->
	WebApiServer(Module) ->
		WebApiHandler(Handler) ->
			send() -> [Client]





